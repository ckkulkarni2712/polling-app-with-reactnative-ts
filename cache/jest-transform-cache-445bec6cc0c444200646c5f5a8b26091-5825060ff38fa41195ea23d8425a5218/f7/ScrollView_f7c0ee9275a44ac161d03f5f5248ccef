01ac3ecd02817ab6ca340527c3f5d5de
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _AnimatedImplementation = _interopRequireDefault(require("../../Animated/AnimatedImplementation"));
var _Dimensions = _interopRequireDefault(require("../../Utilities/Dimensions"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var React = _interopRequireWildcard(require("react"));
var _ReactNative = _interopRequireDefault(require("../../Renderer/shims/ReactNative"));
var _ScrollViewStickyHeader = _interopRequireDefault(require("./ScrollViewStickyHeader"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _View = _interopRequireDefault(require("../View/View"));
var _UIManager = _interopRequireDefault(require("../../ReactNative/UIManager"));
var _Keyboard = _interopRequireDefault(require("../Keyboard/Keyboard"));
var _FrameRateLogger = _interopRequireDefault(require("../../Interaction/FrameRateLogger"));
var _TextInputState = _interopRequireDefault(require("../TextInput/TextInputState"));
var _dismissKeyboard = _interopRequireDefault(require("../../Utilities/dismissKeyboard"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _invariant = _interopRequireDefault(require("invariant"));
var _processDecelerationRate = _interopRequireDefault(require("./processDecelerationRate"));
var _splitLayoutProps2 = _interopRequireDefault(require("../../StyleSheet/splitLayoutProps"));
var _setAndForwardRef = _interopRequireDefault(require("../../Utilities/setAndForwardRef"));
var _ScrollViewContext = _interopRequireWildcard(require("./ScrollViewContext"));
var _ScrollViewCommands = _interopRequireDefault(require("./ScrollViewCommands"));
var _AndroidHorizontalScrollContentViewNativeComponent = _interopRequireDefault(require("./AndroidHorizontalScrollContentViewNativeComponent"));
var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(require("./AndroidHorizontalScrollViewNativeComponent"));
var _ScrollContentViewNativeComponent = _interopRequireDefault(require("./ScrollContentViewNativeComponent"));
var _ScrollViewNativeComponent = _interopRequireDefault(require("./ScrollViewNativeComponent"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
require("../../Renderer/shims/ReactNative");
var _ref = _Platform["default"].OS === 'android' ? {
    NativeHorizontalScrollViewTuple: [_AndroidHorizontalScrollViewNativeComponent["default"], _AndroidHorizontalScrollContentViewNativeComponent["default"]],
    NativeVerticalScrollViewTuple: [_ScrollViewNativeComponent["default"], _View["default"]]
  } : {
    NativeHorizontalScrollViewTuple: [_ScrollViewNativeComponent["default"], _ScrollContentViewNativeComponent["default"]],
    NativeVerticalScrollViewTuple: [_ScrollViewNativeComponent["default"], _ScrollContentViewNativeComponent["default"]]
  },
  NativeHorizontalScrollViewTuple = _ref.NativeHorizontalScrollViewTuple,
  NativeVerticalScrollViewTuple = _ref.NativeVerticalScrollViewTuple;
var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
var ScrollView = function (_React$Component) {
  (0, _inherits2["default"])(ScrollView, _React$Component);
  var _super = _createSuper(ScrollView);
  function ScrollView(props) {
    var _this$props$contentOf, _this$props$contentOf2, _this$props$contentIn, _this$props$contentIn2;
    var _this;
    (0, _classCallCheck2["default"])(this, ScrollView);
    _this = _super.call(this, props);
    _this._scrollAnimatedValue = void 0;
    _this._scrollAnimatedValueAttachment = null;
    _this._stickyHeaderRefs = new Map();
    _this._headerLayoutYs = new Map();
    _this._keyboardMetrics = null;
    _this._additionalScrollOffset = 0;
    _this._isTouching = false;
    _this._lastMomentumScrollBeginTime = 0;
    _this._lastMomentumScrollEndTime = 0;
    _this._observedScrollSinceBecomingResponder = false;
    _this._becameResponderWhileAnimating = false;
    _this._preventNegativeScrollOffset = null;
    _this._animated = null;
    _this._subscriptionKeyboardWillShow = null;
    _this._subscriptionKeyboardWillHide = null;
    _this._subscriptionKeyboardDidShow = null;
    _this._subscriptionKeyboardDidHide = null;
    _this.state = {
      layoutHeight: null
    };
    _this._setNativeRef = (0, _setAndForwardRef["default"])({
      getForwardedRef: function getForwardedRef() {
        return _this.props.scrollViewRef;
      },
      setLocalRef: function setLocalRef(ref) {
        _this._scrollViewRef = ref;
        if (ref) {
          ref.getScrollResponder = _this.getScrollResponder;
          ref.getScrollableNode = _this.getScrollableNode;
          ref.getInnerViewNode = _this.getInnerViewNode;
          ref.getInnerViewRef = _this.getInnerViewRef;
          ref.getNativeScrollRef = _this.getNativeScrollRef;
          ref.scrollTo = _this.scrollTo;
          ref.scrollToEnd = _this.scrollToEnd;
          ref.flashScrollIndicators = _this.flashScrollIndicators;
          ref.scrollResponderZoomTo = _this.scrollResponderZoomTo;
          ref.scrollResponderScrollNativeHandleToKeyboard = _this.scrollResponderScrollNativeHandleToKeyboard;
        }
      }
    });
    _this.getScrollResponder = function () {
      return (0, _assertThisInitialized2["default"])(_this);
    };
    _this.getScrollableNode = function () {
      return _ReactNative["default"].findNodeHandle(_this._scrollViewRef);
    };
    _this.getInnerViewNode = function () {
      return _ReactNative["default"].findNodeHandle(_this._innerViewRef);
    };
    _this.getInnerViewRef = function () {
      return _this._innerViewRef;
    };
    _this.getNativeScrollRef = function () {
      return _this._scrollViewRef;
    };
    _this.scrollTo = function (options, deprecatedX, deprecatedAnimated) {
      var x, y, animated;
      if (typeof options === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
        y = options;
        x = deprecatedX;
        animated = deprecatedAnimated;
      } else if (options) {
        y = options.y;
        x = options.x;
        animated = options.animated;
      }
      if (_this._scrollViewRef == null) {
        return;
      }
      _ScrollViewCommands["default"].scrollTo(_this._scrollViewRef, x || 0, y || 0, animated !== false);
    };
    _this.scrollToEnd = function (options) {
      var animated = (options && options.animated) !== false;
      if (_this._scrollViewRef == null) {
        return;
      }
      _ScrollViewCommands["default"].scrollToEnd(_this._scrollViewRef, animated);
    };
    _this.flashScrollIndicators = function () {
      if (_this._scrollViewRef == null) {
        return;
      }
      _ScrollViewCommands["default"].flashScrollIndicators(_this._scrollViewRef);
    };
    _this.scrollResponderScrollNativeHandleToKeyboard = function (nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      _this._additionalScrollOffset = additionalOffset || 0;
      _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      if (_this._innerViewRef == null) {
        return;
      }
      if (typeof nodeHandle === 'number') {
        _UIManager["default"].measureLayout(nodeHandle, _ReactNative["default"].findNodeHandle((0, _assertThisInitialized2["default"])(_this)), _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);
      } else {
        nodeHandle.measureLayout(_this._innerViewRef, _this._inputMeasureAndScrollToKeyboard, _this._textInputFocusError);
      }
    };
    _this.scrollResponderZoomTo = function (rect, animated) {
      (0, _invariant["default"])(_Platform["default"].OS === 'ios', 'zoomToRect is not implemented');
      if ('animated' in rect) {
        _this._animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }
      if (_this._scrollViewRef == null) {
        return;
      }
      _ScrollViewCommands["default"].zoomToRect(_this._scrollViewRef, rect, animated !== false);
    };
    _this._inputMeasureAndScrollToKeyboard = function (left, top, width, height) {
      var keyboardScreenY = _Dimensions["default"].get('window').height;
      var scrollTextInputIntoVisibleRect = function scrollTextInputIntoVisibleRect() {
        if (_this._keyboardMetrics != null) {
          keyboardScreenY = _this._keyboardMetrics.screenY;
        }
        var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;
        if (_this._preventNegativeScrollOffset === true) {
          scrollOffsetY = Math.max(0, scrollOffsetY);
        }
        _this.scrollTo({
          x: 0,
          y: scrollOffsetY,
          animated: true
        });
        _this._additionalScrollOffset = 0;
        _this._preventNegativeScrollOffset = false;
      };
      if (_this._keyboardMetrics == null) {
        setTimeout(function () {
          scrollTextInputIntoVisibleRect();
        }, 0);
      } else {
        scrollTextInputIntoVisibleRect();
      }
    };
    _this._handleScroll = function (e) {
      if (__DEV__) {
        if (_this.props.onScroll && _this.props.scrollEventThrottle == null && _Platform["default"].OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + "cause frame drops, use a bigger number if you don't need as " + 'much precision.');
        }
      }
      _this._observedScrollSinceBecomingResponder = true;
      _this.props.onScroll && _this.props.onScroll(e);
    };
    _this._handleLayout = function (e) {
      if (_this.props.invertStickyHeaders === true) {
        _this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }
      if (_this.props.onLayout) {
        _this.props.onLayout(e);
      }
    };
    _this._handleContentOnLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
        width = _e$nativeEvent$layout.width,
        height = _e$nativeEvent$layout.height;
      _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
    };
    _this._scrollViewRef = null;
    _this._innerViewRef = null;
    _this._setInnerViewRef = (0, _setAndForwardRef["default"])({
      getForwardedRef: function getForwardedRef() {
        return _this.props.innerViewRef;
      },
      setLocalRef: function setLocalRef(ref) {
        _this._innerViewRef = ref;
      }
    });
    _this.scrollResponderKeyboardWillShow = function (e) {
      _this._keyboardMetrics = e.endCoordinates;
      _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
    };
    _this.scrollResponderKeyboardWillHide = function (e) {
      _this._keyboardMetrics = null;
      _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
    };
    _this.scrollResponderKeyboardDidShow = function (e) {
      _this._keyboardMetrics = e.endCoordinates;
      _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
    };
    _this.scrollResponderKeyboardDidHide = function (e) {
      _this._keyboardMetrics = null;
      _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
    };
    _this._handleMomentumScrollBegin = function (e) {
      _this._lastMomentumScrollBeginTime = global.performance.now();
      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
    };
    _this._handleMomentumScrollEnd = function (e) {
      _FrameRateLogger["default"].endScroll();
      _this._lastMomentumScrollEndTime = global.performance.now();
      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
    };
    _this._handleScrollBeginDrag = function (e) {
      _FrameRateLogger["default"].beginScroll();
      if (_Platform["default"].OS === 'android' && _this.props.keyboardDismissMode === 'on-drag') {
        (0, _dismissKeyboard["default"])();
      }
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
    };
    _this._handleScrollEndDrag = function (e) {
      var velocity = e.nativeEvent.velocity;
      if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        _FrameRateLogger["default"].endScroll();
      }
      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
    };
    _this._isAnimating = function () {
      var now = global.performance.now();
      var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;
      return isAnimating;
    };
    _this._handleResponderGrant = function (e) {
      _this._observedScrollSinceBecomingResponder = false;
      _this.props.onResponderGrant && _this.props.onResponderGrant(e);
      _this._becameResponderWhileAnimating = _this._isAnimating();
    };
    _this._handleResponderReject = function () {};
    _this._handleResponderRelease = function (e) {
      _this._isTouching = e.nativeEvent.touches.length !== 0;
      _this.props.onResponderRelease && _this.props.onResponderRelease(e);
      if (typeof e.target === 'number') {
        if (__DEV__) {
          console.error('Did not expect event target to be a number. Should have been a native component');
        }
        return;
      }
      var currentlyFocusedTextInput = _TextInputState["default"].currentlyFocusedInput();
      if (_this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {
        _TextInputState["default"].blurTextInput(currentlyFocusedTextInput);
      }
    };
    _this._handleResponderTerminationRequest = function () {
      return !_this._observedScrollSinceBecomingResponder;
    };
    _this._handleScrollShouldSetResponder = function () {
      if (_this.props.disableScrollViewPanResponder === true) {
        return false;
      }
      return _this._isTouching;
    };
    _this._handleStartShouldSetResponder = function (e) {
      if (_this.props.disableScrollViewPanResponder === true) {
        return false;
      }
      var currentlyFocusedInput = _TextInputState["default"].currentlyFocusedInput();
      if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {
        return true;
      }
      return false;
    };
    _this._handleStartShouldSetResponderCapture = function (e) {
      if (_this._isAnimating()) {
        return true;
      }
      if (_this.props.disableScrollViewPanResponder === true) {
        return false;
      }
      var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
      if (typeof e.target === 'number') {
        if (__DEV__) {
          console.error('Did not expect event target to be a number. Should have been a native component');
        }
        return false;
      }
      if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null && !_TextInputState["default"].isTextInput(e.target)) {
        return true;
      }
      return false;
    };
    _this._keyboardIsDismissible = function () {
      var currentlyFocusedInput = _TextInputState["default"].currentlyFocusedInput();
      var hasFocusedTextInput = currentlyFocusedInput != null && _TextInputState["default"].isTextInput(currentlyFocusedInput);
      var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _Platform["default"].OS === 'android';
      return hasFocusedTextInput && softKeyboardMayBeOpen;
    };
    _this._handleTouchEnd = function (e) {
      var nativeEvent = e.nativeEvent;
      _this._isTouching = nativeEvent.touches.length !== 0;
      _this.props.onTouchEnd && _this.props.onTouchEnd(e);
    };
    _this._handleTouchCancel = function (e) {
      _this._isTouching = false;
      _this.props.onTouchCancel && _this.props.onTouchCancel(e);
    };
    _this._handleTouchStart = function (e) {
      _this._isTouching = true;
      _this.props.onTouchStart && _this.props.onTouchStart(e);
    };
    _this._handleTouchMove = function (e) {
      _this.props.onTouchMove && _this.props.onTouchMove(e);
    };
    _this._scrollAnimatedValue = new _AnimatedImplementation["default"].Value((_this$props$contentOf = (_this$props$contentOf2 = _this.props.contentOffset) === null || _this$props$contentOf2 === void 0 ? void 0 : _this$props$contentOf2.y) !== null && _this$props$contentOf !== void 0 ? _this$props$contentOf : 0);
    _this._scrollAnimatedValue.setOffset((_this$props$contentIn = (_this$props$contentIn2 = _this.props.contentInset) === null || _this$props$contentIn2 === void 0 ? void 0 : _this$props$contentIn2.top) !== null && _this$props$contentIn !== void 0 ? _this$props$contentIn : 0);
    return _this;
  }
  (0, _createClass2["default"])(ScrollView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
        console.warn("'keyboardShouldPersistTaps={".concat(this.props.keyboardShouldPersistTaps === true ? 'true' : 'false', "}' is deprecated. ") + "Use 'keyboardShouldPersistTaps=\"".concat(this.props.keyboardShouldPersistTaps ? 'always' : 'never', "\"' instead"));
      }
      this._keyboardMetrics = _Keyboard["default"].metrics();
      this._additionalScrollOffset = 0;
      this._subscriptionKeyboardWillShow = _Keyboard["default"].addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this._subscriptionKeyboardWillHide = _Keyboard["default"].addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this._subscriptionKeyboardDidShow = _Keyboard["default"].addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this._subscriptionKeyboardDidHide = _Keyboard["default"].addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
      this._updateAnimatedNodeAttachment();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;
      var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
      if (prevContentInsetTop !== newContentInsetTop) {
        this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
      }
      this._updateAnimatedNodeAttachment();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._subscriptionKeyboardWillShow != null) {
        this._subscriptionKeyboardWillShow.remove();
      }
      if (this._subscriptionKeyboardWillHide != null) {
        this._subscriptionKeyboardWillHide.remove();
      }
      if (this._subscriptionKeyboardDidShow != null) {
        this._subscriptionKeyboardDidShow.remove();
      }
      if (this._subscriptionKeyboardDidHide != null) {
        this._subscriptionKeyboardDidHide.remove();
      }
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    }
  }, {
    key: "_textInputFocusError",
    value: function _textInputFocusError() {
      console.warn('Error measuring text field.');
    }
  }, {
    key: "_getKeyForIndex",
    value: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    }
  }, {
    key: "_updateAnimatedNodeAttachment",
    value: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = _AnimatedImplementation["default"].attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    }
  }, {
    key: "_setStickyHeaderRef",
    value: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs["delete"](key);
      }
    }
  }, {
    key: "_onStickyHeaderLayout",
    value: function _onStickyHeaderLayout(index, event, key) {
      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      if (!stickyHeaderIndices) {
        return;
      }
      var childArray = React.Children.toArray(this.props.children);
      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }
      var layoutY = event.nativeEvent.layout.y;
      this._headerLayoutYs.set(key, layoutY);
      var indexOfIndex = stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];
      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
        previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _ref2 = this.props.horizontal === true ? NativeHorizontalScrollViewTuple : NativeVerticalScrollViewTuple,
        _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
        NativeDirectionalScrollView = _ref3[0],
        NativeDirectionalScrollContentView = _ref3[1];
      var contentContainerStyle = [this.props.horizontal === true && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      if (__DEV__ && this.props.style !== undefined) {
        var style = (0, _flattenStyle["default"])(this.props.style);
        var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        (0, _invariant["default"])(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }
      var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {
        onLayout: this._handleContentOnLayout
      };
      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var children = this.props.children;
      if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
        var childArray = React.Children.toArray(this.props.children);
        children = childArray.map(function (child, index) {
          var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
          if (indexOfIndex > -1) {
            var key = child.key;
            var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
            var StickyHeaderComponent = _this2.props.StickyHeaderComponent || _ScrollViewStickyHeader["default"];
            return (0, _jsxRuntime.jsx)(StickyHeaderComponent, {
              nativeID: 'StickyHeader-' + key,
              ref: function ref(_ref4) {
                return _this2._setStickyHeaderRef(key, _ref4);
              },
              nextHeaderLayoutY: _this2._headerLayoutYs.get(_this2._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this2._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this2._scrollAnimatedValue,
              inverted: _this2.props.invertStickyHeaders,
              hiddenOnScroll: _this2.props.stickyHeaderHiddenOnScroll,
              scrollViewHeight: _this2.state.layoutHeight,
              children: child
            }, key);
          } else {
            return child;
          }
        });
      }
      children = (0, _jsxRuntime.jsx)(_ScrollViewContext["default"].Provider, {
        value: this.props.horizontal === true ? _ScrollViewContext.HORIZONTAL : _ScrollViewContext.VERTICAL,
        children: children
      });
      var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
      var contentContainer = (0, _jsxRuntime.jsx)(NativeDirectionalScrollContentView, _objectSpread(_objectSpread({}, contentSizeChangeProps), {}, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: _Platform["default"].OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
        collapsable: false,
        children: children
      }));
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var baseStyle = this.props.horizontal === true ? styles.baseHorizontal : styles.baseVertical;
      var props = _objectSpread(_objectSpread({}, this.props), {}, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: _StyleSheet["default"].compose(baseStyle, this.props.style),
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this._handleMomentumScrollBegin,
        onMomentumScrollEnd: this._handleMomentumScrollEnd,
        onResponderGrant: this._handleResponderGrant,
        onResponderReject: this._handleResponderReject,
        onResponderRelease: this._handleResponderRelease,
        onResponderTerminationRequest: this._handleResponderTerminationRequest,
        onScrollBeginDrag: this._handleScrollBeginDrag,
        onScrollEndDrag: this._handleScrollEndDrag,
        onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
        onStartShouldSetResponder: this._handleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,
        onTouchEnd: this._handleTouchEnd,
        onTouchMove: this._handleTouchMove,
        onTouchStart: this._handleTouchStart,
        onTouchCancel: this._handleTouchCancel,
        onScroll: this._handleScroll,
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        snapToStart: this.props.snapToStart !== false,
        snapToEnd: this.props.snapToEnd !== false,
        pagingEnabled: _Platform["default"].select({
          ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,
          android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
        })
      });
      var decelerationRate = this.props.decelerationRate;
      if (decelerationRate != null) {
        props.decelerationRate = (0, _processDecelerationRate["default"])(decelerationRate);
      }
      var refreshControl = this.props.refreshControl;
      if (refreshControl) {
        if (_Platform["default"].OS === 'ios') {
          return (0, _jsxRuntime.jsxs)(NativeDirectionalScrollView, _objectSpread(_objectSpread({}, props), {}, {
            ref: this._setNativeRef,
            children: [refreshControl, contentContainer]
          }));
        } else if (_Platform["default"].OS === 'android') {
          var _splitLayoutProps = (0, _splitLayoutProps2["default"])((0, _flattenStyle["default"])(props.style)),
            outer = _splitLayoutProps.outer,
            inner = _splitLayoutProps.inner;
          return React.cloneElement(refreshControl, {
            style: _StyleSheet["default"].compose(baseStyle, outer)
          }, (0, _jsxRuntime.jsx)(NativeDirectionalScrollView, _objectSpread(_objectSpread({}, props), {}, {
            style: _StyleSheet["default"].compose(baseStyle, inner),
            ref: this._setNativeRef,
            children: contentContainer
          })));
        }
      }
      return (0, _jsxRuntime.jsx)(NativeDirectionalScrollView, _objectSpread(_objectSpread({}, props), {}, {
        ref: this._setNativeRef,
        children: contentContainer
      }));
    }
  }]);
  return ScrollView;
}(React.Component);
ScrollView.Context = _ScrollViewContext["default"];
var styles = _StyleSheet["default"].create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll'
  },
  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll'
  },
  contentContainerHorizontal: {
    flexDirection: 'row'
  }
});
function Wrapper(props, ref) {
  return (0, _jsxRuntime.jsx)(ScrollView, _objectSpread(_objectSpread({}, props), {}, {
    scrollViewRef: ref
  }));
}
Wrapper.displayName = 'ScrollView';
var ForwardedScrollView = React.forwardRef(Wrapper);
ForwardedScrollView.Context = _ScrollViewContext["default"];
ForwardedScrollView.displayName = 'ScrollView';
module.exports = ForwardedScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiUGxhdGZvcm0iLCJPUyIsIk5hdGl2ZUhvcml6b250YWxTY3JvbGxWaWV3VHVwbGUiLCJBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnQiLCJBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50IiwiTmF0aXZlVmVydGljYWxTY3JvbGxWaWV3VHVwbGUiLCJTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IiwiVmlldyIsIlNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50IiwiSVNfQU5JTUFUSU5HX1RPVUNIX1NUQVJUX1RIUkVTSE9MRF9NUyIsIlNjcm9sbFZpZXciLCJwcm9wcyIsIl9zY3JvbGxBbmltYXRlZFZhbHVlIiwiX3Njcm9sbEFuaW1hdGVkVmFsdWVBdHRhY2htZW50IiwiX3N0aWNreUhlYWRlclJlZnMiLCJNYXAiLCJfaGVhZGVyTGF5b3V0WXMiLCJfa2V5Ym9hcmRNZXRyaWNzIiwiX2FkZGl0aW9uYWxTY3JvbGxPZmZzZXQiLCJfaXNUb3VjaGluZyIsIl9sYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWUiLCJfbGFzdE1vbWVudHVtU2Nyb2xsRW5kVGltZSIsIl9vYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXIiLCJfYmVjYW1lUmVzcG9uZGVyV2hpbGVBbmltYXRpbmciLCJfcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0IiwiX2FuaW1hdGVkIiwiX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbFNob3ciLCJfc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsSGlkZSIsIl9zdWJzY3JpcHRpb25LZXlib2FyZERpZFNob3ciLCJfc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRIaWRlIiwic3RhdGUiLCJsYXlvdXRIZWlnaHQiLCJfc2V0TmF0aXZlUmVmIiwic2V0QW5kRm9yd2FyZFJlZiIsImdldEZvcndhcmRlZFJlZiIsInNjcm9sbFZpZXdSZWYiLCJzZXRMb2NhbFJlZiIsInJlZiIsIl9zY3JvbGxWaWV3UmVmIiwiZ2V0U2Nyb2xsUmVzcG9uZGVyIiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJnZXRJbm5lclZpZXdOb2RlIiwiZ2V0SW5uZXJWaWV3UmVmIiwiZ2V0TmF0aXZlU2Nyb2xsUmVmIiwic2Nyb2xsVG8iLCJzY3JvbGxUb0VuZCIsImZsYXNoU2Nyb2xsSW5kaWNhdG9ycyIsInNjcm9sbFJlc3BvbmRlclpvb21UbyIsInNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQiLCJSZWFjdE5hdGl2ZSIsImZpbmROb2RlSGFuZGxlIiwiX2lubmVyVmlld1JlZiIsIm9wdGlvbnMiLCJkZXByZWNhdGVkWCIsImRlcHJlY2F0ZWRBbmltYXRlZCIsIngiLCJ5IiwiYW5pbWF0ZWQiLCJjb25zb2xlIiwid2FybiIsIkNvbW1hbmRzIiwibm9kZUhhbmRsZSIsImFkZGl0aW9uYWxPZmZzZXQiLCJwcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQiLCJVSU1hbmFnZXIiLCJtZWFzdXJlTGF5b3V0IiwiX3RleHRJbnB1dEZvY3VzRXJyb3IiLCJfaW5wdXRNZWFzdXJlQW5kU2Nyb2xsVG9LZXlib2FyZCIsInJlY3QiLCJpbnZhcmlhbnQiLCJ6b29tVG9SZWN0IiwibGVmdCIsInRvcCIsIndpZHRoIiwiaGVpZ2h0Iiwia2V5Ym9hcmRTY3JlZW5ZIiwiRGltZW5zaW9ucyIsImdldCIsInNjcm9sbFRleHRJbnB1dEludG9WaXNpYmxlUmVjdCIsInNjcmVlblkiLCJzY3JvbGxPZmZzZXRZIiwiTWF0aCIsIm1heCIsInNldFRpbWVvdXQiLCJfaGFuZGxlU2Nyb2xsIiwiZSIsIl9fREVWX18iLCJvblNjcm9sbCIsInNjcm9sbEV2ZW50VGhyb3R0bGUiLCJsb2ciLCJfaGFuZGxlTGF5b3V0IiwiaW52ZXJ0U3RpY2t5SGVhZGVycyIsInNldFN0YXRlIiwibmF0aXZlRXZlbnQiLCJsYXlvdXQiLCJvbkxheW91dCIsIl9oYW5kbGVDb250ZW50T25MYXlvdXQiLCJvbkNvbnRlbnRTaXplQ2hhbmdlIiwiX3NldElubmVyVmlld1JlZiIsImlubmVyVmlld1JlZiIsInNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbFNob3ciLCJlbmRDb29yZGluYXRlcyIsIm9uS2V5Ym9hcmRXaWxsU2hvdyIsInNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbEhpZGUiLCJvbktleWJvYXJkV2lsbEhpZGUiLCJzY3JvbGxSZXNwb25kZXJLZXlib2FyZERpZFNob3ciLCJvbktleWJvYXJkRGlkU2hvdyIsInNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkSGlkZSIsIm9uS2V5Ym9hcmREaWRIaWRlIiwiX2hhbmRsZU1vbWVudHVtU2Nyb2xsQmVnaW4iLCJnbG9iYWwiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIm9uTW9tZW50dW1TY3JvbGxCZWdpbiIsIl9oYW5kbGVNb21lbnR1bVNjcm9sbEVuZCIsIkZyYW1lUmF0ZUxvZ2dlciIsImVuZFNjcm9sbCIsIm9uTW9tZW50dW1TY3JvbGxFbmQiLCJfaGFuZGxlU2Nyb2xsQmVnaW5EcmFnIiwiYmVnaW5TY3JvbGwiLCJrZXlib2FyZERpc21pc3NNb2RlIiwiZGlzbWlzc0tleWJvYXJkIiwib25TY3JvbGxCZWdpbkRyYWciLCJfaGFuZGxlU2Nyb2xsRW5kRHJhZyIsInZlbG9jaXR5IiwiX2lzQW5pbWF0aW5nIiwib25TY3JvbGxFbmREcmFnIiwidGltZVNpbmNlTGFzdE1vbWVudHVtU2Nyb2xsRW5kIiwiaXNBbmltYXRpbmciLCJfaGFuZGxlUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlckdyYW50IiwiX2hhbmRsZVJlc3BvbmRlclJlamVjdCIsIl9oYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwidG91Y2hlcyIsImxlbmd0aCIsIm9uUmVzcG9uZGVyUmVsZWFzZSIsInRhcmdldCIsImVycm9yIiwiY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCIsIlRleHRJbnB1dFN0YXRlIiwiY3VycmVudGx5Rm9jdXNlZElucHV0Iiwia2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyIsIl9rZXlib2FyZElzRGlzbWlzc2libGUiLCJibHVyVGV4dElucHV0IiwiX2hhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCIsIl9oYW5kbGVTY3JvbGxTaG91bGRTZXRSZXNwb25kZXIiLCJkaXNhYmxlU2Nyb2xsVmlld1BhblJlc3BvbmRlciIsIl9oYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlciIsIl9oYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJrZXlib2FyZE5ldmVyUGVyc2lzdFRhcHMiLCJpc1RleHRJbnB1dCIsImhhc0ZvY3VzZWRUZXh0SW5wdXQiLCJzb2Z0S2V5Ym9hcmRNYXlCZU9wZW4iLCJfaGFuZGxlVG91Y2hFbmQiLCJvblRvdWNoRW5kIiwiX2hhbmRsZVRvdWNoQ2FuY2VsIiwib25Ub3VjaENhbmNlbCIsIl9oYW5kbGVUb3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0IiwiX2hhbmRsZVRvdWNoTW92ZSIsIm9uVG91Y2hNb3ZlIiwiQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiIsIlZhbHVlIiwiY29udGVudE9mZnNldCIsInNldE9mZnNldCIsImNvbnRlbnRJbnNldCIsIktleWJvYXJkIiwibWV0cmljcyIsImFkZExpc3RlbmVyIiwiX3VwZGF0ZUFuaW1hdGVkTm9kZUF0dGFjaG1lbnQiLCJwcmV2UHJvcHMiLCJwcmV2Q29udGVudEluc2V0VG9wIiwibmV3Q29udGVudEluc2V0VG9wIiwicmVtb3ZlIiwiZGV0YWNoIiwiaW5kZXgiLCJjaGlsZEFycmF5IiwiY2hpbGQiLCJrZXkiLCJzdGlja3lIZWFkZXJJbmRpY2VzIiwiYXR0YWNoTmF0aXZlRXZlbnQiLCJzZXQiLCJldmVudCIsIlJlYWN0IiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiY2hpbGRyZW4iLCJfZ2V0S2V5Rm9ySW5kZXgiLCJsYXlvdXRZIiwiaW5kZXhPZkluZGV4IiwiaW5kZXhPZiIsInByZXZpb3VzSGVhZGVySW5kZXgiLCJwcmV2aW91c0hlYWRlciIsInNldE5leHRIZWFkZXJZIiwiaG9yaXpvbnRhbCIsIk5hdGl2ZURpcmVjdGlvbmFsU2Nyb2xsVmlldyIsIk5hdGl2ZURpcmVjdGlvbmFsU2Nyb2xsQ29udGVudFZpZXciLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJzdHlsZXMiLCJjb250ZW50Q29udGFpbmVySG9yaXpvbnRhbCIsInN0eWxlIiwidW5kZWZpbmVkIiwiZmxhdHRlblN0eWxlIiwiY2hpbGRMYXlvdXRQcm9wcyIsImZpbHRlciIsInByb3AiLCJKU09OIiwic3RyaW5naWZ5IiwiY29udGVudFNpemVDaGFuZ2VQcm9wcyIsIm1hcCIsIm5leHRJbmRleCIsIlN0aWNreUhlYWRlckNvbXBvbmVudCIsIlNjcm9sbFZpZXdTdGlja3lIZWFkZXIiLCJfc2V0U3RpY2t5SGVhZGVyUmVmIiwiX29uU3RpY2t5SGVhZGVyTGF5b3V0Iiwic3RpY2t5SGVhZGVySGlkZGVuT25TY3JvbGwiLCJIT1JJWk9OVEFMIiwiVkVSVElDQUwiLCJoYXNTdGlja3lIZWFkZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwiY29udGVudENvbnRhaW5lciIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsImFsd2F5c0JvdW5jZUhvcml6b250YWwiLCJhbHdheXNCb3VuY2VWZXJ0aWNhbCIsImJhc2VTdHlsZSIsImJhc2VIb3Jpem9udGFsIiwiYmFzZVZlcnRpY2FsIiwiU3R5bGVTaGVldCIsImNvbXBvc2UiLCJvblJlc3BvbmRlclJlamVjdCIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TY3JvbGxTaG91bGRTZXRSZXNwb25kZXIiLCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJzZW5kTW9tZW50dW1FdmVudHMiLCJzbmFwVG9TdGFydCIsInNuYXBUb0VuZCIsInBhZ2luZ0VuYWJsZWQiLCJzZWxlY3QiLCJpb3MiLCJzbmFwVG9JbnRlcnZhbCIsInNuYXBUb09mZnNldHMiLCJhbmRyb2lkIiwiZGVjZWxlcmF0aW9uUmF0ZSIsInByb2Nlc3NEZWNlbGVyYXRpb25SYXRlIiwicmVmcmVzaENvbnRyb2wiLCJzcGxpdExheW91dFByb3BzIiwib3V0ZXIiLCJpbm5lciIsImNsb25lRWxlbWVudCIsIkNvbXBvbmVudCIsIkNvbnRleHQiLCJTY3JvbGxWaWV3Q29udGV4dCIsImNyZWF0ZSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImZsZXhEaXJlY3Rpb24iLCJvdmVyZmxvdyIsIldyYXBwZXIiLCJkaXNwbGF5TmFtZSIsIkZvcndhcmRlZFNjcm9sbFZpZXciLCJmb3J3YXJkUmVmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbmltcG9ydCBBbmltYXRlZEltcGxlbWVudGF0aW9uIGZyb20gJy4uLy4uL0FuaW1hdGVkL0FuaW1hdGVkSW1wbGVtZW50YXRpb24nO1xuaW1wb3J0IERpbWVuc2lvbnMgZnJvbSAnLi4vLi4vVXRpbGl0aWVzL0RpbWVuc2lvbnMnO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3ROYXRpdmUgZnJvbSAnLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnO1xucmVxdWlyZSgnLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKTsgLy8gRm9yY2Ugc2lkZSBlZmZlY3RzIHRvIHByZXZlbnQgVDU1NzQ0MzExXG5pbXBvcnQgU2Nyb2xsVmlld1N0aWNreUhlYWRlciBmcm9tICcuL1Njcm9sbFZpZXdTdGlja3lIZWFkZXInO1xuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCBWaWV3IGZyb20gJy4uL1ZpZXcvVmlldyc7XG5pbXBvcnQgVUlNYW5hZ2VyIGZyb20gJy4uLy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5pbXBvcnQgS2V5Ym9hcmQgZnJvbSAnLi4vS2V5Ym9hcmQvS2V5Ym9hcmQnO1xuaW1wb3J0IEZyYW1lUmF0ZUxvZ2dlciBmcm9tICcuLi8uLi9JbnRlcmFjdGlvbi9GcmFtZVJhdGVMb2dnZXInO1xuaW1wb3J0IFRleHRJbnB1dFN0YXRlIGZyb20gJy4uL1RleHRJbnB1dC9UZXh0SW5wdXRTdGF0ZSc7XG5cbmltcG9ydCBkaXNtaXNzS2V5Ym9hcmQgZnJvbSAnLi4vLi4vVXRpbGl0aWVzL2Rpc21pc3NLZXlib2FyZCc7XG5pbXBvcnQgZmxhdHRlblN0eWxlIGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBwcm9jZXNzRGVjZWxlcmF0aW9uUmF0ZSBmcm9tICcuL3Byb2Nlc3NEZWNlbGVyYXRpb25SYXRlJztcbmltcG9ydCBzcGxpdExheW91dFByb3BzIGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvc3BsaXRMYXlvdXRQcm9wcyc7XG5pbXBvcnQgc2V0QW5kRm9yd2FyZFJlZiBmcm9tICcuLi8uLi9VdGlsaXRpZXMvc2V0QW5kRm9yd2FyZFJlZic7XG5cbmltcG9ydCB0eXBlIHtFZGdlSW5zZXRzUHJvcH0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9FZGdlSW5zZXRzUHJvcFR5cGUnO1xuaW1wb3J0IHR5cGUge1BvaW50UHJvcH0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9Qb2ludFByb3BUeXBlJztcbmltcG9ydCB0eXBlIHtWaWV3U3R5bGVQcm9wfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge0NvbG9yVmFsdWV9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7XG4gIFByZXNzRXZlbnQsXG4gIFNjcm9sbEV2ZW50LFxuICBMYXlvdXRFdmVudCxcbn0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCBTY3JvbGxWaWV3Q29udGV4dCwge0hPUklaT05UQUwsIFZFUlRJQ0FMfSBmcm9tICcuL1Njcm9sbFZpZXdDb250ZXh0JztcbmltcG9ydCB0eXBlIHtQcm9wcyBhcyBTY3JvbGxWaWV3U3RpY2t5SGVhZGVyUHJvcHN9IGZyb20gJy4vU2Nyb2xsVmlld1N0aWNreUhlYWRlcic7XG5pbXBvcnQgdHlwZSB7S2V5Ym9hcmRFdmVudCwgS2V5Ym9hcmRNZXRyaWNzfSBmcm9tICcuLi9LZXlib2FyZC9LZXlib2FyZCc7XG5pbXBvcnQgdHlwZSB7RXZlbnRTdWJzY3JpcHRpb259IGZyb20gJy4uLy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5cbmltcG9ydCBDb21tYW5kcyBmcm9tICcuL1Njcm9sbFZpZXdDb21tYW5kcyc7XG5pbXBvcnQgQW5kcm9pZEhvcml6b250YWxTY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCBmcm9tICcuL0FuZHJvaWRIb3Jpem9udGFsU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCBmcm9tICcuL0FuZHJvaWRIb3Jpem9udGFsU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi9TY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCBmcm9tICcuL1Njcm9sbFZpZXdOYXRpdmVDb21wb25lbnQnO1xuXG5jb25zdCB7TmF0aXZlSG9yaXpvbnRhbFNjcm9sbFZpZXdUdXBsZSwgTmF0aXZlVmVydGljYWxTY3JvbGxWaWV3VHVwbGV9ID1cbiAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJ1xuICAgID8ge1xuICAgICAgICBOYXRpdmVIb3Jpem9udGFsU2Nyb2xsVmlld1R1cGxlOiBbXG4gICAgICAgICAgQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50LFxuICAgICAgICAgIEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQsXG4gICAgICAgIF0sXG4gICAgICAgIE5hdGl2ZVZlcnRpY2FsU2Nyb2xsVmlld1R1cGxlOiBbU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCwgVmlld10sXG4gICAgICB9XG4gICAgOiB7XG4gICAgICAgIE5hdGl2ZUhvcml6b250YWxTY3JvbGxWaWV3VHVwbGU6IFtcbiAgICAgICAgICBTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50LFxuICAgICAgICAgIFNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50LFxuICAgICAgICBdLFxuICAgICAgICBOYXRpdmVWZXJ0aWNhbFNjcm9sbFZpZXdUdXBsZTogW1xuICAgICAgICAgIFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnQsXG4gICAgICAgICAgU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQsXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4vKlxuICogaU9TIHNjcm9sbCBldmVudCB0aW1pbmcgbnVhbmNlczpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKlxuICogU2Nyb2xsaW5nIHdpdGhvdXQgYm91bmNpbmcsIGlmIHlvdSB0b3VjaCBkb3duOlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIDEuIGBvbk1vbWVudHVtU2Nyb2xsQmVnaW5gICh3aGVuIGFuaW1hdGlvbiBiZWdpbnMgYWZ0ZXIgbGV0dGluZyB1cClcbiAqICAgIC4uLiBwaHlzaWNhbCB0b3VjaCBzdGFydHMgLi4uXG4gKiAyLiBgb25Ub3VjaFN0YXJ0Q2FwdHVyZWAgICAod2hlbiB5b3UgcHJlc3MgZG93biB0byBzdG9wIHRoZSBzY3JvbGwpXG4gKiAzLiBgb25Ub3VjaFN0YXJ0YCAgICAgICAgICAoc2FtZSwgYnV0IGJ1YmJsZSBwaGFzZSlcbiAqIDQuIGBvblJlc3BvbmRlclJlbGVhc2VgICAgICh3aGVuIGxpZnRpbmcgdXAgLSB5b3UgY291bGQgcGF1c2UgZm9yZXZlciBiZWZvcmUgKiBsaWZ0aW5nKVxuICogNS4gYG9uTW9tZW50dW1TY3JvbGxFbmRgXG4gKlxuICpcbiAqIFNjcm9sbGluZyB3aXRoIGJvdW5jaW5nLCBpZiB5b3UgdG91Y2ggZG93bjpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAxLiBgb25Nb21lbnR1bVNjcm9sbEJlZ2luYCAod2hlbiBhbmltYXRpb24gYmVnaW5zIGFmdGVyIGxldHRpbmcgdXApXG4gKiAgICAuLi4gYm91bmNlIGJlZ2lucyAuLi5cbiAqICAgIC4uLiBzb21lIHRpbWUgZWxhcHNlcyAuLi5cbiAqICAgIC4uLiBwaHlzaWNhbCB0b3VjaCBkdXJpbmcgYm91bmNlIC4uLlxuICogMi4gYG9uTW9tZW50dW1TY3JvbGxFbmRgICAgKE1ha2VzIG5vIHNlbnNlIHdoeSB0aGlzIG9jY3VycyBmaXJzdCBkdXJpbmcgYm91bmNlKVxuICogMy4gYG9uVG91Y2hTdGFydENhcHR1cmVgICAgKGltbWVkaWF0ZWx5IGFmdGVyIGBvbk1vbWVudHVtU2Nyb2xsRW5kYClcbiAqIDQuIGBvblRvdWNoU3RhcnRgICAgICAgICAgIChzYW1lLCBidXQgYnViYmxlIHBoYXNlKVxuICogNS4gYG9uVG91Y2hFbmRgICAgICAgICAgICAgKFlvdSBjb3VsZCBob2xkIHRoZSB0b3VjaCBzdGFydCBmb3IgYSBsb25nIHRpbWUpXG4gKiA2LiBgb25Nb21lbnR1bVNjcm9sbEJlZ2luYCAoV2hlbiByZWxlYXNpbmcgdGhlIHZpZXcgc3RhcnRzIGJvdW5jaW5nIGJhY2spXG4gKlxuICogU28gd2hlbiB3ZSByZWNlaXZlIGFuIGBvblRvdWNoU3RhcnRgLCBob3cgY2FuIHdlIHRlbGwgaWYgd2UgYXJlIHRvdWNoaW5nXG4gKiAqZHVyaW5nKiBhbiBhbmltYXRpb24gKHdoaWNoIHRoZW4gY2F1c2VzIHRoZSBhbmltYXRpb24gdG8gc3RvcCk/IFRoZSBvbmx5IHdheVxuICogdG8gdGVsbCBpcyBpZiB0aGUgYHRvdWNoU3RhcnRgIG9jY3VycmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICogYG9uTW9tZW50dW1TY3JvbGxFbmRgLlxuICpcbiAqIFRoaXMgaXMgYWJzdHJhY3RlZCBvdXQgZm9yIHlvdSwgc28geW91IGNhbiBqdXN0IGNhbGwgdGhpcy5zY3JvbGxSZXNwb25kZXJJc0FuaW1hdGluZygpIGlmXG4gKiBuZWNlc3NhcnlcbiAqXG4gKiBgU2Nyb2xsVmlld2AgYWxzbyBpbmNsdWRlcyBsb2dpYyBmb3IgYmx1cnJpbmcgYSBjdXJyZW50bHkgZm9jdXNlZCBpbnB1dFxuICogaWYgb25lIGlzIGZvY3VzZWQgd2hpbGUgc2Nyb2xsaW5nLiBUaGlzIGlzIGEgbmF0dXJhbCBwbGFjZVxuICogdG8gcHV0IHRoaXMgbG9naWMgc2luY2UgaXQgY2FuIHN1cHBvcnQgbm90IGRpc21pc3NpbmcgdGhlIGtleWJvYXJkIHdoaWxlXG4gKiBzY3JvbGxpbmcsIHVubGVzcyBhIHJlY29nbml6ZWQgXCJ0YXBcIi1saWtlIGdlc3R1cmUgaGFzIG9jY3VycmVkLlxuICpcbiAqIFRoZSBwdWJsaWMgbGlmZWN5Y2xlIEFQSSBpbmNsdWRlcyBldmVudHMgZm9yIGtleWJvYXJkIGludGVyYWN0aW9uLCByZXNwb25kZXJcbiAqIGludGVyYWN0aW9uLCBhbmQgc2Nyb2xsaW5nIChhbW9uZyBvdGhlcnMpLiBUaGUga2V5Ym9hcmQgY2FsbGJhY2tzXG4gKiBgb25LZXlib2FyZFdpbGwvRGlkLypgIGFyZSAqZ2xvYmFsKiBldmVudHMsIGJ1dCBhcmUgaW52b2tlZCBvbiBzY3JvbGxcbiAqIHJlc3BvbmRlcidzIHByb3BzIHNvIHRoYXQgeW91IGNhbiBndWFyYW50ZWUgdGhhdCB0aGUgc2Nyb2xsIHJlc3BvbmRlcidzXG4gKiBpbnRlcm5hbCBzdGF0ZSBoYXMgYmVlbiB1cGRhdGVkIGFjY29yZGluZ2x5IChhbmQgZGV0ZXJtaW5pc3RpY2FsbHkpIGJ5XG4gKiB0aGUgdGltZSB0aGUgcHJvcHMgY2FsbGJhY2tzIGFyZSBpbnZva2UuIE90aGVyd2lzZSwgeW91IHdvdWxkIGFsd2F5cyB3b25kZXJcbiAqIGlmIHRoZSBzY3JvbGwgcmVzcG9uZGVyIGlzIGN1cnJlbnRseSBpbiBhIHN0YXRlIHdoZXJlIGl0IHJlY29nbml6ZXMgbmV3XG4gKiBrZXlib2FyZCBwb3NpdGlvbnMgZXRjLiBJZiBjb29yZGluYXRpbmcgc2Nyb2xsaW5nIHdpdGgga2V5Ym9hcmQgbW92ZW1lbnQsXG4gKiAqYWx3YXlzKiB1c2UgdGhlc2UgaG9va3MgaW5zdGVhZCBvZiBsaXN0ZW5pbmcgdG8geW91ciBvd24gZ2xvYmFsIGtleWJvYXJkXG4gKiBldmVudHMuXG4gKlxuICogUHVibGljIGtleWJvYXJkIGxpZmVjeWNsZSBBUEk6IChwcm9wcyBjYWxsYmFja3MpXG4gKlxuICogU3RhbmRhcmQgS2V5Ym9hcmQgQXBwZWFyYW5jZSBTZXF1ZW5jZTpcbiAqXG4gKiAgIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxTaG93XG4gKiAgIHRoaXMucHJvcHMub25LZXlib2FyZERpZFNob3dcbiAqXG4gKiBgb25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZGAgd2lsbCBiZSBpbnZva2VkIGlmIGFuIGFwcHJvcHJpYXRlXG4gKiB0YXAgaW5zaWRlIHRoZSBzY3JvbGwgcmVzcG9uZGVyJ3Mgc2Nyb2xsYWJsZSByZWdpb24gd2FzIHJlc3BvbnNpYmxlXG4gKiBmb3IgdGhlIGRpc21pc3NhbCBvZiB0aGUga2V5Ym9hcmQuIFRoZXJlIGFyZSBvdGhlciByZWFzb25zIHdoeSB0aGVcbiAqIGtleWJvYXJkIGNvdWxkIGJlIGRpc21pc3NlZC5cbiAqXG4gKiAgIHRoaXMucHJvcHMub25TY3JvbGxSZXNwb25kZXJLZXlib2FyZERpc21pc3NlZFxuICpcbiAqIFN0YW5kYXJkIEtleWJvYXJkIEhpZGUgU2VxdWVuY2U6XG4gKlxuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsSGlkZVxuICogICB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRIaWRlXG4gKi9cblxuLy8gUHVibGljIG1ldGhvZHMgZm9yIFNjcm9sbFZpZXdcbmV4cG9ydCB0eXBlIFNjcm9sbFZpZXdJbXBlcmF0aXZlTWV0aG9kcyA9ICRSZWFkT25seTx7fFxuICBnZXRTY3JvbGxSZXNwb25kZXI6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ2dldFNjcm9sbFJlc3BvbmRlcic+LFxuICBnZXRTY3JvbGxhYmxlTm9kZTogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnZ2V0U2Nyb2xsYWJsZU5vZGUnPixcbiAgZ2V0SW5uZXJWaWV3Tm9kZTogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnZ2V0SW5uZXJWaWV3Tm9kZSc+LFxuICBnZXRJbm5lclZpZXdSZWY6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ2dldElubmVyVmlld1JlZic+LFxuICBnZXROYXRpdmVTY3JvbGxSZWY6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ2dldE5hdGl2ZVNjcm9sbFJlZic+LFxuICBzY3JvbGxUbzogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnc2Nyb2xsVG8nPixcbiAgc2Nyb2xsVG9FbmQ6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ3Njcm9sbFRvRW5kJz4sXG4gIGZsYXNoU2Nyb2xsSW5kaWNhdG9yczogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnZmxhc2hTY3JvbGxJbmRpY2F0b3JzJz4sXG4gIHNjcm9sbFJlc3BvbmRlclpvb21UbzogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnc2Nyb2xsUmVzcG9uZGVyWm9vbVRvJz4sXG4gIHNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQ6ICRQcm9wZXJ0eVR5cGU8XG4gICAgU2Nyb2xsVmlldyxcbiAgICAnc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsTmF0aXZlSGFuZGxlVG9LZXlib2FyZCcsXG4gID4sXG58fT47XG5cbmV4cG9ydCB0eXBlIERlY2VsZXJhdGlvblJhdGVUeXBlID0gJ2Zhc3QnIHwgJ25vcm1hbCcgfCBudW1iZXI7XG5leHBvcnQgdHlwZSBTY3JvbGxSZXNwb25kZXJUeXBlID0gU2Nyb2xsVmlld0ltcGVyYXRpdmVNZXRob2RzO1xuXG50eXBlIElPU1Byb3BzID0gJFJlYWRPbmx5PHt8XG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIGlPUyBzaG91bGQgYXV0b21hdGljYWxseSBhZGp1c3QgdGhlIGNvbnRlbnQgaW5zZXRcbiAgICogZm9yIHNjcm9sbCB2aWV3cyB0aGF0IGFyZSBwbGFjZWQgYmVoaW5kIGEgbmF2aWdhdGlvbiBiYXIgb3JcbiAgICogdGFiIGJhci8gdG9vbGJhci4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYXV0b21hdGljYWxseUFkanVzdENvbnRlbnRJbnNldHM/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIFNjcm9sbFZpZXcgc2hvdWxkIGF1dG9tYXRpY2FsbHkgYWRqdXN0IGl0cyBgY29udGVudEluc2V0YFxuICAgKiBhbmQgYHNjcm9sbFZpZXdJbnNldHNgIHdoZW4gdGhlIEtleWJvYXJkIGNoYW5nZXMgaXRzIHNpemUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhdXRvbWF0aWNhbGx5QWRqdXN0S2V5Ym9hcmRJbnNldHM/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgaU9TIHNob3VsZCBhdXRvbWF0aWNhbGx5IGFkanVzdCB0aGUgc2Nyb2xsIGluZGljYXRvclxuICAgKiBpbnNldHMuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuIEF2YWlsYWJsZSBvbiBpT1MgMTMgYW5kIGxhdGVyLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhdXRvbWF0aWNhbGx5QWRqdXN0c1Njcm9sbEluZGljYXRvckluc2V0cz86ID9ib29sZWFuLFxuICAvKipcbiAgICogVGhlIGFtb3VudCBieSB3aGljaCB0aGUgc2Nyb2xsIHZpZXcgY29udGVudCBpcyBpbnNldCBmcm9tIHRoZSBlZGdlc1xuICAgKiBvZiB0aGUgc2Nyb2xsIHZpZXcuIERlZmF1bHRzIHRvIGB7dG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwfWAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNvbnRlbnRJbnNldD86ID9FZGdlSW5zZXRzUHJvcCxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IGJvdW5jZXMgd2hlbiBpdCByZWFjaGVzIHRoZSBlbmQgb2YgdGhlXG4gICAqIGNvbnRlbnQgaWYgdGhlIGNvbnRlbnQgaXMgbGFyZ2VyIHRoZW4gdGhlIHNjcm9sbCB2aWV3IGFsb25nIHRoZSBheGlzIG9mXG4gICAqIHRoZSBzY3JvbGwgZGlyZWN0aW9uLiBXaGVuIGZhbHNlLCBpdCBkaXNhYmxlcyBhbGwgYm91bmNpbmcgZXZlbiBpZlxuICAgKiB0aGUgYGFsd2F5c0JvdW5jZSpgIHByb3BzIGFyZSB0cnVlLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBib3VuY2VzPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCBTY3JvbGxWaWV3IGhhcyBhbiBhY3RpdmUgcGFuIHJlc3BvbmRlciB0aGF0IGhpamFja3MgcGFucmVzcG9uZGVyc1xuICAgKiBkZWVwZXIgaW4gdGhlIHJlbmRlciB0cmVlIGluIG9yZGVyIHRvIHByZXZlbnQgYWNjaWRlbnRhbCB0b3VjaGVzIHdoaWxlIHNjcm9sbGluZy5cbiAgICogSG93ZXZlciwgaW4gY2VydGFpbiBvY2Nhc2lvbnMgKHN1Y2ggYXMgd2hlbiB1c2luZyBzbmFwVG9JbnRlcnZhbCkgaW4gYSB2ZXJ0aWNhbCBzY3JvbGx2aWV3XG4gICAqIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IgaW4gb3JkZXIgdG8gcHJldmVudCB0aGUgU2Nyb2xsVmlldyBmcm9tIGJsb2NraW5nIHRvdWNoZXNcbiAgICovXG4gIGRpc2FibGVTY3JvbGxWaWV3UGFuUmVzcG9uZGVyPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIGdlc3R1cmVzIGNhbiBkcml2ZSB6b29tIHBhc3QgbWluL21heCBhbmQgdGhlIHpvb20gd2lsbCBhbmltYXRlXG4gICAqIHRvIHRoZSBtaW4vbWF4IHZhbHVlIGF0IGdlc3R1cmUgZW5kLCBvdGhlcndpc2UgdGhlIHpvb20gd2lsbCBub3QgZXhjZWVkXG4gICAqIHRoZSBsaW1pdHMuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGJvdW5jZXNab29tPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBzY3JvbGwgdmlldyBib3VuY2VzIGhvcml6b250YWxseSB3aGVuIGl0IHJlYWNoZXMgdGhlIGVuZFxuICAgKiBldmVuIGlmIHRoZSBjb250ZW50IGlzIHNtYWxsZXIgdGhhbiB0aGUgc2Nyb2xsIHZpZXcgaXRzZWxmLiBUaGUgZGVmYXVsdFxuICAgKiB2YWx1ZSBpcyB0cnVlIHdoZW4gYGhvcml6b250YWw9e3RydWV9YCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhbHdheXNCb3VuY2VIb3Jpem9udGFsPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoZSBzY3JvbGwgdmlldyBib3VuY2VzIHZlcnRpY2FsbHkgd2hlbiBpdCByZWFjaGVzIHRoZSBlbmRcbiAgICogZXZlbiBpZiB0aGUgY29udGVudCBpcyBzbWFsbGVyIHRoYW4gdGhlIHNjcm9sbCB2aWV3IGl0c2VsZi4gVGhlIGRlZmF1bHRcbiAgICogdmFsdWUgaXMgZmFsc2Ugd2hlbiBgaG9yaXpvbnRhbD17dHJ1ZX1gIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYWx3YXlzQm91bmNlVmVydGljYWw/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IGF1dG9tYXRpY2FsbHkgY2VudGVycyB0aGUgY29udGVudCB3aGVuIHRoZVxuICAgKiBjb250ZW50IGlzIHNtYWxsZXIgdGhhbiB0aGUgc2Nyb2xsIHZpZXcgYm91bmRzOyB3aGVuIHRoZSBjb250ZW50IGlzXG4gICAqIGxhcmdlciB0aGFuIHRoZSBzY3JvbGwgdmlldywgdGhpcyBwcm9wZXJ0eSBoYXMgbm8gZWZmZWN0LiBUaGUgZGVmYXVsdFxuICAgKiB2YWx1ZSBpcyBmYWxzZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgY2VudGVyQ29udGVudD86ID9ib29sZWFuLFxuICAvKipcbiAgICogVGhlIHN0eWxlIG9mIHRoZSBzY3JvbGwgaW5kaWNhdG9ycy5cbiAgICpcbiAgICogICAtIGAnZGVmYXVsdCdgICh0aGUgZGVmYXVsdCksIHNhbWUgYXMgYGJsYWNrYC5cbiAgICogICAtIGAnYmxhY2snYCwgc2Nyb2xsIGluZGljYXRvciBpcyBibGFjay4gVGhpcyBzdHlsZSBpcyBnb29kIGFnYWluc3QgYSBsaWdodCBiYWNrZ3JvdW5kLlxuICAgKiAgIC0gYCd3aGl0ZSdgLCBzY3JvbGwgaW5kaWNhdG9yIGlzIHdoaXRlLiBUaGlzIHN0eWxlIGlzIGdvb2QgYWdhaW5zdCBhIGRhcmsgYmFja2dyb3VuZC5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgaW5kaWNhdG9yU3R5bGU/OiA/KCdkZWZhdWx0JyB8ICdibGFjaycgfCAnd2hpdGUnKSxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIFNjcm9sbFZpZXcgd2lsbCB0cnkgdG8gbG9jayB0byBvbmx5IHZlcnRpY2FsIG9yIGhvcml6b250YWxcbiAgICogc2Nyb2xsaW5nIHdoaWxlIGRyYWdnaW5nLiAgVGhlIGRlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGRpcmVjdGlvbmFsTG9ja0VuYWJsZWQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gZmFsc2UsIG9uY2UgdHJhY2tpbmcgc3RhcnRzLCB3b24ndCB0cnkgdG8gZHJhZyBpZiB0aGUgdG91Y2ggbW92ZXMuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNhbkNhbmNlbENvbnRlbnRUb3VjaGVzPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIHNldCwgdGhlIHNjcm9sbCB2aWV3IHdpbGwgYWRqdXN0IHRoZSBzY3JvbGwgcG9zaXRpb24gc28gdGhhdCB0aGUgZmlyc3QgY2hpbGQgdGhhdCBpc1xuICAgKiBjdXJyZW50bHkgdmlzaWJsZSBhbmQgYXQgb3IgYmV5b25kIGBtaW5JbmRleEZvclZpc2libGVgIHdpbGwgbm90IGNoYW5nZSBwb3NpdGlvbi4gVGhpcyBpc1xuICAgKiB1c2VmdWwgZm9yIGxpc3RzIHRoYXQgYXJlIGxvYWRpbmcgY29udGVudCBpbiBib3RoIGRpcmVjdGlvbnMsIGUuZy4gYSBjaGF0IHRocmVhZCwgd2hlcmUgbmV3XG4gICAqIG1lc3NhZ2VzIGNvbWluZyBpbiBtaWdodCBvdGhlcndpc2UgY2F1c2UgdGhlIHNjcm9sbCBwb3NpdGlvbiB0byBqdW1wLiBBIHZhbHVlIG9mIDAgaXMgY29tbW9uLFxuICAgKiBidXQgb3RoZXIgdmFsdWVzIHN1Y2ggYXMgMSBjYW4gYmUgdXNlZCB0byBza2lwIGxvYWRpbmcgc3Bpbm5lcnMgb3Igb3RoZXIgY29udGVudCB0aGF0IHNob3VsZFxuICAgKiBub3QgbWFpbnRhaW4gcG9zaXRpb24uXG4gICAqXG4gICAqIFRoZSBvcHRpb25hbCBgYXV0b3Njcm9sbFRvVG9wVGhyZXNob2xkYCBjYW4gYmUgdXNlZCB0byBtYWtlIHRoZSBjb250ZW50IGF1dG9tYXRpY2FsbHkgc2Nyb2xsXG4gICAqIHRvIHRoZSB0b3AgYWZ0ZXIgbWFraW5nIHRoZSBhZGp1c3RtZW50IGlmIHRoZSB1c2VyIHdhcyB3aXRoaW4gdGhlIHRocmVzaG9sZCBvZiB0aGUgdG9wIGJlZm9yZVxuICAgKiB0aGUgYWRqdXN0bWVudCB3YXMgbWFkZS4gVGhpcyBpcyBhbHNvIHVzZWZ1bCBmb3IgY2hhdC1saWtlIGFwcGxpY2F0aW9ucyB3aGVyZSB5b3Ugd2FudCB0byBzZWVcbiAgICogbmV3IG1lc3NhZ2VzIHNjcm9sbCBpbnRvIHBsYWNlLCBidXQgbm90IGlmIHRoZSB1c2VyIGhhcyBzY3JvbGxlZCB1cCBhIHdheXMgYW5kIGl0IHdvdWxkIGJlXG4gICAqIGRpc3J1cHRpdmUgdG8gc2Nyb2xsIGEgYnVuY2guXG4gICAqXG4gICAqIENhdmVhdCAxOiBSZW9yZGVyaW5nIGVsZW1lbnRzIGluIHRoZSBzY3JvbGx2aWV3IHdpdGggdGhpcyBlbmFibGVkIHdpbGwgcHJvYmFibHkgY2F1c2VcbiAgICoganVtcGluZXNzIGFuZCBqYW5rLiBJdCBjYW4gYmUgZml4ZWQsIGJ1dCB0aGVyZSBhcmUgY3VycmVudGx5IG5vIHBsYW5zIHRvIGRvIHNvLiBGb3Igbm93LFxuICAgKiBkb24ndCByZS1vcmRlciB0aGUgY29udGVudCBvZiBhbnkgU2Nyb2xsVmlld3Mgb3IgTGlzdHMgdGhhdCB1c2UgdGhpcyBmZWF0dXJlLlxuICAgKlxuICAgKiBDYXZlYXQgMjogVGhpcyBzaW1wbHkgdXNlcyBgY29udGVudE9mZnNldGAgYW5kIGBmcmFtZS5vcmlnaW5gIGluIG5hdGl2ZSBjb2RlIHRvIGNvbXB1dGVcbiAgICogdmlzaWJpbGl0eS4gT2NjbHVzaW9uLCB0cmFuc2Zvcm1zLCBhbmQgb3RoZXIgY29tcGxleGl0eSB3b24ndCBiZSB0YWtlbiBpbnRvIGFjY291bnQgYXMgdG9cbiAgICogd2hldGhlciBjb250ZW50IGlzIFwidmlzaWJsZVwiIG9yIG5vdC5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgbWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uPzogPyRSZWFkT25seTx7fFxuICAgIG1pbkluZGV4Rm9yVmlzaWJsZTogbnVtYmVyLFxuICAgIGF1dG9zY3JvbGxUb1RvcFRocmVzaG9sZD86ID9udW1iZXIsXG4gIHx9PixcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGFsbG93ZWQgem9vbSBzY2FsZS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMS4wLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBtYXhpbXVtWm9vbVNjYWxlPzogP251bWJlcixcbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIGFsbG93ZWQgem9vbSBzY2FsZS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMS4wLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBtaW5pbXVtWm9vbVNjYWxlPzogP251bWJlcixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgU2Nyb2xsVmlldyBhbGxvd3MgdXNlIG9mIHBpbmNoIGdlc3R1cmVzIHRvIHpvb20gaW4gYW5kIG91dC5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgcGluY2hHZXN0dXJlRW5hYmxlZD86ID9ib29sZWFuLFxuICAvKipcbiAgICogVGhpcyBjb250cm9scyBob3cgb2Z0ZW4gdGhlIHNjcm9sbCBldmVudCB3aWxsIGJlIGZpcmVkIHdoaWxlIHNjcm9sbGluZ1xuICAgKiAoYXMgYSB0aW1lIGludGVydmFsIGluIG1zKS4gQSBsb3dlciBudW1iZXIgeWllbGRzIGJldHRlciBhY2N1cmFjeSBmb3IgY29kZVxuICAgKiB0aGF0IGlzIHRyYWNraW5nIHRoZSBzY3JvbGwgcG9zaXRpb24sIGJ1dCBjYW4gbGVhZCB0byBzY3JvbGwgcGVyZm9ybWFuY2VcbiAgICogcHJvYmxlbXMgZHVlIHRvIHRoZSB2b2x1bWUgb2YgaW5mb3JtYXRpb24gYmVpbmcgc2VuZCBvdmVyIHRoZSBicmlkZ2UuXG4gICAqXG4gICAqIFZhbHVlcyBiZXR3ZWVuIDAgYW5kIDE3bXMgaW5kaWNhdGUgNjBmcHMgdXBkYXRlcyBhcmUgbmVlZGVkIGFuZCB0aHJvdHRsaW5nXG4gICAqIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIElmIHlvdSBkbyBub3QgbmVlZCBwcmVjaXNlIHNjcm9sbCBwb3NpdGlvbiB0cmFja2luZywgc2V0IHRoaXMgdmFsdWUgaGlnaGVyXG4gICAqIHRvIGxpbWl0IHRoZSBpbmZvcm1hdGlvbiBiZWluZyBzZW50IGFjcm9zcyB0aGUgYnJpZGdlLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB6ZXJvLCB3aGljaCByZXN1bHRzIGluIHRoZSBzY3JvbGwgZXZlbnQgYmVpbmcgc2VudCBvbmx5XG4gICAqIG9uY2UgZWFjaCB0aW1lIHRoZSB2aWV3IGlzIHNjcm9sbGVkLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzY3JvbGxFdmVudFRocm90dGxlPzogP251bWJlcixcbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgYnkgd2hpY2ggdGhlIHNjcm9sbCB2aWV3IGluZGljYXRvcnMgYXJlIGluc2V0IGZyb20gdGhlIGVkZ2VzXG4gICAqIG9mIHRoZSBzY3JvbGwgdmlldy4gVGhpcyBzaG91bGQgbm9ybWFsbHkgYmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlIGFzXG4gICAqIHRoZSBgY29udGVudEluc2V0YC4gRGVmYXVsdHMgdG8gYHswLCAwLCAwLCAwfWAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbEluZGljYXRvckluc2V0cz86ID9FZGdlSW5zZXRzUHJvcCxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IHNjcm9sbGVkIGJleW9uZCBpdHNcbiAgICogY29udGVudCBzaXplLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgc2Nyb2xsVG9PdmVyZmxvd0VuYWJsZWQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IHNjcm9sbHMgdG8gdG9wIHdoZW4gdGhlIHN0YXR1cyBiYXIgaXMgdGFwcGVkLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzY3JvbGxzVG9Ub3A/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gdGhlIHNjcm9sbCB2aWV3IHNjcm9sbHMgdG8gdG9wIGFmdGVyIHRoZSBzdGF0dXMgYmFyIGhhcyBiZWVuIHRhcHBlZFxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBvblNjcm9sbFRvVG9wPzogKGV2ZW50OiBTY3JvbGxFdmVudCkgPT4gdm9pZCxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgc2hvd3MgYSBob3Jpem9udGFsIHNjcm9sbCBpbmRpY2F0b3IuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICBzaG93c0hvcml6b250YWxTY3JvbGxJbmRpY2F0b3I/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHNjYWxlIG9mIHRoZSBzY3JvbGwgdmlldyBjb250ZW50LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxLjAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHpvb21TY2FsZT86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IHNwZWNpZmllcyBob3cgdGhlIHNhZmUgYXJlYSBpbnNldHMgYXJlIHVzZWQgdG8gbW9kaWZ5IHRoZVxuICAgKiBjb250ZW50IGFyZWEgb2YgdGhlIHNjcm9sbCB2aWV3LiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5IGlzXG4gICAqIFwibmV2ZXJcIi4gQXZhaWxhYmxlIG9uIGlPUyAxMSBhbmQgbGF0ZXIuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNvbnRlbnRJbnNldEFkanVzdG1lbnRCZWhhdmlvcj86ID8oXG4gICAgfCAnYXV0b21hdGljJ1xuICAgIHwgJ3Njcm9sbGFibGVBeGVzJ1xuICAgIHwgJ25ldmVyJ1xuICAgIHwgJ2Fsd2F5cydcbiAgKSxcbnx9PjtcblxudHlwZSBBbmRyb2lkUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLyoqXG4gICAqIEVuYWJsZXMgbmVzdGVkIHNjcm9sbGluZyBmb3IgQW5kcm9pZCBBUEkgbGV2ZWwgMjErLlxuICAgKiBOZXN0ZWQgc2Nyb2xsaW5nIGlzIHN1cHBvcnRlZCBieSBkZWZhdWx0IG9uIGlPU1xuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgbmVzdGVkU2Nyb2xsRW5hYmxlZD86ID9ib29sZWFuLFxuICAvKipcbiAgICogU29tZXRpbWVzIGEgc2Nyb2xsdmlldyB0YWtlcyB1cCBtb3JlIHNwYWNlIHRoYW4gaXRzIGNvbnRlbnQgZmlsbHMuIFdoZW4gdGhpcyBpc1xuICAgKiB0aGUgY2FzZSwgdGhpcyBwcm9wIHdpbGwgZmlsbCB0aGUgcmVzdCBvZiB0aGUgc2Nyb2xsdmlldyB3aXRoIGEgY29sb3IgdG8gYXZvaWQgc2V0dGluZ1xuICAgKiBhIGJhY2tncm91bmQgYW5kIGNyZWF0aW5nIHVubmVjZXNzYXJ5IG92ZXJkcmF3LiBUaGlzIGlzIGFuIGFkdmFuY2VkIG9wdGltaXphdGlvblxuICAgKiB0aGF0IGlzIG5vdCBuZWVkZWQgaW4gdGhlIGdlbmVyYWwgY2FzZS5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIGVuZEZpbGxDb2xvcj86ID9Db2xvclZhbHVlLFxuICAvKipcbiAgICogVGFnIHVzZWQgdG8gbG9nIHNjcm9sbCBwZXJmb3JtYW5jZSBvbiB0aGlzIHNjcm9sbCB2aWV3LiBXaWxsIGZvcmNlXG4gICAqIG1vbWVudHVtIGV2ZW50cyB0byBiZSB0dXJuZWQgb24gKHNlZSBzZW5kTW9tZW50dW1FdmVudHMpLiBUaGlzIGRvZXNuJ3QgZG9cbiAgICogYW55dGhpbmcgb3V0IG9mIHRoZSBib3ggYW5kIHlvdSBuZWVkIHRvIGltcGxlbWVudCBhIGN1c3RvbSBuYXRpdmVcbiAgICogRnBzTGlzdGVuZXIgZm9yIGl0IHRvIGJlIHVzZWZ1bC5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHNjcm9sbFBlcmZUYWc/OiA/c3RyaW5nLFxuICAvKipcbiAgICogVXNlZCB0byBvdmVycmlkZSBkZWZhdWx0IHZhbHVlIG9mIG92ZXJTY3JvbGwgbW9kZS5cbiAgICpcbiAgICogUG9zc2libGUgdmFsdWVzOlxuICAgKlxuICAgKiAgLSBgJ2F1dG8nYCAtIERlZmF1bHQgdmFsdWUsIGFsbG93IGEgdXNlciB0byBvdmVyLXNjcm9sbFxuICAgKiAgICB0aGlzIHZpZXcgb25seSBpZiB0aGUgY29udGVudCBpcyBsYXJnZSBlbm91Z2ggdG8gbWVhbmluZ2Z1bGx5IHNjcm9sbC5cbiAgICogIC0gYCdhbHdheXMnYCAtIEFsd2F5cyBhbGxvdyBhIHVzZXIgdG8gb3Zlci1zY3JvbGwgdGhpcyB2aWV3LlxuICAgKiAgLSBgJ25ldmVyJ2AgLSBOZXZlciBhbGxvdyBhIHVzZXIgdG8gb3Zlci1zY3JvbGwgdGhpcyB2aWV3LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgb3ZlclNjcm9sbE1vZGU/OiA/KCdhdXRvJyB8ICdhbHdheXMnIHwgJ25ldmVyJyksXG4gIC8qKlxuICAgKiBDYXVzZXMgdGhlIHNjcm9sbGJhcnMgbm90IHRvIHR1cm4gdHJhbnNwYXJlbnQgd2hlbiB0aGV5IGFyZSBub3QgaW4gdXNlLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHBlcnNpc3RlbnRTY3JvbGxiYXI/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEZhZGVzIG91dCB0aGUgZWRnZXMgb2YgdGhlIHRoZSBzY3JvbGwgY29udGVudC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiAwLCB0aGUgZmFkaW5nIGVkZ2VzIHdpbGwgYmUgc2V0IGFjY29yZGluZ2x5XG4gICAqIHRvIHRoZSBjdXJyZW50IHNjcm9sbCBkaXJlY3Rpb24gYW5kIHBvc2l0aW9uLFxuICAgKiBpbmRpY2F0aW5nIGlmIHRoZXJlIGlzIG1vcmUgY29udGVudCB0byBzaG93LlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAwLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgZmFkaW5nRWRnZUxlbmd0aD86ID9udW1iZXIsXG58fT47XG5cbnR5cGUgU3RpY2t5SGVhZGVyQ29tcG9uZW50VHlwZSA9IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFxuICBTY3JvbGxWaWV3U3RpY2t5SGVhZGVyUHJvcHMsXG4gICRSZWFkT25seTxpbnRlcmZhY2Uge3NldE5leHRIZWFkZXJZOiBudW1iZXIgPT4gdm9pZH0+LFxuPjtcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxuICAuLi5JT1NQcm9wcyxcbiAgLi4uQW5kcm9pZFByb3BzLFxuXG4gIC8qKlxuICAgKiBUaGVzZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBzY3JvbGwgdmlldyBjb250ZW50IGNvbnRhaW5lciB3aGljaFxuICAgKiB3cmFwcyBhbGwgb2YgdGhlIGNoaWxkIHZpZXdzLiBFeGFtcGxlOlxuICAgKlxuICAgKiBgYGBcbiAgICogcmV0dXJuIChcbiAgICogICA8U2Nyb2xsVmlldyBjb250ZW50Q29udGFpbmVyU3R5bGU9e3N0eWxlcy5jb250ZW50Q29udGFpbmVyfT5cbiAgICogICA8L1Njcm9sbFZpZXc+XG4gICAqICk7XG4gICAqIC4uLlxuICAgKiBjb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAqICAgY29udGVudENvbnRhaW5lcjoge1xuICAgKiAgICAgcGFkZGluZ1ZlcnRpY2FsOiAyMFxuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgY29udGVudENvbnRhaW5lclN0eWxlPzogP1ZpZXdTdHlsZVByb3AsXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hbnVhbGx5IHNldCB0aGUgc3RhcnRpbmcgc2Nyb2xsIG9mZnNldC5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYHt4OiAwLCB5OiAwfWAuXG4gICAqL1xuICBjb250ZW50T2Zmc2V0PzogP1BvaW50UHJvcCxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IHN0b3BzIG9uIHRoZSBuZXh0IGluZGV4IChpbiByZWxhdGlvbiB0byBzY3JvbGxcbiAgICogcG9zaXRpb24gYXQgcmVsZWFzZSkgcmVnYXJkbGVzcyBvZiBob3cgZmFzdCB0aGUgZ2VzdHVyZSBpcy4gVGhpcyBjYW4gYmVcbiAgICogdXNlZCBmb3IgcGFnaW5hdGlvbiB3aGVuIHRoZSBwYWdlIGlzIGxlc3MgdGhhbiB0aGUgd2lkdGggb2YgdGhlXG4gICAqIGhvcml6b250YWwgU2Nyb2xsVmlldyBvciB0aGUgaGVpZ2h0IG9mIHRoZSB2ZXJ0aWNhbCBTY3JvbGxWaWV3LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICovXG4gIGRpc2FibGVJbnRlcnZhbE1vbWVudHVtPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBBIGZsb2F0aW5nLXBvaW50IG51bWJlciB0aGF0IGRldGVybWluZXMgaG93IHF1aWNrbHkgdGhlIHNjcm9sbCB2aWV3XG4gICAqIGRlY2VsZXJhdGVzIGFmdGVyIHRoZSB1c2VyIGxpZnRzIHRoZWlyIGZpbmdlci4gWW91IG1heSBhbHNvIHVzZSBzdHJpbmdcbiAgICogc2hvcnRjdXRzIGBcIm5vcm1hbFwiYCBhbmQgYFwiZmFzdFwiYCB3aGljaCBtYXRjaCB0aGUgdW5kZXJseWluZyBpT1Mgc2V0dGluZ3NcbiAgICogZm9yIGBVSVNjcm9sbFZpZXdEZWNlbGVyYXRpb25SYXRlTm9ybWFsYCBhbmRcbiAgICogYFVJU2Nyb2xsVmlld0RlY2VsZXJhdGlvblJhdGVGYXN0YCByZXNwZWN0aXZlbHkuXG4gICAqXG4gICAqICAgLSBgJ25vcm1hbCdgOiAwLjk5OCBvbiBpT1MsIDAuOTg1IG9uIEFuZHJvaWQgKHRoZSBkZWZhdWx0KVxuICAgKiAgIC0gYCdmYXN0J2A6IDAuOTkgb24gaU9TLCAwLjkgb24gQW5kcm9pZFxuICAgKi9cbiAgZGVjZWxlcmF0aW9uUmF0ZT86ID9EZWNlbGVyYXRpb25SYXRlVHlwZSxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3J3MgY2hpbGRyZW4gYXJlIGFycmFuZ2VkIGhvcml6b250YWxseSBpbiBhIHJvd1xuICAgKiBpbnN0ZWFkIG9mIHZlcnRpY2FsbHkgaW4gYSBjb2x1bW4uIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKi9cbiAgaG9yaXpvbnRhbD86ID9ib29sZWFuLFxuICAvKipcbiAgICogSWYgc3RpY2t5IGhlYWRlcnMgc2hvdWxkIHN0aWNrIGF0IHRoZSBib3R0b20gaW5zdGVhZCBvZiB0aGUgdG9wIG9mIHRoZVxuICAgKiBTY3JvbGxWaWV3LiBUaGlzIGlzIHVzdWFsbHkgdXNlZCB3aXRoIGludmVydGVkIFNjcm9sbFZpZXdzLlxuICAgKi9cbiAgaW52ZXJ0U3RpY2t5SGVhZGVycz86ID9ib29sZWFuLFxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBrZXlib2FyZCBnZXRzIGRpc21pc3NlZCBpbiByZXNwb25zZSB0byBhIGRyYWcuXG4gICAqXG4gICAqICpDcm9zcyBwbGF0Zm9ybSpcbiAgICpcbiAgICogICAtIGAnbm9uZSdgICh0aGUgZGVmYXVsdCksIGRyYWdzIGRvIG5vdCBkaXNtaXNzIHRoZSBrZXlib2FyZC5cbiAgICogICAtIGAnb24tZHJhZydgLCB0aGUga2V5Ym9hcmQgaXMgZGlzbWlzc2VkIHdoZW4gYSBkcmFnIGJlZ2lucy5cbiAgICpcbiAgICogKmlPUyBPbmx5KlxuICAgKlxuICAgKiAgIC0gYCdpbnRlcmFjdGl2ZSdgLCB0aGUga2V5Ym9hcmQgaXMgZGlzbWlzc2VkIGludGVyYWN0aXZlbHkgd2l0aCB0aGUgZHJhZyBhbmQgbW92ZXMgaW5cbiAgICogICAgIHN5bmNocm9ueSB3aXRoIHRoZSB0b3VjaDsgZHJhZ2dpbmcgdXB3YXJkcyBjYW5jZWxzIHRoZSBkaXNtaXNzYWwuXG4gICAqICAgICBPbiBhbmRyb2lkIHRoaXMgaXMgbm90IHN1cHBvcnRlZCBhbmQgaXQgd2lsbCBoYXZlIHRoZSBzYW1lIGJlaGF2aW9yIGFzICdub25lJy5cbiAgICovXG4gIGtleWJvYXJkRGlzbWlzc01vZGU/OiA/Ly8gZGVmYXVsdFxuICAvLyBjcm9zcy1wbGF0Zm9ybVxuICAoJ25vbmUnIHwgJ29uLWRyYWcnIHwgJ2ludGVyYWN0aXZlJyksIC8vIGlvcyBvbmx5XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZW4gdGhlIGtleWJvYXJkIHNob3VsZCBzdGF5IHZpc2libGUgYWZ0ZXIgYSB0YXAuXG4gICAqXG4gICAqICAgLSBgJ25ldmVyJ2AgKHRoZSBkZWZhdWx0KSwgdGFwcGluZyBvdXRzaWRlIG9mIHRoZSBmb2N1c2VkIHRleHQgaW5wdXQgd2hlbiB0aGUga2V5Ym9hcmRcbiAgICogICAgIGlzIHVwIGRpc21pc3NlcyB0aGUga2V5Ym9hcmQuIFdoZW4gdGhpcyBoYXBwZW5zLCBjaGlsZHJlbiB3b24ndCByZWNlaXZlIHRoZSB0YXAuXG4gICAqICAgLSBgJ2Fsd2F5cydgLCB0aGUga2V5Ym9hcmQgd2lsbCBub3QgZGlzbWlzcyBhdXRvbWF0aWNhbGx5LCBhbmQgdGhlIHNjcm9sbCB2aWV3IHdpbGwgbm90XG4gICAqICAgICBjYXRjaCB0YXBzLCBidXQgY2hpbGRyZW4gb2YgdGhlIHNjcm9sbCB2aWV3IGNhbiBjYXRjaCB0YXBzLlxuICAgKiAgIC0gYCdoYW5kbGVkJ2AsIHRoZSBrZXlib2FyZCB3aWxsIG5vdCBkaXNtaXNzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgdGFwIHdhcyBoYW5kbGVkIGJ5XG4gICAqICAgICBhIGNoaWxkcmVuLCAob3IgY2FwdHVyZWQgYnkgYW4gYW5jZXN0b3IpLlxuICAgKiAgIC0gYGZhbHNlYCwgZGVwcmVjYXRlZCwgdXNlICduZXZlcicgaW5zdGVhZFxuICAgKiAgIC0gYHRydWVgLCBkZXByZWNhdGVkLCB1c2UgJ2Fsd2F5cycgaW5zdGVhZFxuICAgKi9cbiAga2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcz86ID8oJ2Fsd2F5cycgfCAnbmV2ZXInIHwgJ2hhbmRsZWQnIHwgdHJ1ZSB8IGZhbHNlKSxcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBtb21lbnR1bSBzY3JvbGwgc3RhcnRzIChzY3JvbGwgd2hpY2ggb2NjdXJzIGFzIHRoZSBTY3JvbGxWaWV3IGdsaWRlcyB0byBhIHN0b3ApLlxuICAgKi9cbiAgb25Nb21lbnR1bVNjcm9sbEJlZ2luPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgbW9tZW50dW0gc2Nyb2xsIGVuZHMgKHNjcm9sbCB3aGljaCBvY2N1cnMgYXMgdGhlIFNjcm9sbFZpZXcgZ2xpZGVzIHRvIGEgc3RvcCkuXG4gICAqL1xuICBvbk1vbWVudHVtU2Nyb2xsRW5kPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG5cbiAgLyoqXG4gICAqIEZpcmVzIGF0IG1vc3Qgb25jZSBwZXIgZnJhbWUgZHVyaW5nIHNjcm9sbGluZy4gVGhlIGZyZXF1ZW5jeSBvZiB0aGVcbiAgICogZXZlbnRzIGNhbiBiZSBjb250cm9sbGVkIHVzaW5nIHRoZSBgc2Nyb2xsRXZlbnRUaHJvdHRsZWAgcHJvcC5cbiAgICovXG4gIG9uU2Nyb2xsPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBiZWdpbnMgdG8gZHJhZyB0aGUgc2Nyb2xsIHZpZXcuXG4gICAqL1xuICBvblNjcm9sbEJlZ2luRHJhZz86ID8oZXZlbnQ6IFNjcm9sbEV2ZW50KSA9PiB2b2lkLFxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgc3RvcHMgZHJhZ2dpbmcgdGhlIHNjcm9sbCB2aWV3IGFuZCBpdCBlaXRoZXIgc3RvcHNcbiAgICogb3IgYmVnaW5zIHRvIGdsaWRlLlxuICAgKi9cbiAgb25TY3JvbGxFbmREcmFnPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBzY3JvbGxhYmxlIGNvbnRlbnQgdmlldyBvZiB0aGUgU2Nyb2xsVmlldyBjaGFuZ2VzLlxuICAgKlxuICAgKiBIYW5kbGVyIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgY29udGVudCB3aWR0aCBhbmQgY29udGVudCBoZWlnaHQgYXMgcGFyYW1ldGVyczpcbiAgICogYChjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQpYFxuICAgKlxuICAgKiBJdCdzIGltcGxlbWVudGVkIHVzaW5nIG9uTGF5b3V0IGhhbmRsZXIgYXR0YWNoZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVyXG4gICAqIHdoaWNoIHRoaXMgU2Nyb2xsVmlldyByZW5kZXJzLlxuICAgKi9cbiAgb25Db250ZW50U2l6ZUNoYW5nZT86IChjb250ZW50V2lkdGg6IG51bWJlciwgY29udGVudEhlaWdodDogbnVtYmVyKSA9PiB2b2lkLFxuICBvbktleWJvYXJkRGlkU2hvdz86IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZCxcbiAgb25LZXlib2FyZERpZEhpZGU/OiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQsXG4gIG9uS2V5Ym9hcmRXaWxsU2hvdz86IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZCxcbiAgb25LZXlib2FyZFdpbGxIaWRlPzogKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB2b2lkLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcgc3RvcHMgb24gbXVsdGlwbGVzIG9mIHRoZSBzY3JvbGwgdmlldydzIHNpemVcbiAgICogd2hlbiBzY3JvbGxpbmcuIFRoaXMgY2FuIGJlIHVzZWQgZm9yIGhvcml6b250YWwgcGFnaW5hdGlvbi4gVGhlIGRlZmF1bHRcbiAgICogdmFsdWUgaXMgZmFsc2UuXG4gICAqXG4gICAqIE5vdGU6IFZlcnRpY2FsIHBhZ2luYXRpb24gaXMgbm90IHN1cHBvcnRlZCBvbiBBbmRyb2lkLlxuICAgKi9cbiAgcGFnaW5nRW5hYmxlZD86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgKiBXaGVuIGZhbHNlLCB0aGUgdmlldyBjYW5ub3QgYmUgc2Nyb2xsZWQgdmlhIHRvdWNoIGludGVyYWN0aW9uLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIHZpZXcgY2FuIGFsd2F5cyBiZSBzY3JvbGxlZCBieSBjYWxsaW5nIGBzY3JvbGxUb2AuXG4gICAqL1xuICBzY3JvbGxFbmFibGVkPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHNob3dzIGEgdmVydGljYWwgc2Nyb2xsIGluZGljYXRvci5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3I/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgU3RpY2t5IGhlYWRlciBpcyBoaWRkZW4gd2hlbiBzY3JvbGxpbmcgZG93biwgYW5kIGRvY2sgYXQgdGhlIHRvcFxuICAgKiB3aGVuIHNjcm9sbGluZyB1cFxuICAgKi9cbiAgc3RpY2t5SGVhZGVySGlkZGVuT25TY3JvbGw/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGNoaWxkIGluZGljZXMgZGV0ZXJtaW5pbmcgd2hpY2ggY2hpbGRyZW4gZ2V0IGRvY2tlZCB0byB0aGVcbiAgICogdG9wIG9mIHRoZSBzY3JlZW4gd2hlbiBzY3JvbGxpbmcuIEZvciBleGFtcGxlLCBwYXNzaW5nXG4gICAqIGBzdGlja3lIZWFkZXJJbmRpY2VzPXtbMF19YCB3aWxsIGNhdXNlIHRoZSBmaXJzdCBjaGlsZCB0byBiZSBmaXhlZCB0byB0aGVcbiAgICogdG9wIG9mIHRoZSBzY3JvbGwgdmlldy4gVGhpcyBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkIGluIGNvbmp1bmN0aW9uXG4gICAqIHdpdGggYGhvcml6b250YWw9e3RydWV9YC5cbiAgICovXG4gIHN0aWNreUhlYWRlckluZGljZXM/OiA/JFJlYWRPbmx5QXJyYXk8bnVtYmVyPixcbiAgLyoqXG4gICAqIEEgUmVhY3QgQ29tcG9uZW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJlbmRlciBzdGlja3kgaGVhZGVycy5cbiAgICogVG8gYmUgdXNlZCB0b2dldGhlciB3aXRoIGBzdGlja3lIZWFkZXJJbmRpY2VzYCBvciB3aXRoIGBTZWN0aW9uTGlzdGAsIGRlZmF1bHRzIHRvIGBTY3JvbGxWaWV3U3RpY2t5SGVhZGVyYC5cbiAgICogWW91IG1heSBuZWVkIHRvIHNldCB0aGlzIGlmIHlvdXIgc3RpY2t5IGhlYWRlciB1c2VzIGN1c3RvbSB0cmFuc2Zvcm1zIChlZy4gdHJhbnNsYXRpb24pLFxuICAgKiBmb3IgZXhhbXBsZSB3aGVuIHlvdSB3YW50IHlvdXIgbGlzdCB0byBoYXZlIGFuIGFuaW1hdGVkIGhpZGFibGUgaGVhZGVyLlxuICAgKi9cbiAgU3RpY2t5SGVhZGVyQ29tcG9uZW50PzogU3RpY2t5SGVhZGVyQ29tcG9uZW50VHlwZSxcbiAgLyoqXG4gICAqIFdoZW4gYHNuYXBUb0ludGVydmFsYCBpcyBzZXQsIGBzbmFwVG9BbGlnbm1lbnRgIHdpbGwgZGVmaW5lIHRoZSByZWxhdGlvbnNoaXBcbiAgICogb2YgdGhlIHNuYXBwaW5nIHRvIHRoZSBzY3JvbGwgdmlldy5cbiAgICpcbiAgICogICAtIGAnc3RhcnQnYCAodGhlIGRlZmF1bHQpIHdpbGwgYWxpZ24gdGhlIHNuYXAgYXQgdGhlIGxlZnQgKGhvcml6b250YWwpIG9yIHRvcCAodmVydGljYWwpXG4gICAqICAgLSBgJ2NlbnRlcidgIHdpbGwgYWxpZ24gdGhlIHNuYXAgaW4gdGhlIGNlbnRlclxuICAgKiAgIC0gYCdlbmQnYCB3aWxsIGFsaWduIHRoZSBzbmFwIGF0IHRoZSByaWdodCAoaG9yaXpvbnRhbCkgb3IgYm90dG9tICh2ZXJ0aWNhbClcbiAgICovXG4gIHNuYXBUb0FsaWdubWVudD86ID8oJ3N0YXJ0JyB8ICdjZW50ZXInIHwgJ2VuZCcpLFxuICAvKipcbiAgICogV2hlbiBzZXQsIGNhdXNlcyB0aGUgc2Nyb2xsIHZpZXcgdG8gc3RvcCBhdCBtdWx0aXBsZXMgb2YgdGhlIHZhbHVlIG9mXG4gICAqIGBzbmFwVG9JbnRlcnZhbGAuIFRoaXMgY2FuIGJlIHVzZWQgZm9yIHBhZ2luYXRpbmcgdGhyb3VnaCBjaGlsZHJlblxuICAgKiB0aGF0IGhhdmUgbGVuZ3RocyBzbWFsbGVyIHRoYW4gdGhlIHNjcm9sbCB2aWV3LiBUeXBpY2FsbHkgdXNlZCBpblxuICAgKiBjb21iaW5hdGlvbiB3aXRoIGBzbmFwVG9BbGlnbm1lbnRgIGFuZCBgZGVjZWxlcmF0aW9uUmF0ZT1cImZhc3RcImAuXG4gICAqXG4gICAqIE92ZXJyaWRlcyBsZXNzIGNvbmZpZ3VyYWJsZSBgcGFnaW5nRW5hYmxlZGAgcHJvcC5cbiAgICovXG4gIHNuYXBUb0ludGVydmFsPzogP251bWJlcixcbiAgLyoqXG4gICAqIFdoZW4gc2V0LCBjYXVzZXMgdGhlIHNjcm9sbCB2aWV3IHRvIHN0b3AgYXQgdGhlIGRlZmluZWQgb2Zmc2V0cy5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCBmb3IgcGFnaW5hdGluZyB0aHJvdWdoIHZhcmlvdXNseSBzaXplZCBjaGlsZHJlblxuICAgKiB0aGF0IGhhdmUgbGVuZ3RocyBzbWFsbGVyIHRoYW4gdGhlIHNjcm9sbCB2aWV3LiBUeXBpY2FsbHkgdXNlZCBpblxuICAgKiBjb21iaW5hdGlvbiB3aXRoIGBkZWNlbGVyYXRpb25SYXRlPVwiZmFzdFwiYC5cbiAgICpcbiAgICogT3ZlcnJpZGVzIGxlc3MgY29uZmlndXJhYmxlIGBwYWdpbmdFbmFibGVkYCBhbmQgYHNuYXBUb0ludGVydmFsYCBwcm9wcy5cbiAgICovXG4gIHNuYXBUb09mZnNldHM/OiA/JFJlYWRPbmx5QXJyYXk8bnVtYmVyPixcbiAgLyoqXG4gICAqIFVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIGBzbmFwVG9PZmZzZXRzYC4gQnkgZGVmYXVsdCwgdGhlIGJlZ2lubmluZ1xuICAgKiBvZiB0aGUgbGlzdCBjb3VudHMgYXMgYSBzbmFwIG9mZnNldC4gU2V0IGBzbmFwVG9TdGFydGAgdG8gZmFsc2UgdG8gZGlzYWJsZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCBhbGxvdyB0aGUgbGlzdCB0byBzY3JvbGwgZnJlZWx5IGJldHdlZW4gaXRzIHN0YXJ0IGFuZFxuICAgKiB0aGUgZmlyc3QgYHNuYXBUb09mZnNldHNgIG9mZnNldC5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHNuYXBUb1N0YXJ0PzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBVc2UgaW4gY29uanVuY3Rpb24gd2l0aCBgc25hcFRvT2Zmc2V0c2AuIEJ5IGRlZmF1bHQsIHRoZSBlbmRcbiAgICogb2YgdGhlIGxpc3QgY291bnRzIGFzIGEgc25hcCBvZmZzZXQuIFNldCBgc25hcFRvRW5kYCB0byBmYWxzZSB0byBkaXNhYmxlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIGFsbG93IHRoZSBsaXN0IHRvIHNjcm9sbCBmcmVlbHkgYmV0d2VlbiBpdHMgZW5kIGFuZFxuICAgKiB0aGUgbGFzdCBgc25hcFRvT2Zmc2V0c2Agb2Zmc2V0LlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgc25hcFRvRW5kPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBFeHBlcmltZW50YWw6IFdoZW4gdHJ1ZSwgb2Zmc2NyZWVuIGNoaWxkIHZpZXdzICh3aG9zZSBgb3ZlcmZsb3dgIHZhbHVlIGlzXG4gICAqIGBoaWRkZW5gKSBhcmUgcmVtb3ZlZCBmcm9tIHRoZWlyIG5hdGl2ZSBiYWNraW5nIHN1cGVydmlldyB3aGVuIG9mZnNjcmVlbi5cbiAgICogVGhpcyBjYW4gaW1wcm92ZSBzY3JvbGxpbmcgcGVyZm9ybWFuY2Ugb24gbG9uZyBsaXN0cy4gVGhlIGRlZmF1bHQgdmFsdWUgaXNcbiAgICogdHJ1ZS5cbiAgICovXG4gIHJlbW92ZUNsaXBwZWRTdWJ2aWV3cz86ID9ib29sZWFuLFxuICAvKipcbiAgICogQSBSZWZyZXNoQ29udHJvbCBjb21wb25lbnQsIHVzZWQgdG8gcHJvdmlkZSBwdWxsLXRvLXJlZnJlc2hcbiAgICogZnVuY3Rpb25hbGl0eSBmb3IgdGhlIFNjcm9sbFZpZXcuIE9ubHkgd29ya3MgZm9yIHZlcnRpY2FsIFNjcm9sbFZpZXdzXG4gICAqIChgaG9yaXpvbnRhbGAgcHJvcCBtdXN0IGJlIGBmYWxzZWApLlxuICAgKlxuICAgKiBTZWUgW1JlZnJlc2hDb250cm9sXShkb2NzL3JlZnJlc2hjb250cm9sLmh0bWwpLlxuICAgKi9cbiAgLyogJEZsb3dGaXhNZVt1bmNsZWFyLXR5cGVdIC0gaG93IHRvIGhhbmRsZSBnZW5lcmljIHR5cGUgd2l0aG91dCBleGlzdGVudGlhbFxuICAgKiBvcGVyYXRvcj8gKi9cbiAgcmVmcmVzaENvbnRyb2w/OiA/UmVhY3QuRWxlbWVudDxhbnk+LFxuICBjaGlsZHJlbj86IFJlYWN0Lk5vZGUsXG4gIC8qKlxuICAgKiBBIHJlZiB0byB0aGUgaW5uZXIgVmlldyBlbGVtZW50IG9mIHRoZSBTY3JvbGxWaWV3LiBUaGlzIHNob3VsZCBiZSB1c2VkXG4gICAqIGluc3RlYWQgb2YgY2FsbGluZyBgZ2V0SW5uZXJWaWV3UmVmYC5cbiAgICovXG4gIGlubmVyVmlld1JlZj86IFJlYWN0LlJlZjx0eXBlb2YgVmlldz4sXG4gIC8qKlxuICAgKiBBIHJlZiB0byB0aGUgTmF0aXZlIFNjcm9sbFZpZXcgY29tcG9uZW50LiBUaGlzIHJlZiBjYW4gYmUgdXNlZCB0byBjYWxsXG4gICAqIGFsbCBvZiBTY3JvbGxWaWV3J3MgcHVibGljIG1ldGhvZHMsIGluIGFkZGl0aW9uIHRvIG5hdGl2ZSBtZXRob2RzIGxpa2VcbiAgICogbWVhc3VyZSwgbWVhc3VyZUxheW91dCwgZXRjLlxuICAgKi9cbiAgc2Nyb2xsVmlld1JlZj86IFJlYWN0LlJlZjxcbiAgICB0eXBlb2YgU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCAmIFNjcm9sbFZpZXdJbXBlcmF0aXZlTWV0aG9kcyxcbiAgPixcbnx9PjtcblxudHlwZSBTdGF0ZSA9IHt8XG4gIGxheW91dEhlaWdodDogP251bWJlcixcbnx9O1xuXG5jb25zdCBJU19BTklNQVRJTkdfVE9VQ0hfU1RBUlRfVEhSRVNIT0xEX01TID0gMTY7XG5cbmV4cG9ydCB0eXBlIFNjcm9sbFZpZXdDb21wb25lbnRTdGF0aWNzID0gJFJlYWRPbmx5PHt8XG4gIENvbnRleHQ6IHR5cGVvZiBTY3JvbGxWaWV3Q29udGV4dCxcbnx9PjtcblxuLyoqXG4gKiBDb21wb25lbnQgdGhhdCB3cmFwcyBwbGF0Zm9ybSBTY3JvbGxWaWV3IHdoaWxlIHByb3ZpZGluZ1xuICogaW50ZWdyYXRpb24gd2l0aCB0b3VjaCBsb2NraW5nIFwicmVzcG9uZGVyXCIgc3lzdGVtLlxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0IFNjcm9sbFZpZXdzIG11c3QgaGF2ZSBhIGJvdW5kZWQgaGVpZ2h0IGluIG9yZGVyIHRvIHdvcmssXG4gKiBzaW5jZSB0aGV5IGNvbnRhaW4gdW5ib3VuZGVkLWhlaWdodCBjaGlsZHJlbiBpbnRvIGEgYm91bmRlZCBjb250YWluZXIgKHZpYVxuICogYSBzY3JvbGwgaW50ZXJhY3Rpb24pLiBJbiBvcmRlciB0byBib3VuZCB0aGUgaGVpZ2h0IG9mIGEgU2Nyb2xsVmlldywgZWl0aGVyXG4gKiBzZXQgdGhlIGhlaWdodCBvZiB0aGUgdmlldyBkaXJlY3RseSAoZGlzY291cmFnZWQpIG9yIG1ha2Ugc3VyZSBhbGwgcGFyZW50XG4gKiB2aWV3cyBoYXZlIGJvdW5kZWQgaGVpZ2h0LiBGb3JnZXR0aW5nIHRvIHRyYW5zZmVyIGB7ZmxleDogMX1gIGRvd24gdGhlXG4gKiB2aWV3IHN0YWNrIGNhbiBsZWFkIHRvIGVycm9ycyBoZXJlLCB3aGljaCB0aGUgZWxlbWVudCBpbnNwZWN0b3IgbWFrZXNcbiAqIGVhc3kgdG8gZGVidWcuXG4gKlxuICogRG9lc24ndCB5ZXQgc3VwcG9ydCBvdGhlciBjb250YWluZWQgcmVzcG9uZGVycyBmcm9tIGJsb2NraW5nIHRoaXMgc2Nyb2xsXG4gKiB2aWV3IGZyb20gYmVjb21pbmcgdGhlIHJlc3BvbmRlci5cbiAqXG4gKlxuICogYDxTY3JvbGxWaWV3PmAgdnMgW2A8RmxhdExpc3Q+YF0oaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9mbGF0bGlzdCkgLSB3aGljaCBvbmUgdG8gdXNlP1xuICpcbiAqIGBTY3JvbGxWaWV3YCBzaW1wbHkgcmVuZGVycyBhbGwgaXRzIHJlYWN0IGNoaWxkIGNvbXBvbmVudHMgYXQgb25jZS4gVGhhdFxuICogbWFrZXMgaXQgdmVyeSBlYXN5IHRvIHVuZGVyc3RhbmQgYW5kIHVzZS5cbiAqXG4gKiBPbiB0aGUgb3RoZXIgaGFuZCwgdGhpcyBoYXMgYSBwZXJmb3JtYW5jZSBkb3duc2lkZS4gSW1hZ2luZSB5b3UgaGF2ZSBhIHZlcnlcbiAqIGxvbmcgbGlzdCBvZiBpdGVtcyB5b3Ugd2FudCB0byBkaXNwbGF5LCBtYXliZSBzZXZlcmFsIHNjcmVlbnMgd29ydGggb2ZcbiAqIGNvbnRlbnQuIENyZWF0aW5nIEpTIGNvbXBvbmVudHMgYW5kIG5hdGl2ZSB2aWV3cyBmb3IgZXZlcnl0aGluZyBhbGwgYXQgb25jZSxcbiAqIG11Y2ggb2Ygd2hpY2ggbWF5IG5vdCBldmVuIGJlIHNob3duLCB3aWxsIGNvbnRyaWJ1dGUgdG8gc2xvdyByZW5kZXJpbmcgYW5kXG4gKiBpbmNyZWFzZWQgbWVtb3J5IHVzYWdlLlxuICpcbiAqIFRoaXMgaXMgd2hlcmUgYEZsYXRMaXN0YCBjb21lcyBpbnRvIHBsYXkuIGBGbGF0TGlzdGAgcmVuZGVycyBpdGVtcyBsYXppbHksXG4gKiBqdXN0IHdoZW4gdGhleSBhcmUgYWJvdXQgdG8gYXBwZWFyLCBhbmQgcmVtb3ZlcyBpdGVtcyB0aGF0IHNjcm9sbCB3YXkgb2ZmXG4gKiBzY3JlZW4gdG8gc2F2ZSBtZW1vcnkgYW5kIHByb2Nlc3NpbmcgdGltZS5cbiAqXG4gKiBgRmxhdExpc3RgIGlzIGFsc28gaGFuZHkgaWYgeW91IHdhbnQgdG8gcmVuZGVyIHNlcGFyYXRvcnMgYmV0d2VlbiB5b3VyIGl0ZW1zLFxuICogbXVsdGlwbGUgY29sdW1ucywgaW5maW5pdGUgc2Nyb2xsIGxvYWRpbmcsIG9yIGFueSBudW1iZXIgb2Ygb3RoZXIgZmVhdHVyZXMgaXRcbiAqIHN1cHBvcnRzIG91dCBvZiB0aGUgYm94LlxuICovXG5jbGFzcyBTY3JvbGxWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgQ29udGV4dDogdHlwZW9mIFNjcm9sbFZpZXdDb250ZXh0ID0gU2Nyb2xsVmlld0NvbnRleHQ7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5fc2Nyb2xsQW5pbWF0ZWRWYWx1ZSA9IG5ldyBBbmltYXRlZEltcGxlbWVudGF0aW9uLlZhbHVlKFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50T2Zmc2V0Py55ID8/IDAsXG4gICAgKTtcbiAgICB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlLnNldE9mZnNldCh0aGlzLnByb3BzLmNvbnRlbnRJbnNldD8udG9wID8/IDApO1xuICB9XG5cbiAgX3Njcm9sbEFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkSW1wbGVtZW50YXRpb24uVmFsdWU7XG4gIF9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudDogP3tkZXRhY2g6ICgpID0+IHZvaWQsIC4uLn0gPSBudWxsO1xuICBfc3RpY2t5SGVhZGVyUmVmczogTWFwPHN0cmluZywgUmVhY3QuRWxlbWVudFJlZjxTdGlja3lIZWFkZXJDb21wb25lbnRUeXBlPj4gPVxuICAgIG5ldyBNYXAoKTtcbiAgX2hlYWRlckxheW91dFlzOiBNYXA8c3RyaW5nLCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuXG4gIF9rZXlib2FyZE1ldHJpY3M6ID9LZXlib2FyZE1ldHJpY3MgPSBudWxsO1xuICBfYWRkaXRpb25hbFNjcm9sbE9mZnNldDogbnVtYmVyID0gMDtcbiAgX2lzVG91Y2hpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgX2xhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZTogbnVtYmVyID0gMDtcbiAgX2xhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWU6IG51bWJlciA9IDA7XG5cbiAgLy8gUmVzZXQgdG8gZmFsc2UgZXZlcnkgdGltZSBiZWNvbWVzIHJlc3BvbmRlci4gVGhpcyBpcyB1c2VkIHRvOlxuICAvLyAtIERldGVybWluZSBpZiB0aGUgc2Nyb2xsIHZpZXcgaGFzIGJlZW4gc2Nyb2xsZWQgYW5kIHRoZXJlZm9yZSBzaG91bGRcbiAgLy8gcmVmdXNlIHRvIGdpdmUgdXAgaXRzIHJlc3BvbmRlciBsb2NrLlxuICAvLyAtIERldGVybWluZSBpZiByZWxlYXNpbmcgc2hvdWxkIGRpc21pc3MgdGhlIGtleWJvYXJkIHdoZW4gd2UgYXJlIGluXG4gIC8vIHRhcC10by1kaXNtaXNzIG1vZGUgKHRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyAhPT0gJ2Fsd2F5cycpLlxuICBfb2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyOiBib29sZWFuID0gZmFsc2U7XG4gIF9iZWNhbWVSZXNwb25kZXJXaGlsZUFuaW1hdGluZzogYm9vbGVhbiA9IGZhbHNlO1xuICBfcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0OiA/Ym9vbGVhbiA9IG51bGw7XG5cbiAgX2FuaW1hdGVkID0gbnVsbDtcblxuICBfc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsU2hvdzogP0V2ZW50U3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbEhpZGU6ID9FdmVudFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIF9zdWJzY3JpcHRpb25LZXlib2FyZERpZFNob3c6ID9FdmVudFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIF9zdWJzY3JpcHRpb25LZXlib2FyZERpZEhpZGU6ID9FdmVudFN1YnNjcmlwdGlvbiA9IG51bGw7XG5cbiAgc3RhdGU6IFN0YXRlID0ge1xuICAgIGxheW91dEhlaWdodDogbnVsbCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGAna2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcz17JHtcbiAgICAgICAgICB0aGlzLnByb3BzLmtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgPT09IHRydWUgPyAndHJ1ZScgOiAnZmFsc2UnXG4gICAgICAgIH19JyBpcyBkZXByZWNhdGVkLiBgICtcbiAgICAgICAgICBgVXNlICdrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzPVwiJHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyA/ICdhbHdheXMnIDogJ25ldmVyJ1xuICAgICAgICAgIH1cIicgaW5zdGVhZGAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX2tleWJvYXJkTWV0cmljcyA9IEtleWJvYXJkLm1ldHJpY3MoKTtcbiAgICB0aGlzLl9hZGRpdGlvbmFsU2Nyb2xsT2Zmc2V0ID0gMDtcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbFNob3cgPSBLZXlib2FyZC5hZGRMaXN0ZW5lcihcbiAgICAgICdrZXlib2FyZFdpbGxTaG93JyxcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsU2hvdyxcbiAgICApO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkV2lsbEhpZGUgPSBLZXlib2FyZC5hZGRMaXN0ZW5lcihcbiAgICAgICdrZXlib2FyZFdpbGxIaWRlJyxcbiAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsSGlkZSxcbiAgICApO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkU2hvdyA9IEtleWJvYXJkLmFkZExpc3RlbmVyKFxuICAgICAgJ2tleWJvYXJkRGlkU2hvdycsXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkU2hvdyxcbiAgICApO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZSA9IEtleWJvYXJkLmFkZExpc3RlbmVyKFxuICAgICAgJ2tleWJvYXJkRGlkSGlkZScsXG4gICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkSGlkZSxcbiAgICApO1xuXG4gICAgdGhpcy5fdXBkYXRlQW5pbWF0ZWROb2RlQXR0YWNobWVudCgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHMpIHtcbiAgICBjb25zdCBwcmV2Q29udGVudEluc2V0VG9wID0gcHJldlByb3BzLmNvbnRlbnRJbnNldFxuICAgICAgPyBwcmV2UHJvcHMuY29udGVudEluc2V0LnRvcFxuICAgICAgOiAwO1xuICAgIGNvbnN0IG5ld0NvbnRlbnRJbnNldFRvcCA9IHRoaXMucHJvcHMuY29udGVudEluc2V0XG4gICAgICA/IHRoaXMucHJvcHMuY29udGVudEluc2V0LnRvcFxuICAgICAgOiAwO1xuICAgIGlmIChwcmV2Q29udGVudEluc2V0VG9wICE9PSBuZXdDb250ZW50SW5zZXRUb3ApIHtcbiAgICAgIHRoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWUuc2V0T2Zmc2V0KG5ld0NvbnRlbnRJbnNldFRvcCB8fCAwKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVBbmltYXRlZE5vZGVBdHRhY2htZW50KCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsU2hvdyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxTaG93LnJlbW92ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmRXaWxsSGlkZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZFdpbGxIaWRlLnJlbW92ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uS2V5Ym9hcmREaWRTaG93ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkU2hvdy5yZW1vdmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbktleWJvYXJkRGlkSGlkZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25LZXlib2FyZERpZEhpZGUucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWVBdHRhY2htZW50KSB7XG4gICAgICB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudC5kZXRhY2goKTtcbiAgICB9XG4gIH1cblxuICBfc2V0TmF0aXZlUmVmID0gc2V0QW5kRm9yd2FyZFJlZih7XG4gICAgZ2V0Rm9yd2FyZGVkUmVmOiAoKSA9PiB0aGlzLnByb3BzLnNjcm9sbFZpZXdSZWYsXG4gICAgc2V0TG9jYWxSZWY6IHJlZiA9PiB7XG4gICAgICB0aGlzLl9zY3JvbGxWaWV3UmVmID0gcmVmO1xuXG4gICAgICAvKlxuICAgICAgICBUaGlzIGlzIGEgaGFjay4gSWRlYWxseSB3ZSB3b3VsZCBmb3J3YXJkUmVmIHRvIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgIGhvc3QgY29tcG9uZW50LiBIb3dldmVyLCBzaW5jZSBTY3JvbGxWaWV3IGhhcyBpdCdzIG93biBtZXRob2RzIHRoYXQgY2FuIGJlXG4gICAgICAgIGNhbGxlZCBhcyB3ZWxsLCBpZiB3ZSB1c2VkIHRoZSBzdGFuZGFyZCBmb3J3YXJkUmVmIHRoZW4gdGhlc2VcbiAgICAgICAgbWV0aG9kcyB3b3VsZG4ndCBiZSBhY2Nlc3NpYmxlIGFuZCB0aHVzIGJlIGEgYnJlYWtpbmcgY2hhbmdlLlxuXG4gICAgICAgIFRoZXJlZm9yZSB3ZSBlZGl0IHJlZiB0byBpbmNsdWRlIFNjcm9sbFZpZXcncyBwdWJsaWMgbWV0aG9kcyBzbyB0aGF0XG4gICAgICAgIHRoZXkgYXJlIGNhbGxhYmxlIGZyb20gdGhlIHJlZi5cbiAgICAgICovXG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIHJlZi5nZXRTY3JvbGxSZXNwb25kZXIgPSB0aGlzLmdldFNjcm9sbFJlc3BvbmRlcjtcbiAgICAgICAgcmVmLmdldFNjcm9sbGFibGVOb2RlID0gdGhpcy5nZXRTY3JvbGxhYmxlTm9kZTtcbiAgICAgICAgcmVmLmdldElubmVyVmlld05vZGUgPSB0aGlzLmdldElubmVyVmlld05vZGU7XG4gICAgICAgIHJlZi5nZXRJbm5lclZpZXdSZWYgPSB0aGlzLmdldElubmVyVmlld1JlZjtcbiAgICAgICAgcmVmLmdldE5hdGl2ZVNjcm9sbFJlZiA9IHRoaXMuZ2V0TmF0aXZlU2Nyb2xsUmVmO1xuICAgICAgICByZWYuc2Nyb2xsVG8gPSB0aGlzLnNjcm9sbFRvO1xuICAgICAgICByZWYuc2Nyb2xsVG9FbmQgPSB0aGlzLnNjcm9sbFRvRW5kO1xuICAgICAgICByZWYuZmxhc2hTY3JvbGxJbmRpY2F0b3JzID0gdGhpcy5mbGFzaFNjcm9sbEluZGljYXRvcnM7XG4gICAgICAgIHJlZi5zY3JvbGxSZXNwb25kZXJab29tVG8gPSB0aGlzLnNjcm9sbFJlc3BvbmRlclpvb21UbztcbiAgICAgICAgcmVmLnNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQgPVxuICAgICAgICAgIHRoaXMuc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsTmF0aXZlSGFuZGxlVG9LZXlib2FyZDtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgdW5kZXJseWluZyBzY3JvbGwgcmVzcG9uZGVyLCB3aGljaCBzdXBwb3J0c1xuICAgKiBvcGVyYXRpb25zIGxpa2UgYHNjcm9sbFRvYC4gQWxsIFNjcm9sbFZpZXctbGlrZSBjb21wb25lbnRzIHNob3VsZFxuICAgKiBpbXBsZW1lbnQgdGhpcyBtZXRob2Qgc28gdGhhdCB0aGV5IGNhbiBiZSBjb21wb3NlZCB3aGlsZSBwcm92aWRpbmcgYWNjZXNzXG4gICAqIHRvIHRoZSB1bmRlcmx5aW5nIHNjcm9sbCByZXNwb25kZXIncyBtZXRob2RzLlxuICAgKi9cbiAgZ2V0U2Nyb2xsUmVzcG9uZGVyOiAoKSA9PiBTY3JvbGxSZXNwb25kZXJUeXBlID0gKCkgPT4ge1xuICAgIC8vICRGbG93Rml4TWVbdW5jbGVhci10eXBlXVxuICAgIHJldHVybiAoKHRoaXM6IGFueSk6IFNjcm9sbFJlc3BvbmRlclR5cGUpO1xuICB9O1xuXG4gIGdldFNjcm9sbGFibGVOb2RlOiAoKSA9PiA/bnVtYmVyID0gKCkgPT4ge1xuICAgIHJldHVybiBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9zY3JvbGxWaWV3UmVmKTtcbiAgfTtcblxuICBnZXRJbm5lclZpZXdOb2RlOiAoKSA9PiA/bnVtYmVyID0gKCkgPT4ge1xuICAgIHJldHVybiBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9pbm5lclZpZXdSZWYpO1xuICB9O1xuXG4gIGdldElubmVyVmlld1JlZjogKCkgPT4gP1JlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFZpZXc+ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9pbm5lclZpZXdSZWY7XG4gIH07XG5cbiAgZ2V0TmF0aXZlU2Nyb2xsUmVmOiAoKSA9PiA/UmVhY3QuRWxlbWVudFJlZjxIb3N0Q29tcG9uZW50PG1peGVkPj4gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbFZpZXdSZWY7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNjcm9sbHMgdG8gYSBnaXZlbiB4LCB5IG9mZnNldCwgZWl0aGVyIGltbWVkaWF0ZWx5IG9yIHdpdGggYSBzbW9vdGggYW5pbWF0aW9uLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBgc2Nyb2xsVG8oe3g6IDAsIHk6IDAsIGFuaW1hdGVkOiB0cnVlfSlgXG4gICAqXG4gICAqIE5vdGU6IFRoZSB3ZWlyZCBmdW5jdGlvbiBzaWduYXR1cmUgaXMgZHVlIHRvIHRoZSBmYWN0IHRoYXQsIGZvciBoaXN0b3JpY2FsIHJlYXNvbnMsXG4gICAqIHRoZSBmdW5jdGlvbiBhbHNvIGFjY2VwdHMgc2VwYXJhdGUgYXJndW1lbnRzIGFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBvcHRpb25zIG9iamVjdC5cbiAgICogVGhpcyBpcyBkZXByZWNhdGVkIGR1ZSB0byBhbWJpZ3VpdHkgKHkgYmVmb3JlIHgpLCBhbmQgU0hPVUxEIE5PVCBCRSBVU0VELlxuICAgKi9cbiAgc2Nyb2xsVG86IChcbiAgICBvcHRpb25zPzpcbiAgICAgIHwge1xuICAgICAgICAgIHg/OiBudW1iZXIsXG4gICAgICAgICAgeT86IG51bWJlcixcbiAgICAgICAgICBhbmltYXRlZD86IGJvb2xlYW4sXG4gICAgICAgICAgLi4uXG4gICAgICAgIH1cbiAgICAgIHwgbnVtYmVyLFxuICAgIGRlcHJlY2F0ZWRYPzogbnVtYmVyLFxuICAgIGRlcHJlY2F0ZWRBbmltYXRlZD86IGJvb2xlYW4sXG4gICkgPT4gdm9pZCA9IChcbiAgICBvcHRpb25zPzpcbiAgICAgIHwge1xuICAgICAgICAgIHg/OiBudW1iZXIsXG4gICAgICAgICAgeT86IG51bWJlcixcbiAgICAgICAgICBhbmltYXRlZD86IGJvb2xlYW4sXG4gICAgICAgICAgLi4uXG4gICAgICAgIH1cbiAgICAgIHwgbnVtYmVyLFxuICAgIGRlcHJlY2F0ZWRYPzogbnVtYmVyLFxuICAgIGRlcHJlY2F0ZWRBbmltYXRlZD86IGJvb2xlYW4sXG4gICkgPT4ge1xuICAgIGxldCB4LCB5LCBhbmltYXRlZDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdgc2Nyb2xsVG8oeSwgeCwgYW5pbWF0ZWQpYCBpcyBkZXByZWNhdGVkLiBVc2UgYHNjcm9sbFRvKHt4OiA1LCB5OiA1LCAnICtcbiAgICAgICAgICAnYW5pbWF0ZWQ6IHRydWV9KWAgaW5zdGVhZC4nLFxuICAgICAgKTtcbiAgICAgIHkgPSBvcHRpb25zO1xuICAgICAgeCA9IGRlcHJlY2F0ZWRYO1xuICAgICAgYW5pbWF0ZWQgPSBkZXByZWNhdGVkQW5pbWF0ZWQ7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zKSB7XG4gICAgICB5ID0gb3B0aW9ucy55O1xuICAgICAgeCA9IG9wdGlvbnMueDtcbiAgICAgIGFuaW1hdGVkID0gb3B0aW9ucy5hbmltYXRlZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3Njcm9sbFZpZXdSZWYgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBDb21tYW5kcy5zY3JvbGxUbyh0aGlzLl9zY3JvbGxWaWV3UmVmLCB4IHx8IDAsIHkgfHwgMCwgYW5pbWF0ZWQgIT09IGZhbHNlKTtcbiAgfTtcblxuICAvKipcbiAgICogSWYgdGhpcyBpcyBhIHZlcnRpY2FsIFNjcm9sbFZpZXcgc2Nyb2xscyB0byB0aGUgYm90dG9tLlxuICAgKiBJZiB0aGlzIGlzIGEgaG9yaXpvbnRhbCBTY3JvbGxWaWV3IHNjcm9sbHMgdG8gdGhlIHJpZ2h0LlxuICAgKlxuICAgKiBVc2UgYHNjcm9sbFRvRW5kKHthbmltYXRlZDogdHJ1ZX0pYCBmb3Igc21vb3RoIGFuaW1hdGVkIHNjcm9sbGluZyxcbiAgICogYHNjcm9sbFRvRW5kKHthbmltYXRlZDogZmFsc2V9KWAgZm9yIGltbWVkaWF0ZSBzY3JvbGxpbmcuXG4gICAqIElmIG5vIG9wdGlvbnMgYXJlIHBhc3NlZCwgYGFuaW1hdGVkYCBkZWZhdWx0cyB0byB0cnVlLlxuICAgKi9cbiAgc2Nyb2xsVG9FbmQ6IChvcHRpb25zPzogP3thbmltYXRlZD86IGJvb2xlYW4sIC4uLn0pID0+IHZvaWQgPSAoXG4gICAgb3B0aW9ucz86ID97YW5pbWF0ZWQ/OiBib29sZWFuLCAuLi59LFxuICApID0+IHtcbiAgICAvLyBEZWZhdWx0IHRvIHRydWVcbiAgICBjb25zdCBhbmltYXRlZCA9IChvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZWQpICE9PSBmYWxzZTtcbiAgICBpZiAodGhpcy5fc2Nyb2xsVmlld1JlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIENvbW1hbmRzLnNjcm9sbFRvRW5kKHRoaXMuX3Njcm9sbFZpZXdSZWYsIGFuaW1hdGVkKTtcbiAgfTtcblxuICAvKipcbiAgICogRGlzcGxheXMgdGhlIHNjcm9sbCBpbmRpY2F0b3JzIG1vbWVudGFyaWx5LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBmbGFzaFNjcm9sbEluZGljYXRvcnM6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuX3Njcm9sbFZpZXdSZWYgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBDb21tYW5kcy5mbGFzaFNjcm9sbEluZGljYXRvcnModGhpcy5fc2Nyb2xsVmlld1JlZik7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIGFzIHRoZSBjYWxsYmFjayB0byBvbkZvY3VzIGluIGEgVGV4dElucHV0cydcbiAgICogcGFyZW50IHZpZXcuIE5vdGUgdGhhdCBhbnkgbW9kdWxlIHVzaW5nIHRoaXMgbWl4aW4gbmVlZHMgdG8gcmV0dXJuXG4gICAqIHRoZSBwYXJlbnQgdmlldydzIHJlZiBpbiBnZXRTY3JvbGxWaWV3UmVmKCkgaW4gb3JkZXIgdG8gdXNlIHRoaXMgbWV0aG9kLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbm9kZUhhbmRsZSBUaGUgVGV4dElucHV0IG5vZGUgaGFuZGxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRpdGlvbmFsT2Zmc2V0IFRoZSBzY3JvbGwgdmlldydzIGJvdHRvbSBcImNvbnRlbnRJbnNldFwiLlxuICAgKiAgICAgICAgRGVmYXVsdCBpcyAwLlxuICAgKiBAcGFyYW0ge2Jvb2x9IHByZXZlbnROZWdhdGl2ZVNjcm9sbGluZyBXaGV0aGVyIHRvIGFsbG93IHB1bGxpbmcgdGhlIGNvbnRlbnRcbiAgICogICAgICAgIGRvd24gdG8gbWFrZSBpdCBtZWV0IHRoZSBrZXlib2FyZCdzIHRvcC4gRGVmYXVsdCBpcyBmYWxzZS5cbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQ6IDxUPihcbiAgICBub2RlSGFuZGxlOiBudW1iZXIgfCBSZWFjdC5FbGVtZW50UmVmPEhvc3RDb21wb25lbnQ8VD4+LFxuICAgIGFkZGl0aW9uYWxPZmZzZXQ/OiBudW1iZXIsXG4gICAgcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0PzogYm9vbGVhbixcbiAgKSA9PiB2b2lkID0gPFQ+KFxuICAgIG5vZGVIYW5kbGU6IG51bWJlciB8IFJlYWN0LkVsZW1lbnRSZWY8SG9zdENvbXBvbmVudDxUPj4sXG4gICAgYWRkaXRpb25hbE9mZnNldD86IG51bWJlcixcbiAgICBwcmV2ZW50TmVnYXRpdmVTY3JvbGxPZmZzZXQ/OiBib29sZWFuLFxuICApID0+IHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsU2Nyb2xsT2Zmc2V0ID0gYWRkaXRpb25hbE9mZnNldCB8fCAwO1xuICAgIHRoaXMuX3ByZXZlbnROZWdhdGl2ZVNjcm9sbE9mZnNldCA9ICEhcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0O1xuXG4gICAgaWYgKHRoaXMuX2lubmVyVmlld1JlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBub2RlSGFuZGxlID09PSAnbnVtYmVyJykge1xuICAgICAgVUlNYW5hZ2VyLm1lYXN1cmVMYXlvdXQoXG4gICAgICAgIG5vZGVIYW5kbGUsXG4gICAgICAgIFJlYWN0TmF0aXZlLmZpbmROb2RlSGFuZGxlKHRoaXMpLFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMuX3RleHRJbnB1dEZvY3VzRXJyb3IsXG4gICAgICAgIHRoaXMuX2lucHV0TWVhc3VyZUFuZFNjcm9sbFRvS2V5Ym9hcmQsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlSGFuZGxlLm1lYXN1cmVMYXlvdXQoXG4gICAgICAgIHRoaXMuX2lubmVyVmlld1JlZixcbiAgICAgICAgdGhpcy5faW5wdXRNZWFzdXJlQW5kU2Nyb2xsVG9LZXlib2FyZCxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXMgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLl90ZXh0SW5wdXRGb2N1c0Vycm9yLFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIHpvb20gdG8gYSBzcGVjaWZpYyByZWN0IGluIHRoZSBzY3JvbGx2aWV3LiBUaGUgYXJndW1lbnQgaGFzIHRoZSBzaGFwZVxuICAgKiB7eDogbnVtYmVyOyB5OiBudW1iZXI7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyBhbmltYXRlZDogYm9vbGVhbiA9IHRydWV9XG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbFJlc3BvbmRlclpvb21UbzogKFxuICAgIHJlY3Q6IHt8XG4gICAgICB4OiBudW1iZXIsXG4gICAgICB5OiBudW1iZXIsXG4gICAgICB3aWR0aDogbnVtYmVyLFxuICAgICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgICBhbmltYXRlZD86IGJvb2xlYW4sXG4gICAgfH0sXG4gICAgYW5pbWF0ZWQ/OiBib29sZWFuLCAvLyBkZXByZWNhdGVkLCBwdXQgdGhpcyBpbnNpZGUgdGhlIHJlY3QgYXJndW1lbnQgaW5zdGVhZFxuICApID0+IHZvaWQgPSAoXG4gICAgcmVjdDoge3xcbiAgICAgIHg6IG51bWJlcixcbiAgICAgIHk6IG51bWJlcixcbiAgICAgIHdpZHRoOiBudW1iZXIsXG4gICAgICBoZWlnaHQ6IG51bWJlcixcbiAgICAgIGFuaW1hdGVkPzogYm9vbGVhbixcbiAgICB8fSxcbiAgICBhbmltYXRlZD86IGJvb2xlYW4sIC8vIGRlcHJlY2F0ZWQsIHB1dCB0aGlzIGluc2lkZSB0aGUgcmVjdCBhcmd1bWVudCBpbnN0ZWFkXG4gICkgPT4ge1xuICAgIGludmFyaWFudChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycsICd6b29tVG9SZWN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xuICAgIGlmICgnYW5pbWF0ZWQnIGluIHJlY3QpIHtcbiAgICAgIHRoaXMuX2FuaW1hdGVkID0gcmVjdC5hbmltYXRlZDtcbiAgICAgIGRlbGV0ZSByZWN0LmFuaW1hdGVkO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFuaW1hdGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnYHNjcm9sbFJlc3BvbmRlclpvb21Ub2AgYGFuaW1hdGVkYCBhcmd1bWVudCBpcyBkZXByZWNhdGVkLiBVc2UgYG9wdGlvbnMuYW5pbWF0ZWRgIGluc3RlYWQnLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsVmlld1JlZiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIENvbW1hbmRzLnpvb21Ub1JlY3QodGhpcy5fc2Nyb2xsVmlld1JlZiwgcmVjdCwgYW5pbWF0ZWQgIT09IGZhbHNlKTtcbiAgfTtcblxuICBfdGV4dElucHV0Rm9jdXNFcnJvcigpIHtcbiAgICBjb25zb2xlLndhcm4oJ0Vycm9yIG1lYXN1cmluZyB0ZXh0IGZpZWxkLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjYWxjdWxhdGlvbnMgcGVyZm9ybWVkIGhlcmUgYXNzdW1lIHRoZSBzY3JvbGwgdmlldyB0YWtlcyB1cCB0aGUgZW50aXJlXG4gICAqIHNjcmVlbiAtIGV2ZW4gaWYgaGFzIHNvbWUgY29udGVudCBpbnNldC4gV2UgdGhlbiBtZWFzdXJlIHRoZSBvZmZzZXRzIG9mIHRoZVxuICAgKiBrZXlib2FyZCwgYW5kIGNvbXBlbnNhdGUgYm90aCBmb3IgdGhlIHNjcm9sbCB2aWV3J3MgXCJjb250ZW50SW5zZXRcIi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgUG9zaXRpb24gb2YgaW5wdXQgdy5yLnQuIHRhYmxlIHZpZXcuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgUG9zaXRpb24gb2YgaW5wdXQgdy5yLnQuIHRhYmxlIHZpZXcuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB0aGUgdGV4dCBpbnB1dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgdGhlIHRleHQgaW5wdXQuXG4gICAqL1xuICBfaW5wdXRNZWFzdXJlQW5kU2Nyb2xsVG9LZXlib2FyZDogKFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICB0b3A6IG51bWJlcixcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICApID0+IHZvaWQgPSAobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHtcbiAgICBsZXQga2V5Ym9hcmRTY3JlZW5ZID0gRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpLmhlaWdodDtcblxuICAgIGNvbnN0IHNjcm9sbFRleHRJbnB1dEludG9WaXNpYmxlUmVjdCA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9rZXlib2FyZE1ldHJpY3MgIT0gbnVsbCkge1xuICAgICAgICBrZXlib2FyZFNjcmVlblkgPSB0aGlzLl9rZXlib2FyZE1ldHJpY3Muc2NyZWVuWTtcbiAgICAgIH1cbiAgICAgIGxldCBzY3JvbGxPZmZzZXRZID1cbiAgICAgICAgdG9wIC0ga2V5Ym9hcmRTY3JlZW5ZICsgaGVpZ2h0ICsgdGhpcy5fYWRkaXRpb25hbFNjcm9sbE9mZnNldDtcblxuICAgICAgLy8gQnkgZGVmYXVsdCwgdGhpcyBjYW4gc2Nyb2xsIHdpdGggbmVnYXRpdmUgb2Zmc2V0LCBwdWxsaW5nIHRoZSBjb250ZW50XG4gICAgICAvLyBkb3duIHNvIHRoYXQgdGhlIHRhcmdldCBjb21wb25lbnQncyBib3R0b20gbWVldHMgdGhlIGtleWJvYXJkJ3MgdG9wLlxuICAgICAgLy8gSWYgcmVxdWVzdGVkIG90aGVyd2lzZSwgY2FwIHRoZSBvZmZzZXQgYXQgMCBtaW5pbXVtIHRvIGF2b2lkIGNvbnRlbnRcbiAgICAgIC8vIHNoaWZ0aW5nIGRvd24uXG4gICAgICBpZiAodGhpcy5fcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHNjcm9sbE9mZnNldFkgPSBNYXRoLm1heCgwLCBzY3JvbGxPZmZzZXRZKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2Nyb2xsVG8oe3g6IDAsIHk6IHNjcm9sbE9mZnNldFksIGFuaW1hdGVkOiB0cnVlfSk7XG5cbiAgICAgIHRoaXMuX2FkZGl0aW9uYWxTY3JvbGxPZmZzZXQgPSAwO1xuICAgICAgdGhpcy5fcHJldmVudE5lZ2F0aXZlU2Nyb2xsT2Zmc2V0ID0gZmFsc2U7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLl9rZXlib2FyZE1ldHJpY3MgPT0gbnVsbCkge1xuICAgICAgLy8gYF9rZXlib2FyZE1ldHJpY3NgIGlzIHNldCBpbnNpZGUgYHNjcm9sbFJlc3BvbmRlcktleWJvYXJkV2lsbFNob3dgIHdoaWNoXG4gICAgICAvLyBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBjYWxsZWQgYmVmb3JlIGBfaW5wdXRNZWFzdXJlQW5kU2Nyb2xsVG9LZXlib2FyZGAgYnV0IG5hdGl2ZSBoYXMgYWxyZWFkeSBzY2hlZHVsZWQgaXQuXG4gICAgICAvLyBJbiBjYXNlIGl0IHdhcyBub3QgY2FsbGVkIGJlZm9yZSBgX2lucHV0TWVhc3VyZUFuZFNjcm9sbFRvS2V5Ym9hcmRgLCB3ZSBwb3N0cG9uZSBzY3JvbGxpbmcgdG9cbiAgICAgIC8vIHRleHQgaW5wdXQuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2Nyb2xsVGV4dElucHV0SW50b1Zpc2libGVSZWN0KCk7XG4gICAgICB9LCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsVGV4dElucHV0SW50b1Zpc2libGVSZWN0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9nZXRLZXlGb3JJbmRleChpbmRleDogJEZsb3dGaXhNZSwgY2hpbGRBcnJheTogJEZsb3dGaXhNZSkge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRBcnJheVtpbmRleF07XG4gICAgcmV0dXJuIGNoaWxkICYmIGNoaWxkLmtleTtcbiAgfVxuXG4gIF91cGRhdGVBbmltYXRlZE5vZGVBdHRhY2htZW50KCkge1xuICAgIGlmICh0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudCkge1xuICAgICAgdGhpcy5fc2Nyb2xsQW5pbWF0ZWRWYWx1ZUF0dGFjaG1lbnQuZGV0YWNoKCk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMuc3RpY2t5SGVhZGVySW5kaWNlcyAmJlxuICAgICAgdGhpcy5wcm9wcy5zdGlja3lIZWFkZXJJbmRpY2VzLmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIHRoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWVBdHRhY2htZW50ID1cbiAgICAgICAgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5hdHRhY2hOYXRpdmVFdmVudChcbiAgICAgICAgICB0aGlzLl9zY3JvbGxWaWV3UmVmLFxuICAgICAgICAgICdvblNjcm9sbCcsXG4gICAgICAgICAgW3tuYXRpdmVFdmVudDoge2NvbnRlbnRPZmZzZXQ6IHt5OiB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlfX19XSxcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBfc2V0U3RpY2t5SGVhZGVyUmVmKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHJlZjogP1JlYWN0LkVsZW1lbnRSZWY8U3RpY2t5SGVhZGVyQ29tcG9uZW50VHlwZT4sXG4gICkge1xuICAgIGlmIChyZWYpIHtcbiAgICAgIHRoaXMuX3N0aWNreUhlYWRlclJlZnMuc2V0KGtleSwgcmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc3RpY2t5SGVhZGVyUmVmcy5kZWxldGUoa2V5KTtcbiAgICB9XG4gIH1cblxuICBfb25TdGlja3lIZWFkZXJMYXlvdXQoaW5kZXg6ICRGbG93Rml4TWUsIGV2ZW50OiAkRmxvd0ZpeE1lLCBrZXk6ICRGbG93Rml4TWUpIHtcbiAgICBjb25zdCB7c3RpY2t5SGVhZGVySW5kaWNlc30gPSB0aGlzLnByb3BzO1xuICAgIGlmICghc3RpY2t5SGVhZGVySW5kaWNlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZEFycmF5ID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoa2V5ICE9PSB0aGlzLl9nZXRLZXlGb3JJbmRleChpbmRleCwgY2hpbGRBcnJheSkpIHtcbiAgICAgIC8vIGlnbm9yZSBzdGFsZSBsYXlvdXQgdXBkYXRlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbGF5b3V0WSA9IGV2ZW50Lm5hdGl2ZUV2ZW50LmxheW91dC55O1xuICAgIHRoaXMuX2hlYWRlckxheW91dFlzLnNldChrZXksIGxheW91dFkpO1xuXG4gICAgY29uc3QgaW5kZXhPZkluZGV4ID0gc3RpY2t5SGVhZGVySW5kaWNlcy5pbmRleE9mKGluZGV4KTtcbiAgICBjb25zdCBwcmV2aW91c0hlYWRlckluZGV4ID0gc3RpY2t5SGVhZGVySW5kaWNlc1tpbmRleE9mSW5kZXggLSAxXTtcbiAgICBpZiAocHJldmlvdXNIZWFkZXJJbmRleCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBwcmV2aW91c0hlYWRlciA9IHRoaXMuX3N0aWNreUhlYWRlclJlZnMuZ2V0KFxuICAgICAgICB0aGlzLl9nZXRLZXlGb3JJbmRleChwcmV2aW91c0hlYWRlckluZGV4LCBjaGlsZEFycmF5KSxcbiAgICAgICk7XG4gICAgICBwcmV2aW91c0hlYWRlciAmJlxuICAgICAgICBwcmV2aW91c0hlYWRlci5zZXROZXh0SGVhZGVyWSAmJlxuICAgICAgICBwcmV2aW91c0hlYWRlci5zZXROZXh0SGVhZGVyWShsYXlvdXRZKTtcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlU2Nyb2xsID0gKGU6IFNjcm9sbEV2ZW50KSA9PiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5wcm9wcy5vblNjcm9sbCAmJlxuICAgICAgICB0aGlzLnByb3BzLnNjcm9sbEV2ZW50VGhyb3R0bGUgPT0gbnVsbCAmJlxuICAgICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2lvcydcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAnWW91IHNwZWNpZmllZCBgb25TY3JvbGxgIG9uIGEgPFNjcm9sbFZpZXc+IGJ1dCBub3QgJyArXG4gICAgICAgICAgICAnYHNjcm9sbEV2ZW50VGhyb3R0bGVgLiBZb3Ugd2lsbCBvbmx5IHJlY2VpdmUgb25lIGV2ZW50LiAnICtcbiAgICAgICAgICAgICdVc2luZyBgMTZgIHlvdSBnZXQgYWxsIHRoZSBldmVudHMgYnV0IGJlIGF3YXJlIHRoYXQgaXQgbWF5ICcgK1xuICAgICAgICAgICAgXCJjYXVzZSBmcmFtZSBkcm9wcywgdXNlIGEgYmlnZ2VyIG51bWJlciBpZiB5b3UgZG9uJ3QgbmVlZCBhcyBcIiArXG4gICAgICAgICAgICAnbXVjaCBwcmVjaXNpb24uJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fb2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyID0gdHJ1ZTtcbiAgICB0aGlzLnByb3BzLm9uU2Nyb2xsICYmIHRoaXMucHJvcHMub25TY3JvbGwoZSk7XG4gIH07XG5cbiAgX2hhbmRsZUxheW91dCA9IChlOiBMYXlvdXRFdmVudCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLmludmVydFN0aWNreUhlYWRlcnMgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2xheW91dEhlaWdodDogZS5uYXRpdmVFdmVudC5sYXlvdXQuaGVpZ2h0fSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm9uTGF5b3V0KSB7XG4gICAgICB0aGlzLnByb3BzLm9uTGF5b3V0KGUpO1xuICAgIH1cbiAgfTtcblxuICBfaGFuZGxlQ29udGVudE9uTGF5b3V0ID0gKGU6IExheW91dEV2ZW50KSA9PiB7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gZS5uYXRpdmVFdmVudC5sYXlvdXQ7XG4gICAgdGhpcy5wcm9wcy5vbkNvbnRlbnRTaXplQ2hhbmdlICYmXG4gICAgICB0aGlzLnByb3BzLm9uQ29udGVudFNpemVDaGFuZ2Uod2lkdGgsIGhlaWdodCk7XG4gIH07XG5cbiAgX3Njcm9sbFZpZXdSZWY6ID9SZWFjdC5FbGVtZW50UmVmPEhvc3RDb21wb25lbnQ8bWl4ZWQ+PiA9IG51bGw7XG5cbiAgX2lubmVyVmlld1JlZjogP1JlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFZpZXc+ID0gbnVsbDtcbiAgX3NldElubmVyVmlld1JlZiA9IHNldEFuZEZvcndhcmRSZWYoe1xuICAgIGdldEZvcndhcmRlZFJlZjogKCkgPT4gdGhpcy5wcm9wcy5pbm5lclZpZXdSZWYsXG4gICAgc2V0TG9jYWxSZWY6IHJlZiA9PiB7XG4gICAgICB0aGlzLl9pbm5lclZpZXdSZWYgPSByZWY7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFdhcm5pbmcsIHRoaXMgbWF5IGJlIGNhbGxlZCBzZXZlcmFsIHRpbWVzIGZvciBhIHNpbmdsZSBrZXlib2FyZCBvcGVuaW5nLlxuICAgKiBJdCdzIGJlc3QgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGluIHRoaXMgbWV0aG9kIGFuZCB0aGVuIHRha2UgYW55IGFjdGlvblxuICAgKiBhdCBhIGxhdGVyIHBvaW50IChlaXRoZXIgaW4gYGtleWJvYXJkRGlkU2hvd2Agb3Igb3RoZXIpLlxuICAgKlxuICAgKiBIZXJlJ3MgdGhlIG9yZGVyIHRoYXQgZXZlbnRzIG9jY3VyIGluOlxuICAgKiAtIGZvY3VzXG4gICAqIC0gd2lsbFNob3cge3N0YXJ0Q29vcmRpbmF0ZXMsIGVuZENvb3JkaW5hdGVzfSBzZXZlcmFsIHRpbWVzXG4gICAqIC0gZGlkU2hvdyBzZXZlcmFsIHRpbWVzXG4gICAqIC0gYmx1clxuICAgKiAtIHdpbGxIaWRlIHtzdGFydENvb3JkaW5hdGVzLCBlbmRDb29yZGluYXRlc30gc2V2ZXJhbCB0aW1lc1xuICAgKiAtIGRpZEhpZGUgc2V2ZXJhbCB0aW1lc1xuICAgKlxuICAgKiBUaGUgYFNjcm9sbFJlc3BvbmRlcmAgbW9kdWxlIGNhbGxiYWNrcyBmb3IgZWFjaCBvZiB0aGVzZSBldmVudHMuXG4gICAqIEV2ZW4gdGhvdWdoIGFueSB1c2VyIGNvdWxkIGhhdmUgZWFzaWx5IGxpc3RlbmVkIHRvIGtleWJvYXJkIGV2ZW50c1xuICAgKiB0aGVtc2VsdmVzLCB1c2luZyB0aGVzZSBgcHJvcHNgIGNhbGxiYWNrcyBlbnN1cmVzIHRoYXQgb3JkZXJpbmcgb2YgZXZlbnRzXG4gICAqIGlzIGNvbnNpc3RlbnQgLSBhbmQgbm90IGRlcGVuZGVudCBvbiB0aGUgb3JkZXIgdGhhdCB0aGUga2V5Ym9hcmQgZXZlbnRzIGFyZVxuICAgKiBzdWJzY3JpYmVkIHRvLiBUaGlzIG1hdHRlcnMgd2hlbiB0ZWxsaW5nIHRoZSBzY3JvbGwgdmlldyB0byBzY3JvbGwgdG8gd2hlcmVcbiAgICogdGhlIGtleWJvYXJkIGlzIGhlYWRlZCAtIHRoZSBzY3JvbGwgcmVzcG9uZGVyIGJldHRlciBoYXZlIGJlZW4gbm90aWZpZWQgb2ZcbiAgICogdGhlIGtleWJvYXJkIGRlc3RpbmF0aW9uIGJlZm9yZSBiZWluZyBpbnN0cnVjdGVkIHRvIHNjcm9sbCB0byB3aGVyZSB0aGVcbiAgICoga2V5Ym9hcmQgd2lsbCBiZS4gU3RpY2sgdG8gdGhlIGBTY3JvbGxSZXNwb25kZXJgIGNhbGxiYWNrcywgYW5kIGV2ZXJ5dGhpbmdcbiAgICogd2lsbCB3b3JrLlxuICAgKlxuICAgKiBXQVJOSU5HOiBUaGVzZSBjYWxsYmFja3Mgd2lsbCBmaXJlIGV2ZW4gaWYgYSBrZXlib2FyZCBpcyBkaXNwbGF5ZWQgaW4gYVxuICAgKiBkaWZmZXJlbnQgbmF2aWdhdGlvbiBwYW5lLiBGaWx0ZXIgb3V0IHRoZSBldmVudHMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAqIHJlbGV2YW50IHRvIHlvdS4gKEZvciBleGFtcGxlLCBvbmx5IGlmIHlvdSByZWNlaXZlIHRoZXNlIGNhbGxiYWNrcyBhZnRlclxuICAgKiB5b3UgaGFkIGV4cGxpY2l0bHkgZm9jdXNlZCBhIG5vZGUgZXRjKS5cbiAgICovXG5cbiAgc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmRXaWxsU2hvdzogKGU6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQgPSAoXG4gICAgZTogS2V5Ym9hcmRFdmVudCxcbiAgKSA9PiB7XG4gICAgdGhpcy5fa2V5Ym9hcmRNZXRyaWNzID0gZS5lbmRDb29yZGluYXRlcztcbiAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsU2hvdyAmJiB0aGlzLnByb3BzLm9uS2V5Ym9hcmRXaWxsU2hvdyhlKTtcbiAgfTtcblxuICBzY3JvbGxSZXNwb25kZXJLZXlib2FyZFdpbGxIaWRlOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZCA9IChcbiAgICBlOiBLZXlib2FyZEV2ZW50LFxuICApID0+IHtcbiAgICB0aGlzLl9rZXlib2FyZE1ldHJpY3MgPSBudWxsO1xuICAgIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxIaWRlICYmIHRoaXMucHJvcHMub25LZXlib2FyZFdpbGxIaWRlKGUpO1xuICB9O1xuXG4gIHNjcm9sbFJlc3BvbmRlcktleWJvYXJkRGlkU2hvdzogKGU6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQgPSAoXG4gICAgZTogS2V5Ym9hcmRFdmVudCxcbiAgKSA9PiB7XG4gICAgdGhpcy5fa2V5Ym9hcmRNZXRyaWNzID0gZS5lbmRDb29yZGluYXRlcztcbiAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmREaWRTaG93ICYmIHRoaXMucHJvcHMub25LZXlib2FyZERpZFNob3coZSk7XG4gIH07XG5cbiAgc2Nyb2xsUmVzcG9uZGVyS2V5Ym9hcmREaWRIaWRlOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZCA9IChcbiAgICBlOiBLZXlib2FyZEV2ZW50LFxuICApID0+IHtcbiAgICB0aGlzLl9rZXlib2FyZE1ldHJpY3MgPSBudWxsO1xuICAgIHRoaXMucHJvcHMub25LZXlib2FyZERpZEhpZGUgJiYgdGhpcy5wcm9wcy5vbktleWJvYXJkRGlkSGlkZShlKTtcbiAgfTtcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25Nb21lbnR1bVNjcm9sbEJlZ2luYCBldmVudC5cbiAgICovXG4gIF9oYW5kbGVNb21lbnR1bVNjcm9sbEJlZ2luOiAoZTogU2Nyb2xsRXZlbnQpID0+IHZvaWQgPSAoZTogU2Nyb2xsRXZlbnQpID0+IHtcbiAgICB0aGlzLl9sYXN0TW9tZW50dW1TY3JvbGxCZWdpblRpbWUgPSBnbG9iYWwucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4gJiYgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsQmVnaW4oZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uTW9tZW50dW1TY3JvbGxFbmRgIGV2ZW50LlxuICAgKi9cbiAgX2hhbmRsZU1vbWVudHVtU2Nyb2xsRW5kOiAoZTogU2Nyb2xsRXZlbnQpID0+IHZvaWQgPSAoZTogU2Nyb2xsRXZlbnQpID0+IHtcbiAgICBGcmFtZVJhdGVMb2dnZXIuZW5kU2Nyb2xsKCk7XG4gICAgdGhpcy5fbGFzdE1vbWVudHVtU2Nyb2xsRW5kVGltZSA9IGdsb2JhbC5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxFbmQgJiYgdGhpcy5wcm9wcy5vbk1vbWVudHVtU2Nyb2xsRW5kKGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBVbmZvcnR1bmF0ZWx5LCBgb25TY3JvbGxCZWdpbkRyYWdgIGFsc28gZmlyZXMgd2hlbiAqc3RvcHBpbmcqIHRoZSBzY3JvbGxcbiAgICogYW5pbWF0aW9uLCBhbmQgdGhlcmUncyBub3QgYW4gZWFzeSB3YXkgdG8gZGlzdGluZ3Vpc2ggYSBkcmFnIHZzLiBzdG9wcGluZ1xuICAgKiBtb21lbnR1bS5cbiAgICpcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TY3JvbGxCZWdpbkRyYWdgIGV2ZW50LlxuICAgKi9cbiAgX2hhbmRsZVNjcm9sbEJlZ2luRHJhZzogKGU6IFNjcm9sbEV2ZW50KSA9PiB2b2lkID0gKGU6IFNjcm9sbEV2ZW50KSA9PiB7XG4gICAgRnJhbWVSYXRlTG9nZ2VyLmJlZ2luU2Nyb2xsKCk7IC8vIFRPRE86IHRyYWNrIGFsbCBzY3JvbGxzIGFmdGVyIGltcGxlbWVudGluZyBvblNjcm9sbEVuZEFuaW1hdGlvblxuXG4gICAgaWYgKFxuICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyAmJlxuICAgICAgdGhpcy5wcm9wcy5rZXlib2FyZERpc21pc3NNb2RlID09PSAnb24tZHJhZydcbiAgICApIHtcbiAgICAgIGRpc21pc3NLZXlib2FyZCgpO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25TY3JvbGxCZWdpbkRyYWcgJiYgdGhpcy5wcm9wcy5vblNjcm9sbEJlZ2luRHJhZyhlKTtcbiAgfTtcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TY3JvbGxFbmREcmFnYCBldmVudC5cbiAgICovXG4gIF9oYW5kbGVTY3JvbGxFbmREcmFnOiAoZTogU2Nyb2xsRXZlbnQpID0+IHZvaWQgPSAoZTogU2Nyb2xsRXZlbnQpID0+IHtcbiAgICBjb25zdCB7dmVsb2NpdHl9ID0gZS5uYXRpdmVFdmVudDtcbiAgICAvLyAtIElmIHdlIGFyZSBhbmltYXRpbmcsIHRoZW4gdGhpcyBpcyBhIFwiZHJhZ1wiIHRoYXQgaXMgc3RvcHBpbmcgdGhlIHNjcm9sbHZpZXcgYW5kIG1vbWVudHVtIGVuZFxuICAgIC8vICAgd2lsbCBmaXJlLlxuICAgIC8vIC0gSWYgdmVsb2NpdHkgaXMgbm9uLXplcm8sIHRoZW4gdGhlIGludGVyYWN0aW9uIHdpbGwgc3RvcCB3aGVuIG1vbWVudHVtIHNjcm9sbCBlbmRzIG9yXG4gICAgLy8gICBhbm90aGVyIGRyYWcgc3RhcnRzIGFuZCBlbmRzLlxuICAgIC8vIC0gSWYgd2UgZG9uJ3QgZ2V0IHZlbG9jaXR5LCBiZXR0ZXIgdG8gc3RvcCB0aGUgaW50ZXJhY3Rpb24gdHdpY2UgdGhhbiBub3Qgc3RvcCBpdC5cbiAgICBpZiAoXG4gICAgICAhdGhpcy5faXNBbmltYXRpbmcoKSAmJlxuICAgICAgKCF2ZWxvY2l0eSB8fCAodmVsb2NpdHkueCA9PT0gMCAmJiB2ZWxvY2l0eS55ID09PSAwKSlcbiAgICApIHtcbiAgICAgIEZyYW1lUmF0ZUxvZ2dlci5lbmRTY3JvbGwoKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vblNjcm9sbEVuZERyYWcgJiYgdGhpcy5wcm9wcy5vblNjcm9sbEVuZERyYWcoZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciB0aGlzIGNsYXNzIHRoYXQgbGV0cyB1cyBxdWlja2x5IGRldGVybWluZSBpZiB0aGVcbiAgICogdmlldyBpcyBjdXJyZW50bHkgYW5pbWF0aW5nLiBUaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgdG8ga25vdyB3aGVuXG4gICAqIGEgdG91Y2ggaGFzIGp1c3Qgc3RhcnRlZCBvciBlbmRlZC5cbiAgICovXG4gIF9pc0FuaW1hdGluZzogKCkgPT4gYm9vbGVhbiA9ICgpID0+IHtcbiAgICBjb25zdCBub3cgPSBnbG9iYWwucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgdGltZVNpbmNlTGFzdE1vbWVudHVtU2Nyb2xsRW5kID1cbiAgICAgIG5vdyAtIHRoaXMuX2xhc3RNb21lbnR1bVNjcm9sbEVuZFRpbWU7XG4gICAgY29uc3QgaXNBbmltYXRpbmcgPVxuICAgICAgdGltZVNpbmNlTGFzdE1vbWVudHVtU2Nyb2xsRW5kIDwgSVNfQU5JTUFUSU5HX1RPVUNIX1NUQVJUX1RIUkVTSE9MRF9NUyB8fFxuICAgICAgdGhpcy5fbGFzdE1vbWVudHVtU2Nyb2xsRW5kVGltZSA8IHRoaXMuX2xhc3RNb21lbnR1bVNjcm9sbEJlZ2luVGltZTtcbiAgICByZXR1cm4gaXNBbmltYXRpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uUmVzcG9uZGVyR3JhbnRgIGV2ZW50LlxuICAgKi9cbiAgX2hhbmRsZVJlc3BvbmRlckdyYW50OiAoZTogUHJlc3NFdmVudCkgPT4gdm9pZCA9IChlOiBQcmVzc0V2ZW50KSA9PiB7XG4gICAgdGhpcy5fb2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyID0gZmFsc2U7XG4gICAgdGhpcy5wcm9wcy5vblJlc3BvbmRlckdyYW50ICYmIHRoaXMucHJvcHMub25SZXNwb25kZXJHcmFudChlKTtcbiAgICB0aGlzLl9iZWNhbWVSZXNwb25kZXJXaGlsZUFuaW1hdGluZyA9IHRoaXMuX2lzQW5pbWF0aW5nKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uUmVzcG9uZGVyUmVqZWN0YCBldmVudC5cbiAgICpcbiAgICogU29tZSBvdGhlciBlbGVtZW50IGlzIG5vdCB5aWVsZGluZyBpdHMgcm9sZSBhcyByZXNwb25kZXIuIE5vcm1hbGx5LCB3ZSdkXG4gICAqIGp1c3QgZGlzYWJsZSB0aGUgYFVJU2Nyb2xsVmlld2AsIGJ1dCBhIHRvdWNoIGhhcyBhbHJlYWR5IGJlZ2FuIG9uIGl0LCB0aGVcbiAgICogYFVJU2Nyb2xsVmlld2Agd2lsbCBub3QgYWNjZXB0IGJlaW5nIGRpc2FibGVkIGFmdGVyIHRoYXQuIFRoZSBlYXNpZXN0XG4gICAqIHNvbHV0aW9uIGZvciBub3cgaXMgdG8gYWNjZXB0IHRoZSBsaW1pdGF0aW9uIG9mIGRpc2FsbG93aW5nIHRoaXNcbiAgICogYWx0b2dldGhlci4gVG8gaW1wcm92ZSB0aGlzLCBmaW5kIGEgd2F5IHRvIGRpc2FibGUgdGhlIGBVSVNjcm9sbFZpZXdgIGFmdGVyXG4gICAqIGEgdG91Y2ggaGFzIGFscmVhZHkgc3RhcnRlZC5cbiAgICovXG4gIF9oYW5kbGVSZXNwb25kZXJSZWplY3Q6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25SZXNwb25kZXJSZWxlYXNlYCBldmVudC5cbiAgICovXG4gIF9oYW5kbGVSZXNwb25kZXJSZWxlYXNlOiAoZTogUHJlc3NFdmVudCkgPT4gdm9pZCA9IChlOiBQcmVzc0V2ZW50KSA9PiB7XG4gICAgdGhpcy5faXNUb3VjaGluZyA9IGUubmF0aXZlRXZlbnQudG91Y2hlcy5sZW5ndGggIT09IDA7XG4gICAgdGhpcy5wcm9wcy5vblJlc3BvbmRlclJlbGVhc2UgJiYgdGhpcy5wcm9wcy5vblJlc3BvbmRlclJlbGVhc2UoZSk7XG5cbiAgICBpZiAodHlwZW9mIGUudGFyZ2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnRGlkIG5vdCBleHBlY3QgZXZlbnQgdGFyZ2V0IHRvIGJlIGEgbnVtYmVyLiBTaG91bGQgaGF2ZSBiZWVuIGEgbmF0aXZlIGNvbXBvbmVudCcsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBCeSBkZWZhdWx0IHNjcm9sbCB2aWV3cyB3aWxsIHVuZm9jdXMgYSB0ZXh0RmllbGRcbiAgICAvLyBpZiBhbm90aGVyIHRvdWNoIG9jY3VycyBvdXRzaWRlIG9mIGl0XG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCA9IFRleHRJbnB1dFN0YXRlLmN1cnJlbnRseUZvY3VzZWRJbnB1dCgpO1xuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMua2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcyAhPT0gdHJ1ZSAmJlxuICAgICAgdGhpcy5wcm9wcy5rZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzICE9PSAnYWx3YXlzJyAmJlxuICAgICAgdGhpcy5fa2V5Ym9hcmRJc0Rpc21pc3NpYmxlKCkgJiZcbiAgICAgIGUudGFyZ2V0ICE9PSBjdXJyZW50bHlGb2N1c2VkVGV4dElucHV0ICYmXG4gICAgICAhdGhpcy5fb2JzZXJ2ZWRTY3JvbGxTaW5jZUJlY29taW5nUmVzcG9uZGVyICYmXG4gICAgICAhdGhpcy5fYmVjYW1lUmVzcG9uZGVyV2hpbGVBbmltYXRpbmdcbiAgICApIHtcbiAgICAgIFRleHRJbnB1dFN0YXRlLmJsdXJUZXh0SW5wdXQoY3VycmVudGx5Rm9jdXNlZFRleHRJbnB1dCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBXZSB3aWxsIGFsbG93IHRoZSBzY3JvbGwgdmlldyB0byBnaXZlIHVwIGl0cyBsb2NrIGlmZiBpdCBhY3F1aXJlZCB0aGUgbG9ja1xuICAgKiBkdXJpbmcgYW4gYW5pbWF0aW9uLiBUaGlzIGlzIGEgdmVyeSB1c2VmdWwgZGVmYXVsdCB0aGF0IGhhcHBlbnMgdG8gc2F0aXNmeVxuICAgKiBtYW55IGNvbW1vbiB1c2VyIGV4cGVyaWVuY2VzLlxuICAgKlxuICAgKiAtIFN0b3AgYSBzY3JvbGwgb24gdGhlIGxlZnQgZWRnZSwgdGhlbiB0dXJuIHRoYXQgaW50byBhbiBvdXRlciB2aWV3J3NcbiAgICogICBiYWNrc3dpcGUuXG4gICAqIC0gU3RvcCBhIHNjcm9sbCBtaWQtYm91bmNlIGF0IHRoZSB0b3AsIGNvbnRpbnVlIHB1bGxpbmcgdG8gaGF2ZSB0aGUgb3V0ZXJcbiAgICogICB2aWV3IGRpc21pc3MuXG4gICAqIC0gSG93ZXZlciwgd2l0aG91dCBjYXRjaGluZyB0aGUgc2Nyb2xsIHZpZXcgbWlkLWJvdW5jZSAod2hpbGUgaXQgaXNcbiAgICogICBtb3Rpb25sZXNzKSwgaWYgeW91IGRyYWcgZmFyIGVub3VnaCBmb3IgdGhlIHNjcm9sbCB2aWV3IHRvIGJlY29tZVxuICAgKiAgIHJlc3BvbmRlciAoYW5kIHRoZXJlZm9yZSBkcmFnIHRoZSBzY3JvbGwgdmlldyBhIGJpdCksIGFueSBiYWNrc3dpcGVcbiAgICogICBuYXZpZ2F0aW9uIG9mIGEgc3dpcGUgZ2VzdHVyZSBoaWdoZXIgaW4gdGhlIHZpZXcgaGllcmFyY2h5LCBzaG91bGQgYmVcbiAgICogICByZWplY3RlZC5cbiAgICovXG4gIF9oYW5kbGVSZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6ICgpID0+IGJvb2xlYW4gPSAoKSA9PiB7XG4gICAgcmV0dXJuICF0aGlzLl9vYnNlcnZlZFNjcm9sbFNpbmNlQmVjb21pbmdSZXNwb25kZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uU2Nyb2xsYCBldmVudC5cbiAgICovXG4gIF9oYW5kbGVTY3JvbGxTaG91bGRTZXRSZXNwb25kZXI6ICgpID0+IGJvb2xlYW4gPSAoKSA9PiB7XG4gICAgLy8gQWxsb3cgYW55IGV2ZW50IHRvdWNoIHBhc3MgdGhyb3VnaCBpZiB0aGUgZGVmYXVsdCBwYW4gcmVzcG9uZGVyIGlzIGRpc2FibGVkXG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZVNjcm9sbFZpZXdQYW5SZXNwb25kZXIgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2lzVG91Y2hpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1lcmVseSB0b3VjaCBzdGFydGluZyBpcyBub3Qgc3VmZmljaWVudCBmb3IgYSBzY3JvbGwgdmlldyB0byBiZWNvbWUgdGhlXG4gICAqIHJlc3BvbmRlci4gQmVpbmcgdGhlIFwicmVzcG9uZGVyXCIgbWVhbnMgdGhhdCB0aGUgdmVyeSBuZXh0IHRvdWNoIG1vdmUvZW5kXG4gICAqIGV2ZW50IHdpbGwgcmVzdWx0IGluIGFuIGFjdGlvbi9tb3ZlbWVudC5cbiAgICpcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcmAgZXZlbnQuXG4gICAqXG4gICAqIGBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyYCBpcyB1c2VkIHdoZW4gdGhlIG5leHQgbW92ZS9lbmQgd2lsbCB0cmlnZ2VyXG4gICAqIHNvbWUgVUkgbW92ZW1lbnQvYWN0aW9uLCBidXQgd2hlbiB5b3Ugd2FudCB0byB5aWVsZCBwcmlvcml0eSB0byB2aWV3c1xuICAgKiBuZXN0ZWQgaW5zaWRlIG9mIHRoZSB2aWV3LlxuICAgKlxuICAgKiBUaGVyZSBtYXkgYmUgc29tZSBjYXNlcyB3aGVyZSBzY3JvbGwgdmlld3MgYWN0dWFsbHkgc2hvdWxkIHJldHVybiBgdHJ1ZWBcbiAgICogZnJvbSBgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcmA6IEFueSB0aW1lIHdlIGFyZSBkZXRlY3RpbmcgYSBzdGFuZGFyZCB0YXBcbiAgICogdGhhdCBnaXZlcyBwcmlvcml0eSB0byBuZXN0ZWQgdmlld3MuXG4gICAqXG4gICAqIC0gSWYgYSBzaW5nbGUgdGFwIG9uIHRoZSBzY3JvbGwgdmlldyB0cmlnZ2VycyBhbiBhY3Rpb24gc3VjaCBhc1xuICAgKiAgIHJlY2VudGVyaW5nIGEgbWFwIHN0eWxlIHZpZXcgeWV0IHdhbnRzIHRvIGdpdmUgcHJpb3JpdHkgdG8gaW50ZXJhY3Rpb25cbiAgICogICB2aWV3cyBpbnNpZGUgKHN1Y2ggYXMgZHJvcHBlZCBwaW5zIG9yIGxhYmVscyksIHRoZW4gd2Ugd291bGQgcmV0dXJuIHRydWVcbiAgICogICBmcm9tIHRoaXMgbWV0aG9kIHdoZW4gdGhlcmUgaXMgYSBzaW5nbGUgdG91Y2guXG4gICAqXG4gICAqIC0gU2ltaWxhciB0byB0aGUgcHJldmlvdXMgY2FzZSwgaWYgYSB0d28gZmluZ2VyIFwidGFwXCIgc2hvdWxkIHRyaWdnZXIgYVxuICAgKiAgIHpvb20sIHdlIHdvdWxkIGNoZWNrIHRoZSBgdG91Y2hlc2AgY291bnQsIGFuZCBpZiBgPj0gMmAsIHdlIHdvdWxkIHJldHVyblxuICAgKiAgIHRydWUuXG4gICAqXG4gICAqL1xuICBfaGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IChlOiBQcmVzc0V2ZW50KSA9PiBib29sZWFuID0gKFxuICAgIGU6IFByZXNzRXZlbnQsXG4gICkgPT4ge1xuICAgIC8vIEFsbG93IGFueSBldmVudCB0b3VjaCBwYXNzIHRocm91Z2ggaWYgdGhlIGRlZmF1bHQgcGFuIHJlc3BvbmRlciBpcyBkaXNhYmxlZFxuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVTY3JvbGxWaWV3UGFuUmVzcG9uZGVyID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZElucHV0ID0gVGV4dElucHV0U3RhdGUuY3VycmVudGx5Rm9jdXNlZElucHV0KCk7XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLmtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgPT09ICdoYW5kbGVkJyAmJlxuICAgICAgdGhpcy5fa2V5Ym9hcmRJc0Rpc21pc3NpYmxlKCkgJiZcbiAgICAgIGUudGFyZ2V0ICE9PSBjdXJyZW50bHlGb2N1c2VkSW5wdXRcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZXJlIGFyZSB0aW1lcyB3aGVuIHRoZSBzY3JvbGwgdmlldyB3YW50cyB0byBiZWNvbWUgdGhlIHJlc3BvbmRlclxuICAgKiAobWVhbmluZyByZXNwb25kIHRvIHRoZSBuZXh0IGltbWVkaWF0ZSBgdG91Y2hTdGFydC90b3VjaEVuZGApLCBpbiBhIHdheVxuICAgKiB0aGF0ICpkb2Vzbid0KiBnaXZlIHByaW9yaXR5IHRvIG5lc3RlZCB2aWV3cyAoaGVuY2UgdGhlIGNhcHR1cmUgcGhhc2UpOlxuICAgKlxuICAgKiAtIEN1cnJlbnRseSBhbmltYXRpbmcuXG4gICAqIC0gVGFwcGluZyBhbnl3aGVyZSB0aGF0IGlzIG5vdCBhIHRleHQgaW5wdXQsIHdoaWxlIHRoZSBrZXlib2FyZCBpc1xuICAgKiAgIHVwICh3aGljaCBzaG91bGQgZGlzbWlzcyB0aGUga2V5Ym9hcmQpLlxuICAgKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZWAgZXZlbnQuXG4gICAqL1xuICBfaGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiAoZTogUHJlc3NFdmVudCkgPT4gYm9vbGVhbiA9IChcbiAgICBlOiBQcmVzc0V2ZW50LFxuICApID0+IHtcbiAgICAvLyBUaGUgc2Nyb2xsIHZpZXcgc2hvdWxkIHJlY2VpdmUgdGFwcyBpbnN0ZWFkIG9mIGl0cyBkZXNjZW5kYW50cyBpZjpcbiAgICAvLyAqIGl0IGlzIGFscmVhZHkgYW5pbWF0aW5nL2RlY2VsZXJhdGluZ1xuICAgIGlmICh0aGlzLl9pc0FuaW1hdGluZygpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBbGxvdyBhbnkgZXZlbnQgdG91Y2ggcGFzcyB0aHJvdWdoIGlmIHRoZSBkZWZhdWx0IHBhbiByZXNwb25kZXIgaXMgZGlzYWJsZWRcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlU2Nyb2xsVmlld1BhblJlc3BvbmRlciA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vICogdGhlIGtleWJvYXJkIGlzIHVwLCBrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzIGlzICduZXZlcicgKHRoZSBkZWZhdWx0KSxcbiAgICAvLyBhbmQgYSBuZXcgdG91Y2ggc3RhcnRzIHdpdGggYSBub24tdGV4dGlucHV0IHRhcmdldCAoaW4gd2hpY2ggY2FzZSB0aGVcbiAgICAvLyBmaXJzdCB0YXAgc2hvdWxkIGJlIHNlbnQgdG8gdGhlIHNjcm9sbCB2aWV3IGFuZCBkaXNtaXNzIHRoZSBrZXlib2FyZCxcbiAgICAvLyB0aGVuIHRoZSBzZWNvbmQgdGFwIGdvZXMgdG8gdGhlIGFjdHVhbCBpbnRlcmlvciB2aWV3KVxuICAgIGNvbnN0IHtrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qga2V5Ym9hcmROZXZlclBlcnNpc3RUYXBzID1cbiAgICAgICFrZXlib2FyZFNob3VsZFBlcnNpc3RUYXBzIHx8IGtleWJvYXJkU2hvdWxkUGVyc2lzdFRhcHMgPT09ICduZXZlcic7XG5cbiAgICBpZiAodHlwZW9mIGUudGFyZ2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnRGlkIG5vdCBleHBlY3QgZXZlbnQgdGFyZ2V0IHRvIGJlIGEgbnVtYmVyLiBTaG91bGQgaGF2ZSBiZWVuIGEgbmF0aXZlIGNvbXBvbmVudCcsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBrZXlib2FyZE5ldmVyUGVyc2lzdFRhcHMgJiZcbiAgICAgIHRoaXMuX2tleWJvYXJkSXNEaXNtaXNzaWJsZSgpICYmXG4gICAgICBlLnRhcmdldCAhPSBudWxsICYmXG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuICAgICAgIVRleHRJbnB1dFN0YXRlLmlzVGV4dElucHV0KGUudGFyZ2V0KVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEbyB3ZSBjb25zaWRlciB0aGVyZSB0byBiZSBhIGRpc21pc3NpYmxlIHNvZnQta2V5Ym9hcmQgb3Blbj9cbiAgICovXG4gIF9rZXlib2FyZElzRGlzbWlzc2libGU6ICgpID0+IGJvb2xlYW4gPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudGx5Rm9jdXNlZElucHV0ID0gVGV4dElucHV0U3RhdGUuY3VycmVudGx5Rm9jdXNlZElucHV0KCk7XG5cbiAgICAvLyBXZSBjYW5ub3QgZGlzbWlzcyB0aGUga2V5Ym9hcmQgd2l0aG91dCBhbiBpbnB1dCB0byBibHVyLCBldmVuIGlmIGEgc29mdFxuICAgIC8vIGtleWJvYXJkIGlzIG9wZW4gKGUuZy4gd2hlbiBrZXlib2FyZCBpcyBvcGVuIGR1ZSB0byBhIG5hdGl2ZSBjb21wb25lbnRcbiAgICAvLyBub3QgcGFydGljaXBhdGluZyBpbiBUZXh0SW5wdXRTdGF0ZSkuIEl0J3MgYWxzbyBwb3NzaWJsZSB0aGF0IHRoZVxuICAgIC8vIGN1cnJlbnRseSBmb2N1c2VkIGlucHV0IGlzbid0IGEgVGV4dElucHV0IChzdWNoIGFzIGJ5IGNhbGxpbmcgcmVmLmZvY3VzXG4gICAgLy8gb24gYSBub24tVGV4dElucHV0KS5cbiAgICBjb25zdCBoYXNGb2N1c2VkVGV4dElucHV0ID1cbiAgICAgIGN1cnJlbnRseUZvY3VzZWRJbnB1dCAhPSBudWxsICYmXG4gICAgICBUZXh0SW5wdXRTdGF0ZS5pc1RleHRJbnB1dChjdXJyZW50bHlGb2N1c2VkSW5wdXQpO1xuXG4gICAgLy8gRXZlbiBpZiBhbiBpbnB1dCBpcyBmb2N1c2VkLCB3ZSBtYXkgbm90IGhhdmUgYSBrZXlib2FyZCB0byBkaXNtaXNzLiBFLmdcbiAgICAvLyB3aGVuIHVzaW5nIGEgcGh5c2ljYWwga2V5Ym9hcmQuIEVuc3VyZSB3ZSBoYXZlIGFuIGV2ZW50IGZvciBhbiBvcGVuZWRcbiAgICAvLyBrZXlib2FyZCwgZXhjZXB0IG9uIEFuZHJvaWQgd2hlcmUgc2V0dGluZyB3aW5kb3dTb2Z0SW5wdXRNb2RlIHRvXG4gICAgLy8gYWRqdXN0Tm9uZSBsZWFkcyB0byBtaXNzaW5nIGtleWJvYXJkIGV2ZW50cy5cbiAgICBjb25zdCBzb2Z0S2V5Ym9hcmRNYXlCZU9wZW4gPVxuICAgICAgdGhpcy5fa2V5Ym9hcmRNZXRyaWNzICE9IG51bGwgfHwgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJztcblxuICAgIHJldHVybiBoYXNGb2N1c2VkVGV4dElucHV0ICYmIHNvZnRLZXlib2FyZE1heUJlT3BlbjtcbiAgfTtcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25Ub3VjaEVuZGAgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UHJlc3NFdmVudH0gZSBFdmVudC5cbiAgICovXG4gIF9oYW5kbGVUb3VjaEVuZDogKGU6IFByZXNzRXZlbnQpID0+IHZvaWQgPSAoZTogUHJlc3NFdmVudCkgPT4ge1xuICAgIGNvbnN0IG5hdGl2ZUV2ZW50ID0gZS5uYXRpdmVFdmVudDtcbiAgICB0aGlzLl9pc1RvdWNoaW5nID0gbmF0aXZlRXZlbnQudG91Y2hlcy5sZW5ndGggIT09IDA7XG4gICAgdGhpcy5wcm9wcy5vblRvdWNoRW5kICYmIHRoaXMucHJvcHMub25Ub3VjaEVuZChlKTtcbiAgfTtcblxuICAvKipcbiAgICogSW52b2tlIHRoaXMgZnJvbSBhbiBgb25Ub3VjaENhbmNlbGAgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UHJlc3NFdmVudH0gZSBFdmVudC5cbiAgICovXG4gIF9oYW5kbGVUb3VjaENhbmNlbDogKGU6IFByZXNzRXZlbnQpID0+IHZvaWQgPSAoZTogUHJlc3NFdmVudCkgPT4ge1xuICAgIHRoaXMuX2lzVG91Y2hpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnByb3BzLm9uVG91Y2hDYW5jZWwgJiYgdGhpcy5wcm9wcy5vblRvdWNoQ2FuY2VsKGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhpcyBmcm9tIGFuIGBvblRvdWNoU3RhcnRgIGV2ZW50LlxuICAgKlxuICAgKiBTaW5jZSB3ZSBrbm93IHRoYXQgdGhlIGBTaW1wbGVFdmVudFBsdWdpbmAgb2NjdXJzIGxhdGVyIGluIHRoZSBwbHVnaW5cbiAgICogb3JkZXIsIGFmdGVyIGBSZXNwb25kZXJFdmVudFBsdWdpbmAsIHdlIGNhbiBkZXRlY3QgdGhhdCB3ZSB3ZXJlICpub3QqXG4gICAqIHBlcm1pdHRlZCB0byBiZSB0aGUgcmVzcG9uZGVyIChwcmVzdW1hYmx5IGJlY2F1c2UgYSBjb250YWluZWQgdmlldyBiZWNhbWVcbiAgICogcmVzcG9uZGVyKS4gVGhlIGBvblJlc3BvbmRlclJlamVjdGAgd29uJ3QgZmlyZSBpbiB0aGF0IGNhc2UgLSBpdCBvbmx5XG4gICAqIGZpcmVzIHdoZW4gYSAqY3VycmVudCogcmVzcG9uZGVyIHJlamVjdHMgb3VyIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7UHJlc3NFdmVudH0gZSBUb3VjaCBTdGFydCBldmVudC5cbiAgICovXG4gIF9oYW5kbGVUb3VjaFN0YXJ0OiAoZTogUHJlc3NFdmVudCkgPT4gdm9pZCA9IChlOiBQcmVzc0V2ZW50KSA9PiB7XG4gICAgdGhpcy5faXNUb3VjaGluZyA9IHRydWU7XG4gICAgdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQgJiYgdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQoZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEludm9rZSB0aGlzIGZyb20gYW4gYG9uVG91Y2hNb3ZlYCBldmVudC5cbiAgICpcbiAgICogU2luY2Ugd2Uga25vdyB0aGF0IHRoZSBgU2ltcGxlRXZlbnRQbHVnaW5gIG9jY3VycyBsYXRlciBpbiB0aGUgcGx1Z2luXG4gICAqIG9yZGVyLCBhZnRlciBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gLCB3ZSBjYW4gZGV0ZWN0IHRoYXQgd2Ugd2VyZSAqbm90KlxuICAgKiBwZXJtaXR0ZWQgdG8gYmUgdGhlIHJlc3BvbmRlciAocHJlc3VtYWJseSBiZWNhdXNlIGEgY29udGFpbmVkIHZpZXcgYmVjYW1lXG4gICAqIHJlc3BvbmRlcikuIFRoZSBgb25SZXNwb25kZXJSZWplY3RgIHdvbid0IGZpcmUgaW4gdGhhdCBjYXNlIC0gaXQgb25seVxuICAgKiBmaXJlcyB3aGVuIGEgKmN1cnJlbnQqIHJlc3BvbmRlciByZWplY3RzIG91ciByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1ByZXNzRXZlbnR9IGUgVG91Y2ggU3RhcnQgZXZlbnQuXG4gICAqL1xuICBfaGFuZGxlVG91Y2hNb3ZlOiAoZTogUHJlc3NFdmVudCkgPT4gdm9pZCA9IChlOiBQcmVzc0V2ZW50KSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vblRvdWNoTW92ZSAmJiB0aGlzLnByb3BzLm9uVG91Y2hNb3ZlKGUpO1xuICB9O1xuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHwgUmVhY3QuRWxlbWVudDxzdHJpbmc+IHtcbiAgICBjb25zdCBbTmF0aXZlRGlyZWN0aW9uYWxTY3JvbGxWaWV3LCBOYXRpdmVEaXJlY3Rpb25hbFNjcm9sbENvbnRlbnRWaWV3XSA9XG4gICAgICB0aGlzLnByb3BzLmhvcml6b250YWwgPT09IHRydWVcbiAgICAgICAgPyBOYXRpdmVIb3Jpem9udGFsU2Nyb2xsVmlld1R1cGxlXG4gICAgICAgIDogTmF0aXZlVmVydGljYWxTY3JvbGxWaWV3VHVwbGU7XG5cbiAgICBjb25zdCBjb250ZW50Q29udGFpbmVyU3R5bGUgPSBbXG4gICAgICB0aGlzLnByb3BzLmhvcml6b250YWwgPT09IHRydWUgJiYgc3R5bGVzLmNvbnRlbnRDb250YWluZXJIb3Jpem9udGFsLFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50Q29udGFpbmVyU3R5bGUsXG4gICAgXTtcbiAgICBpZiAoX19ERVZfXyAmJiB0aGlzLnByb3BzLnN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gZmxhdHRlblN0eWxlKHRoaXMucHJvcHMuc3R5bGUpO1xuICAgICAgY29uc3QgY2hpbGRMYXlvdXRQcm9wcyA9IFsnYWxpZ25JdGVtcycsICdqdXN0aWZ5Q29udGVudCddLmZpbHRlcihcbiAgICAgICAgcHJvcCA9PiBzdHlsZSAmJiBzdHlsZVtwcm9wXSAhPT0gdW5kZWZpbmVkLFxuICAgICAgKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgY2hpbGRMYXlvdXRQcm9wcy5sZW5ndGggPT09IDAsXG4gICAgICAgICdTY3JvbGxWaWV3IGNoaWxkIGxheW91dCAoJyArXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoY2hpbGRMYXlvdXRQcm9wcykgK1xuICAgICAgICAgICcpIG11c3QgYmUgYXBwbGllZCB0aHJvdWdoIHRoZSBjb250ZW50Q29udGFpbmVyU3R5bGUgcHJvcC4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb250ZW50U2l6ZUNoYW5nZVByb3BzID1cbiAgICAgIHRoaXMucHJvcHMub25Db250ZW50U2l6ZUNoYW5nZSA9PSBudWxsXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IHtcbiAgICAgICAgICAgIG9uTGF5b3V0OiB0aGlzLl9oYW5kbGVDb250ZW50T25MYXlvdXQsXG4gICAgICAgICAgfTtcblxuICAgIGNvbnN0IHtzdGlja3lIZWFkZXJJbmRpY2VzfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIGlmIChzdGlja3lIZWFkZXJJbmRpY2VzICE9IG51bGwgJiYgc3RpY2t5SGVhZGVySW5kaWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBjaGlsZEFycmF5ID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgY2hpbGRyZW4gPSBjaGlsZEFycmF5Lm1hcCgoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4T2ZJbmRleCA9IGNoaWxkID8gc3RpY2t5SGVhZGVySW5kaWNlcy5pbmRleE9mKGluZGV4KSA6IC0xO1xuICAgICAgICBpZiAoaW5kZXhPZkluZGV4ID4gLTEpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gc3RpY2t5SGVhZGVySW5kaWNlc1tpbmRleE9mSW5kZXggKyAxXTtcbiAgICAgICAgICBjb25zdCBTdGlja3lIZWFkZXJDb21wb25lbnQgPVxuICAgICAgICAgICAgdGhpcy5wcm9wcy5TdGlja3lIZWFkZXJDb21wb25lbnQgfHwgU2Nyb2xsVmlld1N0aWNreUhlYWRlcjtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFN0aWNreUhlYWRlckNvbXBvbmVudFxuICAgICAgICAgICAgICBrZXk9e2tleX1cbiAgICAgICAgICAgICAgbmF0aXZlSUQ9eydTdGlja3lIZWFkZXItJyArIGtleX0gLyogVE9ETzogVDY4MjU4ODQ2LiAqL1xuICAgICAgICAgICAgICByZWY9e3JlZiA9PiB0aGlzLl9zZXRTdGlja3lIZWFkZXJSZWYoa2V5LCByZWYpfVxuICAgICAgICAgICAgICBuZXh0SGVhZGVyTGF5b3V0WT17dGhpcy5faGVhZGVyTGF5b3V0WXMuZ2V0KFxuICAgICAgICAgICAgICAgIHRoaXMuX2dldEtleUZvckluZGV4KG5leHRJbmRleCwgY2hpbGRBcnJheSksXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIG9uTGF5b3V0PXtldmVudCA9PiB0aGlzLl9vblN0aWNreUhlYWRlckxheW91dChpbmRleCwgZXZlbnQsIGtleSl9XG4gICAgICAgICAgICAgIHNjcm9sbEFuaW1hdGVkVmFsdWU9e3RoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWV9XG4gICAgICAgICAgICAgIGludmVydGVkPXt0aGlzLnByb3BzLmludmVydFN0aWNreUhlYWRlcnN9XG4gICAgICAgICAgICAgIGhpZGRlbk9uU2Nyb2xsPXt0aGlzLnByb3BzLnN0aWNreUhlYWRlckhpZGRlbk9uU2Nyb2xsfVxuICAgICAgICAgICAgICBzY3JvbGxWaWV3SGVpZ2h0PXt0aGlzLnN0YXRlLmxheW91dEhlaWdodH0+XG4gICAgICAgICAgICAgIHtjaGlsZH1cbiAgICAgICAgICAgIDwvU3RpY2t5SGVhZGVyQ29tcG9uZW50PlxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2hpbGRyZW4gPSAoXG4gICAgICA8U2Nyb2xsVmlld0NvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuaG9yaXpvbnRhbCA9PT0gdHJ1ZSA/IEhPUklaT05UQUwgOiBWRVJUSUNBTH0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvU2Nyb2xsVmlld0NvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGNvbnN0IGhhc1N0aWNreUhlYWRlcnMgPVxuICAgICAgQXJyYXkuaXNBcnJheShzdGlja3lIZWFkZXJJbmRpY2VzKSAmJiBzdGlja3lIZWFkZXJJbmRpY2VzLmxlbmd0aCA+IDA7XG5cbiAgICBjb25zdCBjb250ZW50Q29udGFpbmVyID0gKFxuICAgICAgPE5hdGl2ZURpcmVjdGlvbmFsU2Nyb2xsQ29udGVudFZpZXdcbiAgICAgICAgey4uLmNvbnRlbnRTaXplQ2hhbmdlUHJvcHN9XG4gICAgICAgIHJlZj17dGhpcy5fc2V0SW5uZXJWaWV3UmVmfVxuICAgICAgICBzdHlsZT17Y29udGVudENvbnRhaW5lclN0eWxlfVxuICAgICAgICByZW1vdmVDbGlwcGVkU3Vidmlld3M9e1xuICAgICAgICAgIC8vIFN1YnZpZXcgY2xpcHBpbmcgY2F1c2VzIGlzc3VlcyB3aXRoIHN0aWNreSBoZWFkZXJzIG9uIEFuZHJvaWQgYW5kXG4gICAgICAgICAgLy8gd291bGQgYmUgaGFyZCB0byBmaXggcHJvcGVybHkgaW4gYSBwZXJmb3JtYW50IHdheS5cbiAgICAgICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnICYmIGhhc1N0aWNreUhlYWRlcnNcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogdGhpcy5wcm9wcy5yZW1vdmVDbGlwcGVkU3Vidmlld3NcbiAgICAgICAgfVxuICAgICAgICBjb2xsYXBzYWJsZT17ZmFsc2V9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L05hdGl2ZURpcmVjdGlvbmFsU2Nyb2xsQ29udGVudFZpZXc+XG4gICAgKTtcblxuICAgIGNvbnN0IGFsd2F5c0JvdW5jZUhvcml6b250YWwgPVxuICAgICAgdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VIb3Jpem9udGFsICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLnByb3BzLmFsd2F5c0JvdW5jZUhvcml6b250YWxcbiAgICAgICAgOiB0aGlzLnByb3BzLmhvcml6b250YWw7XG5cbiAgICBjb25zdCBhbHdheXNCb3VuY2VWZXJ0aWNhbCA9XG4gICAgICB0aGlzLnByb3BzLmFsd2F5c0JvdW5jZVZlcnRpY2FsICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLnByb3BzLmFsd2F5c0JvdW5jZVZlcnRpY2FsXG4gICAgICAgIDogIXRoaXMucHJvcHMuaG9yaXpvbnRhbDtcblxuICAgIGNvbnN0IGJhc2VTdHlsZSA9XG4gICAgICB0aGlzLnByb3BzLmhvcml6b250YWwgPT09IHRydWVcbiAgICAgICAgPyBzdHlsZXMuYmFzZUhvcml6b250YWxcbiAgICAgICAgOiBzdHlsZXMuYmFzZVZlcnRpY2FsO1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIGFsd2F5c0JvdW5jZUhvcml6b250YWwsXG4gICAgICBhbHdheXNCb3VuY2VWZXJ0aWNhbCxcbiAgICAgIHN0eWxlOiBTdHlsZVNoZWV0LmNvbXBvc2UoYmFzZVN0eWxlLCB0aGlzLnByb3BzLnN0eWxlKSxcbiAgICAgIC8vIE92ZXJyaWRlIHRoZSBvbkNvbnRlbnRTaXplQ2hhbmdlIGZyb20gcHJvcHMsIHNpbmNlIHRoaXMgZXZlbnQgY2FuXG4gICAgICAvLyBidWJibGUgdXAgZnJvbSBUZXh0SW5wdXRzXG4gICAgICBvbkNvbnRlbnRTaXplQ2hhbmdlOiBudWxsLFxuICAgICAgb25MYXlvdXQ6IHRoaXMuX2hhbmRsZUxheW91dCxcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxCZWdpbjogdGhpcy5faGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbixcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxFbmQ6IHRoaXMuX2hhbmRsZU1vbWVudHVtU2Nyb2xsRW5kLFxuICAgICAgb25SZXNwb25kZXJHcmFudDogdGhpcy5faGFuZGxlUmVzcG9uZGVyR3JhbnQsXG4gICAgICBvblJlc3BvbmRlclJlamVjdDogdGhpcy5faGFuZGxlUmVzcG9uZGVyUmVqZWN0LFxuICAgICAgb25SZXNwb25kZXJSZWxlYXNlOiB0aGlzLl9oYW5kbGVSZXNwb25kZXJSZWxlYXNlLFxuICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IHRoaXMuX2hhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCxcbiAgICAgIG9uU2Nyb2xsQmVnaW5EcmFnOiB0aGlzLl9oYW5kbGVTY3JvbGxCZWdpbkRyYWcsXG4gICAgICBvblNjcm9sbEVuZERyYWc6IHRoaXMuX2hhbmRsZVNjcm9sbEVuZERyYWcsXG4gICAgICBvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlcjogdGhpcy5faGFuZGxlU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyLFxuICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcjogdGhpcy5faGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXIsXG4gICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTpcbiAgICAgICAgdGhpcy5faGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlLFxuICAgICAgb25Ub3VjaEVuZDogdGhpcy5faGFuZGxlVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZTogdGhpcy5faGFuZGxlVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgb25Ub3VjaENhbmNlbDogdGhpcy5faGFuZGxlVG91Y2hDYW5jZWwsXG4gICAgICBvblNjcm9sbDogdGhpcy5faGFuZGxlU2Nyb2xsLFxuICAgICAgc2Nyb2xsRXZlbnRUaHJvdHRsZTogaGFzU3RpY2t5SGVhZGVyc1xuICAgICAgICA/IDFcbiAgICAgICAgOiB0aGlzLnByb3BzLnNjcm9sbEV2ZW50VGhyb3R0bGUsXG4gICAgICBzZW5kTW9tZW50dW1FdmVudHM6XG4gICAgICAgIHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEJlZ2luIHx8IHRoaXMucHJvcHMub25Nb21lbnR1bVNjcm9sbEVuZFxuICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgIDogZmFsc2UsXG4gICAgICAvLyBkZWZhdWx0IHRvIHRydWVcbiAgICAgIHNuYXBUb1N0YXJ0OiB0aGlzLnByb3BzLnNuYXBUb1N0YXJ0ICE9PSBmYWxzZSxcbiAgICAgIC8vIGRlZmF1bHQgdG8gdHJ1ZVxuICAgICAgc25hcFRvRW5kOiB0aGlzLnByb3BzLnNuYXBUb0VuZCAhPT0gZmFsc2UsXG4gICAgICAvLyBwYWdpbmdFbmFibGVkIGlzIG92ZXJyaWRkZW4gYnkgc25hcFRvSW50ZXJ2YWwgLyBzbmFwVG9PZmZzZXRzXG4gICAgICBwYWdpbmdFbmFibGVkOiBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICAvLyBvbiBpT1MsIHBhZ2luZ0VuYWJsZWQgbXVzdCBiZSBzZXQgdG8gZmFsc2UgdG8gaGF2ZSBzbmFwVG9JbnRlcnZhbCAvIHNuYXBUb09mZnNldHMgd29ya1xuICAgICAgICBpb3M6XG4gICAgICAgICAgdGhpcy5wcm9wcy5wYWdpbmdFbmFibGVkID09PSB0cnVlICYmXG4gICAgICAgICAgdGhpcy5wcm9wcy5zbmFwVG9JbnRlcnZhbCA9PSBudWxsICYmXG4gICAgICAgICAgdGhpcy5wcm9wcy5zbmFwVG9PZmZzZXRzID09IG51bGwsXG4gICAgICAgIC8vIG9uIEFuZHJvaWQsIHBhZ2luZ0VuYWJsZWQgbXVzdCBiZSBzZXQgdG8gdHJ1ZSB0byBoYXZlIHNuYXBUb0ludGVydmFsIC8gc25hcFRvT2Zmc2V0cyB3b3JrXG4gICAgICAgIGFuZHJvaWQ6XG4gICAgICAgICAgdGhpcy5wcm9wcy5wYWdpbmdFbmFibGVkID09PSB0cnVlIHx8XG4gICAgICAgICAgdGhpcy5wcm9wcy5zbmFwVG9JbnRlcnZhbCAhPSBudWxsIHx8XG4gICAgICAgICAgdGhpcy5wcm9wcy5zbmFwVG9PZmZzZXRzICE9IG51bGwsXG4gICAgICB9KSxcbiAgICB9O1xuXG4gICAgY29uc3Qge2RlY2VsZXJhdGlvblJhdGV9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoZGVjZWxlcmF0aW9uUmF0ZSAhPSBudWxsKSB7XG4gICAgICBwcm9wcy5kZWNlbGVyYXRpb25SYXRlID0gcHJvY2Vzc0RlY2VsZXJhdGlvblJhdGUoZGVjZWxlcmF0aW9uUmF0ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVmcmVzaENvbnRyb2wgPSB0aGlzLnByb3BzLnJlZnJlc2hDb250cm9sO1xuXG4gICAgaWYgKHJlZnJlc2hDb250cm9sKSB7XG4gICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICAgIC8vIE9uIGlPUyB0aGUgUmVmcmVzaENvbnRyb2wgaXMgYSBjaGlsZCBvZiB0aGUgU2Nyb2xsVmlldy5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TmF0aXZlRGlyZWN0aW9uYWxTY3JvbGxWaWV3IHsuLi5wcm9wc30gcmVmPXt0aGlzLl9zZXROYXRpdmVSZWZ9PlxuICAgICAgICAgICAge3JlZnJlc2hDb250cm9sfVxuICAgICAgICAgICAge2NvbnRlbnRDb250YWluZXJ9XG4gICAgICAgICAgPC9OYXRpdmVEaXJlY3Rpb25hbFNjcm9sbFZpZXc+XG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgICAgLy8gT24gQW5kcm9pZCB3cmFwIHRoZSBTY3JvbGxWaWV3IHdpdGggYSBBbmRyb2lkU3dpcGVSZWZyZXNoTGF5b3V0LlxuICAgICAgICAvLyBTaW5jZSB0aGUgU2Nyb2xsVmlldyBpcyB3cmFwcGVkIGFkZCB0aGUgc3R5bGUgcHJvcHMgdG8gdGhlXG4gICAgICAgIC8vIEFuZHJvaWRTd2lwZVJlZnJlc2hMYXlvdXQgYW5kIHVzZSBmbGV4OiAxIGZvciB0aGUgU2Nyb2xsVmlldy5cbiAgICAgICAgLy8gTm90ZTogd2Ugc2hvdWxkIHNwbGl0IHByb3BzLnN0eWxlIG9uIHRoZSBpbm5lciBhbmQgb3V0ZXIgcHJvcHNcbiAgICAgICAgLy8gaG93ZXZlciwgdGhlIFNjcm9sbFZpZXcgc3RpbGwgbmVlZHMgdGhlIGJhc2VTdHlsZSB0byBiZSBzY3JvbGxhYmxlXG4gICAgICAgIGNvbnN0IHtvdXRlciwgaW5uZXJ9ID0gc3BsaXRMYXlvdXRQcm9wcyhmbGF0dGVuU3R5bGUocHJvcHMuc3R5bGUpKTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChcbiAgICAgICAgICByZWZyZXNoQ29udHJvbCxcbiAgICAgICAgICB7c3R5bGU6IFN0eWxlU2hlZXQuY29tcG9zZShiYXNlU3R5bGUsIG91dGVyKX0sXG4gICAgICAgICAgPE5hdGl2ZURpcmVjdGlvbmFsU2Nyb2xsVmlld1xuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY29tcG9zZShiYXNlU3R5bGUsIGlubmVyKX1cbiAgICAgICAgICAgIHJlZj17dGhpcy5fc2V0TmF0aXZlUmVmfT5cbiAgICAgICAgICAgIHtjb250ZW50Q29udGFpbmVyfVxuICAgICAgICAgIDwvTmF0aXZlRGlyZWN0aW9uYWxTY3JvbGxWaWV3PixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxOYXRpdmVEaXJlY3Rpb25hbFNjcm9sbFZpZXcgey4uLnByb3BzfSByZWY9e3RoaXMuX3NldE5hdGl2ZVJlZn0+XG4gICAgICAgIHtjb250ZW50Q29udGFpbmVyfVxuICAgICAgPC9OYXRpdmVEaXJlY3Rpb25hbFNjcm9sbFZpZXc+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJhc2VWZXJ0aWNhbDoge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIGZsZXhTaHJpbms6IDEsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxuICB9LFxuICBiYXNlSG9yaXpvbnRhbDoge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIGZsZXhTaHJpbms6IDEsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxuICB9LFxuICBjb250ZW50Q29udGFpbmVySG9yaXpvbnRhbDoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICB9LFxufSk7XG5cbi8qICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF0gVGhlIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieSBGbG93J3NcbiAqIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG5mdW5jdGlvbiBXcmFwcGVyKHByb3BzLCByZWY6IChtaXhlZCA9PiBtaXhlZCkgfCB7Y3VycmVudDogbWl4ZWQsIC4uLn0pIHtcbiAgcmV0dXJuIDxTY3JvbGxWaWV3IHsuLi5wcm9wc30gc2Nyb2xsVmlld1JlZj17cmVmfSAvPjtcbn1cbldyYXBwZXIuZGlzcGxheU5hbWUgPSAnU2Nyb2xsVmlldyc7XG5jb25zdCBGb3J3YXJkZWRTY3JvbGxWaWV3ID0gUmVhY3QuZm9yd2FyZFJlZihXcmFwcGVyKTtcblxuLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIEFkZCBzdGF0aWMgY29udGV4dCB0byBGb3J3YXJkZWRTY3JvbGxWaWV3XG5Gb3J3YXJkZWRTY3JvbGxWaWV3LkNvbnRleHQgPSBTY3JvbGxWaWV3Q29udGV4dDtcblxuRm9yd2FyZGVkU2Nyb2xsVmlldy5kaXNwbGF5TmFtZSA9ICdTY3JvbGxWaWV3JztcblxubW9kdWxlLmV4cG9ydHMgPSAoKEZvcndhcmRlZFNjcm9sbFZpZXc6ICRGbG93Rml4TWUpOiBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgUmVhY3QuRWxlbWVudENvbmZpZzx0eXBlb2YgU2Nyb2xsVmlldz4sXG4gICRSZWFkT25seTx7fFxuICAgIC4uLiRFeGFjdDxSZWFjdC5FbGVtZW50UmVmPEhvc3RDb21wb25lbnQ8bWl4ZWQ+Pj4sXG4gICAgLi4uU2Nyb2xsVmlld0ltcGVyYXRpdmVNZXRob2RzLFxuICB8fT4sXG4+ICZcbiAgU2Nyb2xsVmlld0NvbXBvbmVudFN0YXRpY3MpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBb0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFwQ3BFQSxPQUFPLG9DQUFvQztBQXNDM0MsV0FDRUMsb0JBQVEsQ0FBQ0MsRUFBRSxLQUFLLFNBQVMsR0FDckI7SUFDRUMsK0JB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