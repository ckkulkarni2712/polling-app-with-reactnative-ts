8039d42928fba45c62937538973d5c97
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _native = require("@react-navigation/native");
var _reactNativeTableComponent = require("react-native-table-component");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Base = function Base() {
  var navigation = (0, _native.useNavigation)();
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    posts = _useState2[0],
    setPosts = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    currentpage = _useState4[0],
    setPage = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    fetched = _useState6[0],
    setFetched = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    loading = _useState8[0],
    setLoading = _useState8[1];
  var currentPageRef = (0, _react.useRef)(currentpage);
  var delayTime;
  var cache = 3600 * 1000;
  var _useState9 = (0, _react.useState)(true),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    hasMore = _useState10[0],
    setHasMore = _useState10[1];
  (0, _react.useEffect)(function () {
    _asyncStorage["default"].getItem('postsCache').then(function (data) {
      if (data) {
        var postsCache = JSON.parse(data);
        var currentTime = new Date().getTime();
        if (currentTime - postsCache.timestamp < cache) {
          setPosts(postsCache.posts);
        } else {
          getData(currentpage);
        }
      } else {
        getData(currentpage);
      }
    });
  }, []);
  (0, _react.useEffect)(function () {
    if (!loading && hasMore) {
      getData(currentpage);
    }
  }, [currentpage, loading]);
  (0, _react.useEffect)(function () {
    delayTime = setTimeout(function () {
      if (!loading) {
        currentPageRef.current += 1;
        setPage(currentPageRef.current);
      }
    }, 10000);
    return function () {
      return clearTimeout(delayTime);
    };
  }, [currentpage, loading]);
  var getData = function () {
    var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(currentpage) {
      var resultSet;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setLoading(true);
            _context.next = 3;
            return _axios["default"].get("https://hn.algolia.com/api/v1/search_by_date?tags=story&page=".concat(currentpage, "&hitsPerPage=3"));
          case 3:
            resultSet = _context.sent;
            if (resultSet.data.hits.length > 0) {
              setPosts([].concat((0, _toConsumableArray2["default"])(posts), (0, _toConsumableArray2["default"])(resultSet.data.hits)));
              setPage(currentpage + 1);
            } else {
              setHasMore(false);
            }
            setFetched(currentpage);
            _asyncStorage["default"].setItem('postsCache', JSON.stringify({
              timestamp: new Date().getTime(),
              posts: [].concat((0, _toConsumableArray2["default"])(posts), (0, _toConsumableArray2["default"])(resultSet.data.hits))
            }));
            setLoading(false);
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function getData(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var tableHead = ['URL', 'Title', 'Created at', 'Author'];
  var isCloseToBottom = function isCloseToBottom(_ref2) {
    var layoutMeasurement = _ref2.layoutMeasurement,
      contentOffset = _ref2.contentOffset,
      contentSize = _ref2.contentSize;
    var paddingToBottom = 50;
    return layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;
  };
  return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
    style: styles.container,
    onScroll: function onScroll(_ref3) {
      var nativeEvent = _ref3.nativeEvent;
      if (isCloseToBottom(nativeEvent)) {
        if (!loading && hasMore) {
          if (fetched !== currentpage) {
            getData(currentpage);
          }
        }
      }
    },
    children: (0, _jsxRuntime.jsxs)(_reactNativeTableComponent.Table, {
      style: styles.table,
      children: [(0, _jsxRuntime.jsx)(_reactNativeTableComponent.Row, {
        data: tableHead,
        style: styles.header,
        textStyle: {
          fontWeight: 'bold',
          fontSize: 18,
          textAlign: 'center',
          color: 'black'
        }
      }), posts.map(function (post, index) {
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return navigation.navigate('Raw JSON', {
              item: post
            });
          },
          style: styles.row,
          children: [(0, _jsxRuntime.jsx)(_reactNativeTableComponent.Col, {
            data: [post.url],
            textStyle: {
              fontSize: 16,
              textAlign: 'center',
              color: 'black'
            },
            style: styles.cell
          }), (0, _jsxRuntime.jsx)(_reactNativeTableComponent.Col, {
            data: [post.title],
            textStyle: {
              fontSize: 16,
              textAlign: 'center',
              color: 'black'
            },
            style: styles.cell
          }), (0, _jsxRuntime.jsx)(_reactNativeTableComponent.Col, {
            data: [post.created_at],
            textStyle: {
              fontSize: 16,
              textAlign: 'center',
              color: 'black'
            },
            style: styles.cell
          }), (0, _jsxRuntime.jsx)(_reactNativeTableComponent.Col, {
            data: [post.author],
            textStyle: {
              fontSize: 16,
              textAlign: 'center',
              color: 'black'
            },
            style: styles.cell
          })]
        }, index);
      })]
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 10
  },
  table: {
    marginBottom: 10
  },
  cell: {
    borderWidth: 1
  },
  header: {
    backgroundColor: 'lightgray',
    height: 50,
    borderWidth: 1,
    borderLeftWidth: 1
  },
  headerText: {
    fontWeight: 'bold',
    fontSize: 18,
    textAlign: 'center',
    color: 'black'
  },
  text: {
    fontSize: 16,
    textAlign: 'center',
    color: 'black'
  },
  row: {
    flex: 1,
    flexDirection: 'row'
  }
});
var _default = Base;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,