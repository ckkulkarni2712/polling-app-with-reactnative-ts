{"version":3,"names":["RCTAsyncStorage","NativeAsyncSQLiteDBStorage","NativeAsyncLocalStorage","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","invariant","Promise","resolve","reject","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","i","request","requestKeys","requestResult","setImmediate","push","keyIndex","indexOf","keyValuePairs","Array","isArray","e","out","Error","message","module","exports"],"sources":["AsyncStorage.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n * @jsdoc\n */\n\nimport NativeAsyncLocalStorage from './NativeAsyncLocalStorage';\nimport NativeAsyncSQLiteDBStorage from './NativeAsyncSQLiteDBStorage';\nimport invariant from 'invariant';\n\n// Use SQLite if available, otherwise file storage.\nconst RCTAsyncStorage = NativeAsyncSQLiteDBStorage || NativeAsyncLocalStorage;\n\ntype GetRequest = {\n  keys: Array<string>,\n  callback: ?(errors: ?Array<Error>, result: ?Array<Array<string>>) => void,\n  keyIndex: number,\n  resolve: (\n    result?:\n      | void\n      | null\n      | Promise<?Array<Array<string>>>\n      | Array<Array<string>>,\n  ) => void,\n  reject: (error?: mixed) => void,\n};\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See https://reactnative.dev/docs/asyncstorage\n */\nconst AsyncStorage = {\n  _getRequests: ([]: Array<GetRequest>),\n  _getKeys: ([]: Array<string>),\n  _immediate: (null: ?number),\n\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#getitem\n   */\n  getItem: function (\n    key: string,\n    callback?: ?(error: ?Error, result: ?string) => void,\n  ): Promise<?string> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiGet([key], function (errors, result) {\n        // Unpack result to get value from [[key,value]]\n        const value = result && result[0] && result[0][1] ? result[0][1] : null;\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0], value);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(value);\n        }\n      });\n    });\n  },\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#setitem\n   */\n  setItem: function (\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<void> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet([[key, value]], function (errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#removeitem\n   */\n  removeItem: function (\n    key: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<void> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove([key], function (errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * **NOTE:** This is not supported by all native implementations.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#mergeitem\n   */\n  mergeItem: function (\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<void> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge([[key, value]], function (errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#clear\n   */\n  clear: function (callback?: ?(error: ?Error) => void): Promise<void> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.clear(function (error) {\n        callback && callback(convertError(error));\n        if (error && convertError(error)) {\n          reject(convertError(error));\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#getallkeys\n   */\n  getAllKeys: function (\n    callback?: ?(error: ?Error, keys: ?Array<string>) => void,\n  ): Promise<?Array<string>> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.getAllKeys(function (error, keys) {\n        callback && callback(convertError(error), keys);\n        if (error) {\n          reject(convertError(error));\n        } else {\n          resolve(keys);\n        }\n      });\n    });\n  },\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#flushgetrequests\n   * */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  flushGetRequests: function (): void {\n    const getRequests = this._getRequests;\n    const getKeys = this._getKeys;\n\n    this._getRequests = [];\n    this._getKeys = [];\n\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    RCTAsyncStorage.multiGet(getKeys, function (errors, result) {\n      // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n      // it's much, much faster in practice for the data sets we deal with (we avoid\n      // allocating result pair arrays). This was heavily benchmarked.\n      //\n      // Is there a way to avoid using the map but fix the bug in this breaking test?\n      // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n      const map: {[string]: string} = {};\n      result &&\n        result.forEach(([key, value]) => {\n          map[key] = value;\n          return value;\n        });\n      const reqLength = getRequests.length;\n      for (let i = 0; i < reqLength; i++) {\n        const request = getRequests[i];\n        const requestKeys = request.keys;\n        const requestResult = requestKeys.map(key => [key, map[key]]);\n        request.callback && request.callback(null, requestResult);\n        request.resolve && request.resolve(requestResult);\n      }\n    });\n  },\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#multiget\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  multiGet: function (\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>, result: ?Array<Array<string>>) => void,\n  ): Promise<?Array<Array<string>>> {\n    if (!this._immediate) {\n      this._immediate = setImmediate(() => {\n        this._immediate = null;\n        this.flushGetRequests();\n      });\n    }\n\n    return new Promise<?Array<Array<string>>>((resolve, reject) => {\n      this._getRequests.push({\n        keys,\n        callback,\n        // do we need this?\n        keyIndex: this._getKeys.length,\n        resolve,\n        reject,\n      });\n      // avoid fetching duplicates\n      keys.forEach(key => {\n        if (this._getKeys.indexOf(key) === -1) {\n          this._getKeys.push(key);\n        }\n      });\n    });\n  },\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#multiset\n   */\n  multiSet: function (\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise<void> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#multiremove\n   */\n  multiRemove: function (\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise<void> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove(keys, function (errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * **NOTE**: This is not supported by all native implementations.\n   *\n   * See https://reactnative.dev/docs/asyncstorage#multimerge\n   */\n  multiMerge: function (\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise<void> {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n};\n\n// Not all native implementations support merge.\n// TODO: Check whether above comment is correct. multiMerge is guaranteed to\n// exist in the module spec so we should be able to just remove this check.\nif (RCTAsyncStorage && !RCTAsyncStorage.multiMerge) {\n  // $FlowFixMe[unclear-type]\n  delete (AsyncStorage: any).mergeItem;\n  // $FlowFixMe[unclear-type]\n  delete (AsyncStorage: any).multiMerge;\n}\n\nfunction convertErrors(\n  // NOTE: The native module spec only has the Array case, but the Android\n  // implementation passes a single object.\n  errs: ?(\n    | {message: string, key?: string}\n    | Array<{message: string, key?: string}>\n  ),\n) {\n  if (!errs) {\n    return null;\n  }\n  return (Array.isArray(errs) ? errs : [errs]).map(e => convertError(e));\n}\n\ndeclare function convertError(void | null): null;\ndeclare function convertError({message: string, key?: string}): Error;\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction convertError(error) {\n  if (!error) {\n    return null;\n  }\n  const out = new Error(error.message);\n  // $FlowFixMe[unclear-type]\n  (out: any).key = error.key;\n  return out;\n}\n\nmodule.exports = AsyncStorage;\n"],"mappings":"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"}