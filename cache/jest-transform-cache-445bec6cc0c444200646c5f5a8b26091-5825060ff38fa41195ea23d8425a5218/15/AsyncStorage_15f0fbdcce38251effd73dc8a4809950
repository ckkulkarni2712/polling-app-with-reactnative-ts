c449a0ebff47dd36765802e3a487bfe7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _NativeAsyncLocalStorage = _interopRequireDefault(require("./NativeAsyncLocalStorage"));
var _NativeAsyncSQLiteDBStorage = _interopRequireDefault(require("./NativeAsyncSQLiteDBStorage"));
var _invariant = _interopRequireDefault(require("invariant"));
var RCTAsyncStorage = _NativeAsyncSQLiteDBStorage["default"] || _NativeAsyncLocalStorage["default"];
var AsyncStorage = {
  _getRequests: [],
  _getKeys: [],
  _immediate: null,
  getItem: function getItem(key, callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiGet([key], function (errors, result) {
        var value = result && result[0] && result[0][1] ? result[0][1] : null;
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0], value);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  },
  setItem: function setItem(key, value, callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  },
  removeItem: function removeItem(key, callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove([key], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  },
  mergeItem: function mergeItem(key, value, callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  },
  clear: function clear(callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.clear(function (error) {
        callback && callback(convertError(error));
        if (error && convertError(error)) {
          reject(convertError(error));
        } else {
          resolve();
        }
      });
    });
  },
  getAllKeys: function getAllKeys(callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.getAllKeys(function (error, keys) {
        callback && callback(convertError(error), keys);
        if (error) {
          reject(convertError(error));
        } else {
          resolve(keys);
        }
      });
    });
  },
  flushGetRequests: function flushGetRequests() {
    var getRequests = this._getRequests;
    var getKeys = this._getKeys;
    this._getRequests = [];
    this._getKeys = [];
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
      var map = {};
      result && result.forEach(function (_ref) {
        var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];
        map[key] = value;
        return value;
      });
      var reqLength = getRequests.length;
      for (var i = 0; i < reqLength; i++) {
        var request = getRequests[i];
        var requestKeys = request.keys;
        var requestResult = requestKeys.map(function (key) {
          return [key, map[key]];
        });
        request.callback && request.callback(null, requestResult);
        request.resolve && request.resolve(requestResult);
      }
    });
  },
  multiGet: function multiGet(keys, callback) {
    var _this = this;
    if (!this._immediate) {
      this._immediate = setImmediate(function () {
        _this._immediate = null;
        _this.flushGetRequests();
      });
    }
    return new Promise(function (resolve, reject) {
      _this._getRequests.push({
        keys: keys,
        callback: callback,
        keyIndex: _this._getKeys.length,
        resolve: resolve,
        reject: reject
      });
      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
    });
  },
  multiSet: function multiSet(keyValuePairs, callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve();
        }
      });
    });
  },
  multiRemove: function multiRemove(keys, callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove(keys, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve();
        }
      });
    });
  },
  multiMerge: function multiMerge(keyValuePairs, callback) {
    (0, _invariant["default"])(RCTAsyncStorage, 'RCTAsyncStorage not available');
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve();
        }
      });
    });
  }
};
if (RCTAsyncStorage && !RCTAsyncStorage.multiMerge) {
  delete AsyncStorage.mergeItem;
  delete AsyncStorage.multiMerge;
}
function convertErrors(errs) {
  if (!errs) {
    return null;
  }
  return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
    return convertError(e);
  });
}
function convertError(error) {
  if (!error) {
    return null;
  }
  var out = new Error(error.message);
  out.key = error.key;
  return out;
}
module.exports = AsyncStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,