61b57b02ab5a05ef79dbb5f8a068f78e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
exports["default"] = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _invariant = _interopRequireDefault(require("invariant"));
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function createStringifySafeWithLimits(limits) {
  var _limits$maxDepth = limits.maxDepth,
    maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,
    _limits$maxStringLimi = limits.maxStringLimit,
    maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
    _limits$maxArrayLimit = limits.maxArrayLimit,
    maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
    _limits$maxObjectKeys = limits.maxObjectKeysLimit,
    maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
  var stack = [];
  function replacer(key, value) {
    while (stack.length && this !== stack[0]) {
      stack.shift();
    }
    if (typeof value === 'string') {
      var truncatedString = '...(truncated)...';
      if (value.length > maxStringLimit + truncatedString.length) {
        return value.substring(0, maxStringLimit) + truncatedString;
      }
      return value;
    }
    if ((0, _typeof2["default"])(value) !== 'object' || value === null) {
      return value;
    }
    var retval = value;
    if (Array.isArray(value)) {
      if (stack.length >= maxDepth) {
        retval = "[ ... array with ".concat(value.length, " values ... ]");
      } else if (value.length > maxArrayLimit) {
        retval = value.slice(0, maxArrayLimit).concat(["... extra ".concat(value.length - maxArrayLimit, " values truncated ...")]);
      }
    } else {
      (0, _invariant["default"])((0, _typeof2["default"])(value) === 'object', 'This was already found earlier');
      var keys = Object.keys(value);
      if (stack.length >= maxDepth) {
        retval = "{ ... object with ".concat(keys.length, " keys ... }");
      } else if (keys.length > maxObjectKeysLimit) {
        retval = {};
        var _iterator = _createForOfIteratorHelper(keys.slice(0, maxObjectKeysLimit)),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var k = _step.value;
            retval[k] = value[k];
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var truncatedKey = '...(truncated keys)...';
        retval[truncatedKey] = keys.length - maxObjectKeysLimit;
      }
    }
    stack.unshift(retval);
    return retval;
  }
  return function stringifySafe(arg) {
    if (arg === undefined) {
      return 'undefined';
    } else if (arg === null) {
      return 'null';
    } else if (typeof arg === 'function') {
      try {
        return arg.toString();
      } catch (e) {
        return '[function unknown]';
      }
    } else if (arg instanceof Error) {
      return arg.name + ': ' + arg.message;
    } else {
      try {
        var ret = JSON.stringify(arg, replacer);
        if (ret === undefined) {
          return '["' + (0, _typeof2["default"])(arg) + '" failed to stringify]';
        }
        return ret;
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            return arg.toString();
          } catch (E) {}
        }
      }
    }
    return '["' + (0, _typeof2["default"])(arg) + '" failed to stringify]';
  };
}
var stringifySafe = createStringifySafeWithLimits({
  maxDepth: 10,
  maxStringLimit: 100,
  maxArrayLimit: 50,
  maxObjectKeysLimit: 50
});
var _default = stringifySafe;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,