{"version":3,"names":["mock","useNavigation","jest","fn","mockReturnValue","navigate","navigation","describe","it","post","url","title","created_at","author","objectID","axios","get","mockResolvedValueOnce","data","hits","render","findByText","findAllByText","expect","toBeTruthy","createdAt","touchableOpacity","fireEvent","press","toHaveBeenCalledWith","item"],"sources":["Base.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport { ScrollView } from 'react-native';\r\nimport axios from 'axios';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport Base from '../Base';\r\n\r\njest.mock('axios');\r\njest.mock('@react-navigation/native', () => {\r\n  return {\r\n    useNavigation: jest.fn().mockReturnValue({\r\n      navigate: jest.fn(),\r\n    }),\r\n  };\r\n});\r\n\r\n\r\nconst navigation = useNavigation<NativeStackNavigationProp<any>>();\r\n\r\ndescribe('Base component', () => {\r\n  it('should render a list of posts', async () => {\r\n    const post = {\r\n      url: 'https://example.com',\r\n      title: 'Example title',\r\n      created_at: '2022-12-31',\r\n      author: 'John Doe',\r\n      objectID: '123',\r\n    };\r\n\r\n    (axios.get as jest.Mock).mockResolvedValueOnce({\r\n      data: {\r\n        hits: [post],\r\n      },\r\n    });\r\n\r\n    const { findByText, findAllByText } = render(<Base />);\r\n\r\n    const url = await findByText(post.url);\r\n    expect(url).toBeTruthy();\r\n\r\n    const title = await findByText(post.title);\r\n    expect(title).toBeTruthy();\r\n\r\n    const createdAt = await findByText(post.created_at);\r\n    expect(createdAt).toBeTruthy();\r\n\r\n    const author = await findByText(post.author);\r\n    expect(author).toBeTruthy();\r\n\r\n    const touchableOpacity = await findAllByText(post.title);\r\n    fireEvent.press(touchableOpacity[0]);\r\n    expect(navigation.navigate).toHaveBeenCalledWith('Raw JSON', { item: post });\r\n  });\r\n});\r\n"],"mappings":";;AAQA,cAAKA,IAAI,CAAC,OAAO,CAAC;AAClB,cAAKA,IAAI,CAAC,0BAA0B,EAAE,YAAM;EAC1C,OAAO;IACLC,aAAa,EAAEC,IAAI,CAACC,EAAE,EAAE,CAACC,eAAe,CAAC;MACvCC,QAAQ,EAAEH,IAAI,CAACC,EAAE;IACnB,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAAC;AAAA;AAAA;AAfH;AAGA;AACA;AACA;AACA;AAA2B;AAAA;EAAA;IAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAY3B,IAAMG,UAAU,GAAG,IAAAL,qBAAa,GAAkC;AAElEM,QAAQ,CAAC,gBAAgB,EAAE,YAAM;EAC/BC,EAAE,CAAC,+BAA+B,kEAAE;IAAA;IAAA;MAAA;QAAA;UAC5BC,IAAI,GAAG;YACXC,GAAG,EAAE,qBAAqB;YAC1BC,KAAK,EAAE,eAAe;YACtBC,UAAU,EAAE,YAAY;YACxBC,MAAM,EAAE,UAAU;YAClBC,QAAQ,EAAE;UACZ,CAAC;UAEAC,iBAAK,CAACC,GAAG,CAAeC,qBAAqB,CAAC;YAC7CC,IAAI,EAAE;cACJC,IAAI,EAAE,CAACV,IAAI;YACb;UACF,CAAC,CAAC;UAAC,UAEmC,IAAAW,mBAAM,EAAC,qBAAC,gBAAI,KAAG,CAAC,EAA9CC,UAAU,WAAVA,UAAU,EAAEC,aAAa,WAAbA,aAAa;UAAA;UAAA,OAEfD,UAAU,CAACZ,IAAI,CAACC,GAAG,CAAC;QAAA;UAAhCA,GAAG;UACTa,MAAM,CAACb,GAAG,CAAC,CAACc,UAAU,EAAE;UAAC;UAAA,OAELH,UAAU,CAACZ,IAAI,CAACE,KAAK,CAAC;QAAA;UAApCA,KAAK;UACXY,MAAM,CAACZ,KAAK,CAAC,CAACa,UAAU,EAAE;UAAC;UAAA,OAEHH,UAAU,CAACZ,IAAI,CAACG,UAAU,CAAC;QAAA;UAA7Ca,SAAS;UACfF,MAAM,CAACE,SAAS,CAAC,CAACD,UAAU,EAAE;UAAC;UAAA,OAEVH,UAAU,CAACZ,IAAI,CAACI,MAAM,CAAC;QAAA;UAAtCA,MAAM;UACZU,MAAM,CAACV,MAAM,CAAC,CAACW,UAAU,EAAE;UAAC;UAAA,OAEGF,aAAa,CAACb,IAAI,CAACE,KAAK,CAAC;QAAA;UAAlDe,gBAAgB;UACtBC,sBAAS,CAACC,KAAK,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAAC;UACpCH,MAAM,CAACjB,UAAU,CAACD,QAAQ,CAAC,CAACwB,oBAAoB,CAAC,UAAU,EAAE;YAAEC,IAAI,EAAErB;UAAK,CAAC,CAAC;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA,CAC9E,GAAC;AACJ,CAAC,CAAC"}