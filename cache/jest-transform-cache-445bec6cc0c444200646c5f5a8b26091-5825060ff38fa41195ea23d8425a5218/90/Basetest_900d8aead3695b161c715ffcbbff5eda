f63c4ffb8e04b86f7ed5b2a63f70ccbc
"use strict";

_getJestObj().mock('axios');
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _Base = _interopRequireDefault(require("../Base"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Base component', function () {
  it('should render a list of posts', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
    var post, _render, findByText, findAllByText, url, title, createdAt, author, touchableOpacity;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          post = {
            url: 'https://example.com',
            title: 'Example title',
            created_at: '2022-12-31',
            author: 'John Doe',
            objectID: '123'
          };
          _axios["default"].get.mockResolvedValueOnce({
            data: {
              hits: [post]
            }
          });
          _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base["default"], {})), findByText = _render.findByText, findAllByText = _render.findAllByText;
          _context.next = 5;
          return findByText(post.url);
        case 5:
          url = _context.sent;
          expect(url).toBeTruthy();
          _context.next = 9;
          return findByText(post.title);
        case 9:
          title = _context.sent;
          expect(title).toBeTruthy();
          _context.next = 13;
          return findByText(post.created_at);
        case 13:
          createdAt = _context.sent;
          expect(createdAt).toBeTruthy();
          _context.next = 17;
          return findByText(post.author);
        case 17:
          author = _context.sent;
          expect(author).toBeTruthy();
          _context.next = 21;
          return findAllByText(post.title);
        case 21:
          touchableOpacity = _context.sent;
          _reactNative.fireEvent.press(touchableOpacity[0]);
          expect(navigation.navigate).toHaveBeenCalledWith('Raw JSON', {
            item: post
          });
        case 24:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwiaXQiLCJwb3N0IiwidXJsIiwidGl0bGUiLCJjcmVhdGVkX2F0IiwiYXV0aG9yIiwib2JqZWN0SUQiLCJheGlvcyIsImdldCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImRhdGEiLCJoaXRzIiwicmVuZGVyIiwiZmluZEJ5VGV4dCIsImZpbmRBbGxCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY3JlYXRlZEF0IiwidG91Y2hhYmxlT3BhY2l0eSIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJpdGVtIl0sInNvdXJjZXMiOlsiQmFzZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IEJhc2UgZnJvbSAnLi4vQmFzZSc7XHJcblxyXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuXHJcbmRlc2NyaWJlKCdCYXNlIGNvbXBvbmVudCcsICgpID0+IHtcclxuICBpdCgnc2hvdWxkIHJlbmRlciBhIGxpc3Qgb2YgcG9zdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBwb3N0ID0ge1xyXG4gICAgICB1cmw6ICdodHRwczovL2V4YW1wbGUuY29tJyxcclxuICAgICAgdGl0bGU6ICdFeGFtcGxlIHRpdGxlJyxcclxuICAgICAgY3JlYXRlZF9hdDogJzIwMjItMTItMzEnLFxyXG4gICAgICBhdXRob3I6ICdKb2huIERvZScsXHJcbiAgICAgIG9iamVjdElEOiAnMTIzJyxcclxuICAgIH07XHJcblxyXG4gICAgKGF4aW9zLmdldCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBoaXRzOiBbcG9zdF0sXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IGZpbmRCeVRleHQsIGZpbmRBbGxCeVRleHQgfSA9IHJlbmRlcig8QmFzZSAvPik7XHJcblxyXG4gICAgY29uc3QgdXJsID0gYXdhaXQgZmluZEJ5VGV4dChwb3N0LnVybCk7XHJcbiAgICBleHBlY3QodXJsKS50b0JlVHJ1dGh5KCk7XHJcblxyXG4gICAgY29uc3QgdGl0bGUgPSBhd2FpdCBmaW5kQnlUZXh0KHBvc3QudGl0bGUpO1xyXG4gICAgZXhwZWN0KHRpdGxlKS50b0JlVHJ1dGh5KCk7XHJcblxyXG4gICAgY29uc3QgY3JlYXRlZEF0ID0gYXdhaXQgZmluZEJ5VGV4dChwb3N0LmNyZWF0ZWRfYXQpO1xyXG4gICAgZXhwZWN0KGNyZWF0ZWRBdCkudG9CZVRydXRoeSgpO1xyXG5cclxuICAgIGNvbnN0IGF1dGhvciA9IGF3YWl0IGZpbmRCeVRleHQocG9zdC5hdXRob3IpO1xyXG4gICAgZXhwZWN0KGF1dGhvcikudG9CZVRydXRoeSgpO1xyXG5cclxuICAgIGNvbnN0IHRvdWNoYWJsZU9wYWNpdHkgPSBhd2FpdCBmaW5kQWxsQnlUZXh0KHBvc3QudGl0bGUpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKHRvdWNoYWJsZU9wYWNpdHlbMF0pO1xyXG4gICAgZXhwZWN0KG5hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdSYXcgSlNPTicsIHsgaXRlbTogcG9zdCB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFRQSxjQUFLQSxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ2xCLGNBQUtBLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUM7QUFBQTtBQUFBO0FBZkg7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUEyQjtBQUFBO0VBQUE7SUFBQTtFQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUE7QUFZM0IsSUFBTUcsVUFBVSxHQUFHLElBQUFMLHFCQUFhLEdBQWtDO0FBRWxFTSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtFQUMvQkMsRUFBRSxDQUFDLCtCQUErQixrRUFBRTtJQUFBO0lBQUE7TUFBQTtRQUFBO1VBQzVCQyxJQUFJLEdBQUc7WUFDWEMsR0FBRyxFQUFFLHFCQUFxQjtZQUMxQkMsS0FBSyxFQUFFLGVBQWU7WUFDdEJDLFVBQVUsRUFBRSxZQUFZO1lBQ3hCQyxNQUFNLEVBQUUsVUFBVTtZQUNsQkMsUUFBUSxFQUFFO1VBQ1osQ0FBQztVQUVBQyxpQkFBSyxDQUFDQyxHQUFHLENBQWVDLHFCQUFxQixDQUFDO1lBQzdDQyxJQUFJLEVBQUU7Y0FDSkMsSUFBSSxFQUFFLENBQUNWLElBQUk7WUFDYjtVQUNGLENBQUMsQ0FBQztVQUFDLFVBRW1DLElBQUFXLG1CQUFNLEVBQUMscUJBQUMsZ0JBQUksS0FBRyxDQUFDLEVBQTlDQyxVQUFVLFdBQVZBLFVBQVUsRUFBRUMsYUFBYSxXQUFiQSxhQUFhO1VBQUE7VUFBQSxPQUVmRCxVQUFVLENBQUNaLElBQUksQ0FBQ0MsR0FBRyxDQUFDO1FBQUE7VUFBaENBLEdBQUc7VUFDVGEsTUFBTSxDQUFDYixHQUFHLENBQUMsQ0FBQ2MsVUFBVSxFQUFFO1VBQUM7VUFBQSxPQUVMSCxVQUFVLENBQUNaLElBQUksQ0FBQ0UsS0FBSyxDQUFDO1FBQUE7VUFBcENBLEtBQUs7VUFDWFksTUFBTSxDQUFDWixLQUFLLENBQUMsQ0FBQ2EsVUFBVSxFQUFFO1VBQUM7VUFBQSxPQUVISCxVQUFVLENBQUNaLElBQUksQ0FBQ0csVUFBVSxDQUFDO1FBQUE7VUFBN0NhLFNBQVM7VUFDZkYsTUFBTSxDQUFDRSxTQUFTLENBQUMsQ0FBQ0QsVUFBVSxFQUFFO1VBQUM7VUFBQSxPQUVWSCxVQUFVLENBQUNaLElBQUksQ0FBQ0ksTUFBTSxDQUFDO1FBQUE7VUFBdENBLE1BQU07VUFDWlUsTUFBTSxDQUFDVixNQUFNLENBQUMsQ0FBQ1csVUFBVSxFQUFFO1VBQUM7VUFBQSxPQUVHRixhQUFhLENBQUNiLElBQUksQ0FBQ0UsS0FBSyxDQUFDO1FBQUE7VUFBbERlLGdCQUFnQjtVQUN0QkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUNwQ0gsTUFBTSxDQUFDakIsVUFBVSxDQUFDRCxRQUFRLENBQUMsQ0FBQ3dCLG9CQUFvQixDQUFDLFVBQVUsRUFBRTtZQUFFQyxJQUFJLEVBQUVyQjtVQUFLLENBQUMsQ0FBQztRQUFDO1FBQUE7VUFBQTtNQUFBO0lBQUE7RUFBQSxDQUM5RSxHQUFDO0FBQ0osQ0FBQyxDQUFDIn0=