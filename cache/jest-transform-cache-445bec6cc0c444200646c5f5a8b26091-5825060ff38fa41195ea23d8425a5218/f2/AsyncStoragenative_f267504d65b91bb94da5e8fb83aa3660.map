{"version":3,"mappings":"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","names":["RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","value","errs","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","errorList","i","request","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from './helpers';\nimport RCTAsyncStorage from './RCTAsyncStorage';\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from './types';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\n\n  • If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n        resolve: null as any,\n        reject: null as any,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n"]}