e7d2377bc47d7d945d8f0bd5283e169e
"use strict";

module.exports = {
  get BatchedBridge() {
    return require("../BatchedBridge/BatchedBridge");
  },
  get ExceptionsManager() {
    return require("../Core/ExceptionsManager");
  },
  get Platform() {
    return require("../Utilities/Platform");
  },
  get RCTEventEmitter() {
    return require("../EventEmitter/RCTEventEmitter");
  },
  get ReactNativeViewConfigRegistry() {
    return require("../Renderer/shims/ReactNativeViewConfigRegistry");
  },
  get TextInputState() {
    return require("../Components/TextInput/TextInputState");
  },
  get UIManager() {
    return require("../ReactNative/UIManager");
  },
  get deepDiffer() {
    return require("../Utilities/differ/deepDiffer");
  },
  get deepFreezeAndThrowOnMutationInDev() {
    return require("../Utilities/deepFreezeAndThrowOnMutationInDev");
  },
  get flattenStyle() {
    return require("../StyleSheet/flattenStyle");
  },
  get ReactFiberErrorDialog() {
    return require("../Core/ReactFiberErrorDialog")["default"];
  },
  get legacySendAccessibilityEvent() {
    return require("../Components/AccessibilityInfo/legacySendAccessibilityEvent");
  },
  get RawEventEmitter() {
    return require("../Core/RawEventEmitter")["default"];
  },
  get CustomEvent() {
    return require("../Events/CustomEvent")["default"];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQmF0Y2hlZEJyaWRnZSIsInJlcXVpcmUiLCJFeGNlcHRpb25zTWFuYWdlciIsIlBsYXRmb3JtIiwiUkNURXZlbnRFbWl0dGVyIiwiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkiLCJUZXh0SW5wdXRTdGF0ZSIsIlVJTWFuYWdlciIsImRlZXBEaWZmZXIiLCJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJmbGF0dGVuU3R5bGUiLCJSZWFjdEZpYmVyRXJyb3JEaWFsb2ciLCJsZWdhY3lTZW5kQWNjZXNzaWJpbGl0eUV2ZW50IiwiUmF3RXZlbnRFbWl0dGVyIiwiQ3VzdG9tRXZlbnQiXSwic291cmNlcyI6WyJSZWFjdE5hdGl2ZVByaXZhdGVJbnRlcmZhY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbmltcG9ydCB0eXBlb2YgQmF0Y2hlZEJyaWRnZSBmcm9tICcuLi9CYXRjaGVkQnJpZGdlL0JhdGNoZWRCcmlkZ2UnO1xuaW1wb3J0IHR5cGVvZiBFeGNlcHRpb25zTWFuYWdlciBmcm9tICcuLi9Db3JlL0V4Y2VwdGlvbnNNYW5hZ2VyJztcbmltcG9ydCB0eXBlb2YgUGxhdGZvcm0gZnJvbSAnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCB0eXBlb2YgUkNURXZlbnRFbWl0dGVyIGZyb20gJy4uL0V2ZW50RW1pdHRlci9SQ1RFdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGVvZiBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSc7XG5pbXBvcnQgdHlwZW9mIFRleHRJbnB1dFN0YXRlIGZyb20gJy4uL0NvbXBvbmVudHMvVGV4dElucHV0L1RleHRJbnB1dFN0YXRlJztcbmltcG9ydCB0eXBlb2YgVUlNYW5hZ2VyIGZyb20gJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5pbXBvcnQgdHlwZW9mIGRlZXBEaWZmZXIgZnJvbSAnLi4vVXRpbGl0aWVzL2RpZmZlci9kZWVwRGlmZmVyJztcbmltcG9ydCB0eXBlb2YgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2IGZyb20gJy4uL1V0aWxpdGllcy9kZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYnO1xuaW1wb3J0IHR5cGVvZiBmbGF0dGVuU3R5bGUgZnJvbSAnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnO1xuaW1wb3J0IHt0eXBlIERhbmdlcm91c2x5SW1wcmVjaXNlU3R5bGVQcm9wfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGVvZiBSZWFjdEZpYmVyRXJyb3JEaWFsb2cgZnJvbSAnLi4vQ29yZS9SZWFjdEZpYmVyRXJyb3JEaWFsb2cnO1xuaW1wb3J0IHR5cGVvZiBsZWdhY3lTZW5kQWNjZXNzaWJpbGl0eUV2ZW50IGZyb20gJy4uL0NvbXBvbmVudHMvQWNjZXNzaWJpbGl0eUluZm8vbGVnYWN5U2VuZEFjY2Vzc2liaWxpdHlFdmVudCc7XG5pbXBvcnQgdHlwZW9mIFJhd0V2ZW50RW1pdHRlciBmcm9tICcuLi9Db3JlL1Jhd0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgdHlwZW9mIEN1c3RvbUV2ZW50IGZyb20gJy4uL0V2ZW50cy9DdXN0b21FdmVudCc7XG5cbi8vIGZsb3dsaW50IHVuc2FmZS1nZXR0ZXJzLXNldHRlcnM6b2ZmXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0IEJhdGNoZWRCcmlkZ2UoKTogQmF0Y2hlZEJyaWRnZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0JhdGNoZWRCcmlkZ2UvQmF0Y2hlZEJyaWRnZScpO1xuICB9LFxuICBnZXQgRXhjZXB0aW9uc01hbmFnZXIoKTogRXhjZXB0aW9uc01hbmFnZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db3JlL0V4Y2VwdGlvbnNNYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBQbGF0Zm9ybSgpOiBQbGF0Zm9ybSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuICB9LFxuICBnZXQgUkNURXZlbnRFbWl0dGVyKCk6IFJDVEV2ZW50RW1pdHRlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0V2ZW50RW1pdHRlci9SQ1RFdmVudEVtaXR0ZXInKTtcbiAgfSxcbiAgZ2V0IFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5KCk6IFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnknKTtcbiAgfSxcbiAgZ2V0IFRleHRJbnB1dFN0YXRlKCk6IFRleHRJbnB1dFN0YXRlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0U3RhdGUnKTtcbiAgfSxcbiAgZ2V0IFVJTWFuYWdlcigpOiBVSU1hbmFnZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInKTtcbiAgfSxcbiAgZ2V0IGRlZXBEaWZmZXIoKTogZGVlcERpZmZlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1V0aWxpdGllcy9kaWZmZXIvZGVlcERpZmZlcicpO1xuICB9LFxuICBnZXQgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2KCk6IGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjxcbiAgICB7Li4ufSB8IEFycmF5PG1peGVkPixcbiAgPiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1V0aWxpdGllcy9kZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYnKTtcbiAgfSxcbiAgZ2V0IGZsYXR0ZW5TdHlsZSgpOiBmbGF0dGVuU3R5bGU8RGFuZ2Vyb3VzbHlJbXByZWNpc2VTdHlsZVByb3A+IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnKTtcbiAgfSxcbiAgZ2V0IFJlYWN0RmliZXJFcnJvckRpYWxvZygpOiBSZWFjdEZpYmVyRXJyb3JEaWFsb2cge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db3JlL1JlYWN0RmliZXJFcnJvckRpYWxvZycpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBsZWdhY3lTZW5kQWNjZXNzaWJpbGl0eUV2ZW50KCk6IGxlZ2FjeVNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL0FjY2Vzc2liaWxpdHlJbmZvL2xlZ2FjeVNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQnKTtcbiAgfSxcbiAgZ2V0IFJhd0V2ZW50RW1pdHRlcigpOiBSYXdFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db3JlL1Jhd0V2ZW50RW1pdHRlcicpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBDdXN0b21FdmVudCgpOiBDdXN0b21FdmVudCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0V2ZW50cy9DdXN0b21FdmVudCcpLmRlZmF1bHQ7XG4gIH0sXG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQTJCQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZixJQUFJQyxhQUFhLEdBQWtCO0lBQ2pDLE9BQU9DLE9BQU8sa0NBQWtDO0VBQ2xELENBQUM7RUFDRCxJQUFJQyxpQkFBaUIsR0FBc0I7SUFDekMsT0FBT0QsT0FBTyw2QkFBNkI7RUFDN0MsQ0FBQztFQUNELElBQUlFLFFBQVEsR0FBYTtJQUN2QixPQUFPRixPQUFPLHlCQUF5QjtFQUN6QyxDQUFDO0VBQ0QsSUFBSUcsZUFBZSxHQUFvQjtJQUNyQyxPQUFPSCxPQUFPLG1DQUFtQztFQUNuRCxDQUFDO0VBQ0QsSUFBSUksNkJBQTZCLEdBQWtDO0lBQ2pFLE9BQU9KLE9BQU8sbURBQW1EO0VBQ25FLENBQUM7RUFDRCxJQUFJSyxjQUFjLEdBQW1CO0lBQ25DLE9BQU9MLE9BQU8sMENBQTBDO0VBQzFELENBQUM7RUFDRCxJQUFJTSxTQUFTLEdBQWM7SUFDekIsT0FBT04sT0FBTyw0QkFBNEI7RUFDNUMsQ0FBQztFQUNELElBQUlPLFVBQVUsR0FBZTtJQUMzQixPQUFPUCxPQUFPLGtDQUFrQztFQUNsRCxDQUFDO0VBQ0QsSUFBSVEsaUNBQWlDLEdBRW5DO0lBQ0EsT0FBT1IsT0FBTyxrREFBa0Q7RUFDbEUsQ0FBQztFQUNELElBQUlTLFlBQVksR0FBZ0Q7SUFDOUQsT0FBT1QsT0FBTyw4QkFBOEI7RUFDOUMsQ0FBQztFQUNELElBQUlVLHFCQUFxQixHQUEwQjtJQUNqRCxPQUFPVixPQUFPLGlDQUFpQyxXQUFRO0VBQ3pELENBQUM7RUFDRCxJQUFJVyw0QkFBNEIsR0FBaUM7SUFDL0QsT0FBT1gsT0FBTyxnRUFBZ0U7RUFDaEYsQ0FBQztFQUNELElBQUlZLGVBQWUsR0FBb0I7SUFDckMsT0FBT1osT0FBTywyQkFBMkIsV0FBUTtFQUNuRCxDQUFDO0VBQ0QsSUFBSWEsV0FBVyxHQUFnQjtJQUM3QixPQUFPYixPQUFPLHlCQUF5QixXQUFRO0VBQ2pEO0FBQ0YsQ0FBQyJ9