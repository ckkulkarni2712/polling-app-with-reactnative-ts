c684f4ead37c7cc6b5e70cc740f1b72d
'use strict';

_getJestObj().mock("../Libraries/Core/InitializeCore", function () {}).mock('../Libraries/Core/NativeExceptionsManager', function () {
  return {
    __esModule: true,
    "default": {
      reportException: jest.fn()
    }
  };
}).mock('../Libraries/ReactNative/UIManager', function () {
  return {
    AndroidViewPager: {
      Commands: {
        setPage: jest.fn(),
        setPageWithoutAnimation: jest.fn()
      }
    },
    blur: jest.fn(),
    createView: jest.fn(),
    customBubblingEventTypes: {},
    customDirectEventTypes: {},
    dispatchViewManagerCommand: jest.fn(),
    focus: jest.fn(),
    getViewManagerConfig: jest.fn(function (name) {
      if (name === 'AndroidDrawerLayout') {
        return {
          Constants: {
            DrawerPosition: {
              Left: 10
            }
          }
        };
      }
    }),
    hasViewManagerConfig: jest.fn(function (name) {
      return name === 'AndroidDrawerLayout';
    }),
    measure: jest.fn(),
    manageChildren: jest.fn(),
    removeSubviewsFromContainerWithID: jest.fn(),
    replaceExistingNonRootView: jest.fn(),
    setChildren: jest.fn(),
    updateView: jest.fn(),
    AndroidDrawerLayout: {
      Constants: {
        DrawerPosition: {
          Left: 10
        }
      }
    },
    AndroidTextInput: {
      Commands: {}
    },
    ScrollView: {
      Constants: {}
    },
    View: {
      Constants: {}
    }
  };
}).mock('../Libraries/Image/Image', function () {
  return mockComponent('../Libraries/Image/Image');
}).mock('../Libraries/Text/Text', function () {
  return mockComponent('../Libraries/Text/Text', MockNativeMethods);
}).mock('../Libraries/Components/TextInput/TextInput', function () {
  return mockComponent('../Libraries/Components/TextInput/TextInput', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    isFocused: jest.fn(),
    clear: jest.fn(),
    getNativeRef: jest.fn()
  }));
}).mock('../Libraries/Modal/Modal', function () {
  var baseComponent = mockComponent('../Libraries/Modal/Modal');
  var mockModal = jest.requireActual("./mockModal");
  return mockModal(baseComponent);
}).mock('../Libraries/Components/View/View', function () {
  return mockComponent('../Libraries/Components/View/View', MockNativeMethods);
}).mock('../Libraries/Components/AccessibilityInfo/AccessibilityInfo', function () {
  return {
    __esModule: true,
    "default": {
      addEventListener: jest.fn(),
      announceForAccessibility: jest.fn(),
      isAccessibilityServiceEnabled: jest.fn(),
      isBoldTextEnabled: jest.fn(),
      isGrayscaleEnabled: jest.fn(),
      isInvertColorsEnabled: jest.fn(),
      isReduceMotionEnabled: jest.fn(),
      prefersCrossFadeTransitions: jest.fn(),
      isReduceTransparencyEnabled: jest.fn(),
      isScreenReaderEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      removeEventListener: jest.fn(),
      setAccessibilityFocus: jest.fn(),
      sendAccessibilityEvent: jest.fn(),
      getRecommendedTimeoutMillis: jest.fn()
    }
  };
}).mock('../Libraries/Components/RefreshControl/RefreshControl', function () {
  return jest.requireActual("../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock");
}).mock('../Libraries/Components/ScrollView/ScrollView', function () {
  var baseComponent = mockComponent('../Libraries/Components/ScrollView/ScrollView', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    getScrollResponder: jest.fn(),
    getScrollableNode: jest.fn(),
    getInnerViewNode: jest.fn(),
    getInnerViewRef: jest.fn(),
    getNativeScrollRef: jest.fn(),
    scrollTo: jest.fn(),
    scrollToEnd: jest.fn(),
    flashScrollIndicators: jest.fn(),
    scrollResponderZoomTo: jest.fn(),
    scrollResponderScrollNativeHandleToKeyboard: jest.fn()
  }));
  var mockScrollView = jest.requireActual("./mockScrollView");
  return mockScrollView(baseComponent);
}).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', function () {
  return mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator');
}).mock('../Libraries/AppState/AppState', function () {
  return {
    addEventListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    })
  };
}).mock('../Libraries/Linking/Linking', function () {
  return {
    openURL: jest.fn(),
    canOpenURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    openSettings: jest.fn(),
    addEventListener: jest.fn(),
    getInitialURL: jest.fn(function () {
      return Promise.resolve();
    }),
    removeEventListener: jest.fn(),
    sendIntent: jest.fn()
  };
}).mock('../Libraries/BatchedBridge/NativeModules', function () {
  return {
    AlertManager: {
      alertWithArgs: jest.fn()
    },
    AsyncLocalStorage: {
      multiGet: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      }),
      multiSet: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiRemove: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiMerge: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      clear: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      getAllKeys: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      })
    },
    Clipboard: {
      getString: jest.fn(function () {
        return '';
      }),
      setString: jest.fn()
    },
    DeviceInfo: {
      getConstants: function getConstants() {
        return {
          Dimensions: {
            window: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            },
            screen: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            }
          }
        };
      }
    },
    DevSettings: {
      addMenuItem: jest.fn(),
      reload: jest.fn()
    },
    ImageLoader: {
      getSize: jest.fn(function (url) {
        return Promise.resolve({
          width: 320,
          height: 240
        });
      }),
      prefetchImage: jest.fn()
    },
    ImageViewManager: {
      getSize: jest.fn(function (uri, success) {
        return process.nextTick(function () {
          return success(320, 240);
        });
      }),
      prefetchImage: jest.fn()
    },
    KeyboardObserver: {
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    Networking: {
      sendRequest: jest.fn(),
      abortRequest: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    PlatformConstants: {
      getConstants: function getConstants() {
        return {};
      }
    },
    PushNotificationManager: {
      presentLocalNotification: jest.fn(),
      scheduleLocalNotification: jest.fn(),
      cancelAllLocalNotifications: jest.fn(),
      removeAllDeliveredNotifications: jest.fn(),
      getDeliveredNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return [];
        });
      }),
      removeDeliveredNotifications: jest.fn(),
      setApplicationIconBadgeNumber: jest.fn(),
      getApplicationIconBadgeNumber: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(0);
        });
      }),
      cancelLocalNotifications: jest.fn(),
      getScheduledLocalNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback();
        });
      }),
      requestPermissions: jest.fn(function () {
        return Promise.resolve({
          alert: true,
          badge: true,
          sound: true
        });
      }),
      abandonPermissions: jest.fn(),
      checkPermissions: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback({
            alert: true,
            badge: true,
            sound: true
          });
        });
      }),
      getInitialNotification: jest.fn(function () {
        return Promise.resolve(null);
      }),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    SourceCode: {
      getConstants: function getConstants() {
        return {
          scriptURL: null
        };
      }
    },
    StatusBarManager: {
      setColor: jest.fn(),
      setStyle: jest.fn(),
      setHidden: jest.fn(),
      setNetworkActivityIndicatorVisible: jest.fn(),
      setBackgroundColor: jest.fn(),
      setTranslucent: jest.fn(),
      getConstants: function getConstants() {
        return {
          HEIGHT: 42
        };
      }
    },
    Timing: {
      createTimer: jest.fn(),
      deleteTimer: jest.fn()
    },
    UIManager: {},
    BlobModule: {
      getConstants: function getConstants() {
        return {
          BLOB_URI_SCHEME: 'content',
          BLOB_URI_HOST: null
        };
      },
      addNetworkingHandler: jest.fn(),
      enableBlobSupport: jest.fn(),
      disableBlobSupport: jest.fn(),
      createFromParts: jest.fn(),
      sendBlob: jest.fn(),
      release: jest.fn()
    },
    WebSocketModule: {
      connect: jest.fn(),
      send: jest.fn(),
      sendBinary: jest.fn(),
      ping: jest.fn(),
      close: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    I18nManager: {
      allowRTL: jest.fn(),
      forceRTL: jest.fn(),
      swapLeftAndRightInRTL: jest.fn(),
      getConstants: function getConstants() {
        return {
          isRTL: false,
          doLeftAndRightSwapInRTL: true
        };
      }
    }
  };
}).mock('../Libraries/NativeComponent/NativeComponentRegistry', function () {
  return {
    get: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual("./mockNativeComponent")(name);
    }),
    getWithFallback_DEPRECATED: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual("./mockNativeComponent")(name);
    }),
    setRuntimeConfigProvider: jest.fn()
  };
}).mock('../Libraries/ReactNative/requireNativeComponent', function () {
  return jest.requireActual("./mockNativeComponent");
}).mock('../Libraries/Utilities/verifyComponentAttributeEquivalence', function () {
  return function () {};
}).mock('../Libraries/Vibration/Vibration', function () {
  return {
    vibrate: jest.fn(),
    cancel: jest.fn()
  };
}).mock('../Libraries/Components/View/ViewNativeComponent', function () {
  var React = require('react');
  var Component = function (_React$Component) {
    (0, _inherits2["default"])(Component, _React$Component);
    var _super = _createSuper(Component);
    function Component() {
      (0, _classCallCheck2["default"])(this, Component);
      return _super.apply(this, arguments);
    }
    (0, _createClass2["default"])(Component, [{
      key: "render",
      value: function render() {
        return React.createElement('View', this.props, this.props.children);
      }
    }]);
    return Component;
  }(React.Component);
  Component.displayName = 'View';
  return {
    __esModule: true,
    "default": Component
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var MockNativeMethods = jest.requireActual("./MockNativeMethods");
var mockComponent = jest.requireActual("./mockComponent");
jest.requireActual('@react-native/polyfills/Object.es8');
jest.requireActual('@react-native/polyfills/error-guard');
global.__DEV__ = true;
global.performance = {
  now: jest.fn(Date.now)
};
global.Promise = jest.requireActual('promise');
global.regeneratorRuntime = jest.requireActual('regenerator-runtime/runtime');
global.window = global;
global.requestAnimationFrame = function (callback) {
  return setTimeout(callback, 0);
};
global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
};
jest.setMock("../Libraries/vendor/core/ErrorUtils", require("../Libraries/vendor/core/ErrorUtils"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,