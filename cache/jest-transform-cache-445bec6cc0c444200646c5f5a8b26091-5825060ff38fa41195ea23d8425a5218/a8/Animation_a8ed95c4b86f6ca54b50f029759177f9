5ca375c713de63feba667cec082fc3b2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var NativeAnimatedHelper = require("../NativeAnimatedHelper");
var startNativeAnimationNextId = 1;
var Animation = function () {
  function Animation() {
    (0, _classCallCheck2["default"])(this, Animation);
    this.__active = void 0;
    this.__isInteraction = void 0;
    this.__nativeId = void 0;
    this.__onEnd = void 0;
    this.__iterations = void 0;
  }
  (0, _createClass2["default"])(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      var startNativeAnimationWaitId = "".concat(startNativeAnimationNextId, ":startAnimation");
      startNativeAnimationNextId += 1;
      NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);
      try {
        var config = this.__getNativeAnimationConfig();
        animatedValue.__makeNative(config.platformConfig);
        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config, this.__debouncedOnEnd.bind(this));
      } catch (e) {
        throw e;
      } finally {
        NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }]);
  return Animation;
}();
module.exports = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYXRpdmVBbmltYXRlZEhlbHBlciIsInJlcXVpcmUiLCJzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCIsIkFuaW1hdGlvbiIsIl9fYWN0aXZlIiwiX19pc0ludGVyYWN0aW9uIiwiX19uYXRpdmVJZCIsIl9fb25FbmQiLCJfX2l0ZXJhdGlvbnMiLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwiQVBJIiwic3RvcEFuaW1hdGlvbiIsIkVycm9yIiwicmVzdWx0Iiwic3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQiLCJzZXRXYWl0aW5nRm9ySWRlbnRpZmllciIsImNvbmZpZyIsIl9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnIiwiX19tYWtlTmF0aXZlIiwicGxhdGZvcm1Db25maWciLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJfX2RlYm91bmNlZE9uRW5kIiwiYmluZCIsImUiLCJ1bnNldFdhaXRpbmdGb3JJZGVudGlmaWVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcbmltcG9ydCB0eXBlIHtQbGF0Zm9ybUNvbmZpZ30gZnJvbSAnLi4vQW5pbWF0ZWRQbGF0Zm9ybUNvbmZpZyc7XG5pbXBvcnQgdHlwZSBBbmltYXRlZFZhbHVlIGZyb20gJy4uL25vZGVzL0FuaW1hdGVkVmFsdWUnO1xuXG5leHBvcnQgdHlwZSBFbmRSZXN1bHQgPSB7ZmluaXNoZWQ6IGJvb2xlYW4sIC4uLn07XG5leHBvcnQgdHlwZSBFbmRDYWxsYmFjayA9IChyZXN1bHQ6IEVuZFJlc3VsdCkgPT4gdm9pZDtcblxuZXhwb3J0IHR5cGUgQW5pbWF0aW9uQ29uZmlnID0ge1xuICBpc0ludGVyYWN0aW9uPzogYm9vbGVhbixcbiAgdXNlTmF0aXZlRHJpdmVyOiBib29sZWFuLFxuICBwbGF0Zm9ybUNvbmZpZz86IFBsYXRmb3JtQ29uZmlnLFxuICBvbkNvbXBsZXRlPzogP0VuZENhbGxiYWNrLFxuICBpdGVyYXRpb25zPzogbnVtYmVyLFxufTtcblxubGV0IHN0YXJ0TmF0aXZlQW5pbWF0aW9uTmV4dElkID0gMTtcblxuLy8gSW1wb3J0YW50IG5vdGU6IHN0YXJ0KCkgYW5kIHN0b3AoKSB3aWxsIG9ubHkgYmUgY2FsbGVkIGF0IG1vc3Qgb25jZS5cbi8vIE9uY2UgYW4gYW5pbWF0aW9uIGhhcyBiZWVuIHN0b3BwZWQgb3IgZmluaXNoZWQgaXRzIGNvdXJzZSwgaXQgd2lsbFxuLy8gbm90IGJlIHJldXNlZC5cbmNsYXNzIEFuaW1hdGlvbiB7XG4gIF9fYWN0aXZlOiBib29sZWFuO1xuICBfX2lzSW50ZXJhY3Rpb246IGJvb2xlYW47XG4gIF9fbmF0aXZlSWQ6IG51bWJlcjtcbiAgX19vbkVuZDogP0VuZENhbGxiYWNrO1xuICBfX2l0ZXJhdGlvbnM6IG51bWJlcjtcbiAgc3RhcnQoXG4gICAgZnJvbVZhbHVlOiBudW1iZXIsXG4gICAgb25VcGRhdGU6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkLFxuICAgIG9uRW5kOiA/RW5kQ2FsbGJhY2ssXG4gICAgcHJldmlvdXNBbmltYXRpb246ID9BbmltYXRpb24sXG4gICAgYW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRWYWx1ZSxcbiAgKTogdm9pZCB7fVxuICBzdG9wKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9fbmF0aXZlSWQpIHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5zdG9wQW5pbWF0aW9uKHRoaXMuX19uYXRpdmVJZCk7XG4gICAgfVxuICB9XG4gIF9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnKCk6IGFueSB7XG4gICAgLy8gU3ViY2xhc3NlcyB0aGF0IGhhdmUgY29ycmVzcG9uZGluZyBhbmltYXRpb24gaW1wbGVtZW50YXRpb24gZG9uZSBpbiBuYXRpdmVcbiAgICAvLyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2RcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgYW5pbWF0aW9uIHR5cGUgY2Fubm90IGJlIG9mZmxvYWRlZCB0byBuYXRpdmUnKTtcbiAgfVxuICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIHN1YmNsYXNzZXMgdG8gbWFrZSBzdXJlIG9uRW5kIGlzIG9ubHkgY2FsbGVkIG9uY2UuXG4gIF9fZGVib3VuY2VkT25FbmQocmVzdWx0OiBFbmRSZXN1bHQpOiB2b2lkIHtcbiAgICBjb25zdCBvbkVuZCA9IHRoaXMuX19vbkVuZDtcbiAgICB0aGlzLl9fb25FbmQgPSBudWxsO1xuICAgIG9uRW5kICYmIG9uRW5kKHJlc3VsdCk7XG4gIH1cbiAgX19zdGFydE5hdGl2ZUFuaW1hdGlvbihhbmltYXRlZFZhbHVlOiBBbmltYXRlZFZhbHVlKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQgPSBgJHtzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZH06c3RhcnRBbmltYXRpb25gO1xuICAgIHN0YXJ0TmF0aXZlQW5pbWF0aW9uTmV4dElkICs9IDE7XG4gICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnNldFdhaXRpbmdGb3JJZGVudGlmaWVyKFxuICAgICAgc3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQsXG4gICAgKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpO1xuICAgICAgYW5pbWF0ZWRWYWx1ZS5fX21ha2VOYXRpdmUoY29uZmlnLnBsYXRmb3JtQ29uZmlnKTtcbiAgICAgIHRoaXMuX19uYXRpdmVJZCA9IE5hdGl2ZUFuaW1hdGVkSGVscGVyLmdlbmVyYXRlTmV3QW5pbWF0aW9uSWQoKTtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5zdGFydEFuaW1hdGluZ05vZGUoXG4gICAgICAgIHRoaXMuX19uYXRpdmVJZCxcbiAgICAgICAgYW5pbWF0ZWRWYWx1ZS5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvciB0aGlzIHBhcmFtZXRlcnNcbiAgICAgICAgdGhpcy5fX2RlYm91bmNlZE9uRW5kLmJpbmQodGhpcyksXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS51bnNldFdhaXRpbmdGb3JJZGVudGlmaWVyKFxuICAgICAgICBzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0aW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDO0FBQUE7QUFBQTtBQUViLElBQU1BLG9CQUFvQixHQUFHQyxPQUFPLDJCQUEyQjtBQWUvRCxJQUFJQywwQkFBMEIsR0FBRyxDQUFDO0FBQUMsSUFLN0JDLFNBQVM7RUFBQTtJQUFBO0lBQUEsS0FDYkMsUUFBUTtJQUFBLEtBQ1JDLGVBQWU7SUFBQSxLQUNmQyxVQUFVO0lBQUEsS0FDVkMsT0FBTztJQUFBLEtBQ1BDLFlBQVk7RUFBQTtFQUFBO0lBQUE7SUFBQSxPQUNaLGVBQ0VDLFNBQWlCLEVBQ2pCQyxRQUFpQyxFQUNqQ0MsS0FBbUIsRUFDbkJDLGlCQUE2QixFQUM3QkMsYUFBNEIsRUFDdEIsQ0FBQztFQUFDO0lBQUE7SUFBQSxPQUNWLGdCQUFhO01BQ1gsSUFBSSxJQUFJLENBQUNQLFVBQVUsRUFBRTtRQUNuQk4sb0JBQW9CLENBQUNjLEdBQUcsQ0FBQ0MsYUFBYSxDQUFDLElBQUksQ0FBQ1QsVUFBVSxDQUFDO01BQ3pEO0lBQ0Y7RUFBQztJQUFBO0lBQUEsT0FDRCxzQ0FBa0M7TUFHaEMsTUFBTSxJQUFJVSxLQUFLLENBQUMsbURBQW1ELENBQUM7SUFDdEU7RUFBQztJQUFBO0lBQUEsT0FFRCwwQkFBaUJDLE1BQWlCLEVBQVE7TUFDeEMsSUFBTU4sS0FBSyxHQUFHLElBQUksQ0FBQ0osT0FBTztNQUMxQixJQUFJLENBQUNBLE9BQU8sR0FBRyxJQUFJO01BQ25CSSxLQUFLLElBQUlBLEtBQUssQ0FBQ00sTUFBTSxDQUFDO0lBQ3hCO0VBQUM7SUFBQTtJQUFBLE9BQ0QsZ0NBQXVCSixhQUE0QixFQUFRO01BQ3pELElBQU1LLDBCQUEwQixhQUFNaEIsMEJBQTBCLG9CQUFpQjtNQUNqRkEsMEJBQTBCLElBQUksQ0FBQztNQUMvQkYsb0JBQW9CLENBQUNjLEdBQUcsQ0FBQ0ssdUJBQXVCLENBQzlDRCwwQkFBMEIsQ0FDM0I7TUFDRCxJQUFJO1FBQ0YsSUFBTUUsTUFBTSxHQUFHLElBQUksQ0FBQ0MsMEJBQTBCLEVBQUU7UUFDaERSLGFBQWEsQ0FBQ1MsWUFBWSxDQUFDRixNQUFNLENBQUNHLGNBQWMsQ0FBQztRQUNqRCxJQUFJLENBQUNqQixVQUFVLEdBQUdOLG9CQUFvQixDQUFDd0Isc0JBQXNCLEVBQUU7UUFDL0R4QixvQkFBb0IsQ0FBQ2MsR0FBRyxDQUFDVyxrQkFBa0IsQ0FDekMsSUFBSSxDQUFDbkIsVUFBVSxFQUNmTyxhQUFhLENBQUNhLGNBQWMsRUFBRSxFQUM5Qk4sTUFBTSxFQUVOLElBQUksQ0FBQ08sZ0JBQWdCLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDakM7TUFDSCxDQUFDLENBQUMsT0FBT0MsQ0FBQyxFQUFFO1FBQ1YsTUFBTUEsQ0FBQztNQUNULENBQUMsU0FBUztRQUNSN0Isb0JBQW9CLENBQUNjLEdBQUcsQ0FBQ2dCLHlCQUF5QixDQUNoRFosMEJBQTBCLENBQzNCO01BQ0g7SUFDRjtFQUFDO0VBQUE7QUFBQTtBQUdIYSxNQUFNLENBQUNDLE9BQU8sR0FBRzdCLFNBQVMifQ==